%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: canada-silhouette.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: M
%%CreationDate: 9/24/2015
%%BoundingBox: 0 0 681 543
%%HiResBoundingBox: 0 0 680.2559 543
%%CropBox: 0 0 680.2559 543
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 104 8%%BeginData: 7459 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD3FFF5227F827A8FD78FF7D52FD05F8A8FD77FF7DFD07F852FD76
%FFA8FD09F8A8FD72FF5227A87DFD08F827FD69FFA8FD09FF52FD05F827FD
%05F87DFD69FFF85227FFFFA852A8FFFFA8F8F8277D5252FD04F827A8FD68
%FF7D52F8F8A8FFF8F8F827F8A827F8F827FD06F87DFD66FF7DA852F827F8
%52FFA8FD06F852F8F8F827FD05F8A8FD65FF27F8F852F8F8F8A87D52A87D
%FD04F852FFA8522727F8F8F852FD63FFA87D27F8F8F87D7DF87DFF52F87D
%FFA87D27F8275252FD05F8277DFD63FF7DF8F8F827F8A8FFA8FFFF52F852
%FFFFFFA8272752FD08F852FD62FFA852F8277D27F8A8FF7DFFFF527DFFFF
%A827277DA87DF8F8F827F8F8F87DFD64FF27F852F8F82752F8FFA8F8F87D
%2752F8F8F827272752277D7DF87DFD65FFA827F8F8F82727F827522727F8
%F8F87D5252F8F8A8FFFFFF522752FD61FF522727A8FF52FD08F87DF8F8F8
%27FFA8A8F8F8A8A87DFD04F852FD60FFF8F8F8277DFFFFA82727F8F8F827
%F87DF8F8F852F85227F8F827FD05F852FD5FFF7DFD05F87DFFF8F8F82752
%A852F8FF7DF827FD0CF852FD4EFF7DFD0FFFA827FD05F87DFF5252FD05FF
%7DFFFFFFA827F8F85252F8F8F827275252FD4EFFF8F87DFD0DFFA827FD05
%F8527DFD05FFA87DA8FD05FFA87D52A8FFFF527DA8FD04FFA8277DFD49FF
%27F8F852FD0CFF7DF8F827F8F8275227F852FD04FF7DF8F8A8FF52FFFFFF
%52F8F827A8A827277D52277DF8F8F87DFD47FF52FD04F8A8FD0BFF7DFD04
%F85227FD04F827FFFFA827F8F8A87DF8F82752FD04F87D27F8F852F8F8F8
%27F8F852A8FD45FF7DFD06F8A87DFD0452FD05FF7DF8F827A852FD06F852
%7D27F827A87DA827F8F852F8F8F827A827F82727F8F8F852A827F827FFFF
%A8FD41FF7DFD07F827FD05F8525252FFFFFF527DA8FFFD09F827F8F8A8F8
%F827F82752F8F8F827A8F8F82727F8F8F87D7DF8F8F8277DF852FD3FFFA8
%FD0CF8522752F852FD06FFA827FD07F82752F8F8A827F8F827F827F82727
%FF52F8F85227FD0CF87D52A8FD3BFFA8FD11F8277D52FD05FF27FD08F827
%F8F8A8A8FD04F82727F8FFFF27F8F8F87DFD0EF82752A8FD39FF27FD13F8
%52FD05FF7DFD0BF8A8FF7DF8F8F87D27F8A8FFFD04F82727FD0DF827F827
%A8FD37FF52FD14F827277DFD04FFA87D52FD08F87DFFFF27F8277DF8F827
%FFA827FD14F827FD36FF7DFD17F827FFFFFF52F8275252FD07F87DFFFFA8
%527D52F8F8F8FFFF27FD09F852FD09F852A8FD35FFA8FD19F852FFFFFD0D
%F852FD04FFFD04F852FFFD0AF8527DFD08F8277D7DA87D7DA8FD2FFFA8FD
%1BF8275252FD0DF852FFFFFF27FD04F8A8FF52522727F827527D52A8FF7D
%FD0DF82727527DFD2CFFFD1FF8A8FD0BF827F8FFA87D27FD04F8A8FD04FF
%27F8F827A8FFFFFF7DF85227FD0EF8FD2BFF52FD1FF87D52FD09F8277DFF
%FF27F85252F8F8F827A8A8FFFF52F8F8F852FD04FF7DFF5227FD0CF852FD
%2AFF7DFD20F8A8A827F827F8277DA827F8F827FF27F8F8F8A827F8F8F827
%27FFFF7DFD04F8FFFFFF7DF827F8F85227FD0BF8A8FD28FFA8FD21F8A8FD
%07FF27FD04A8FF2727F8F85252F8F8F827F87DFF7DF8F8F852FFFFFF7DF8
%F852527D27F827F8F8F8522727F8F87DFD29FF27FD23F852527DFF52F8F8
%27FD05FFA82727FF52FD05F852FF27FD04F8A8FFFF7DF8F8A8FFFFF8F8A8
%7DF8F852FF52F8F87DFD28FF7DFD27F8FF27F8F8F8272752FFFF52F8277D
%27FD05F852A8FD05F827FFFFFF527DFFFF7D27F82727F8F827A8A87D7D7D
%FD28FFFD28F85252FD07F827F8F8F827FD07F852FD06F8A8FD06FF52FD09
%F87DFD2AFF7DFD42F827FD07FFA827FD09F827FD2AFF52FD41F8A8FD07FF
%A8FD0BF87DFD29FFFD3DF82727F827FD07FF5227FD0DF852A8FD27FFFD3E
%F852F87DFD06FF27FD10F852FD27FF52FD39F82727F82727F8527DA8FFFF
%FFA8FD04F87D7D27FD05F827F8F8F82752FD27FFA8F827FD37F82727277D
%52FD04F827FFFFFF2727F87DFFFFFF7DFD07F827A8FD29FFA8FFFFFD39F8
%27FD06F827FD0AFFA8FD08F8A8FD2AFFA8FD39F82727FD07F8FFA87DA8FD
%06FFA87DA8522727527DFD2BFF7DFD39F87D27F8F8272727F8F8FF7DF827
%FD04FFA8A8FD33FF52FD37F87DFFA8FD04F8FFA87DA8FFA87D7DA85252F8
%F8F852A8FD08FF5227FD27FF7DFD36F827FFFFFFA852F87DA87D27A8FFFF
%FF52FD07F87DA8527DFD05FFF8F852FD26FF7DFD36F8A8FD06FF7DF8F8F8
%527DF87DFD0CF8A8FD04FF27F8F827A8FD24FFA8FD35F827FD07FF52F8F8
%52FF27F8527DFD0BF8A8FD04FF52FD04F8FD24FF7DFD34F827A8FD07FFA8
%2727FFFFA8F87DFFFD0BF827FD04FF27FD04F82752FD22FF7DFD33F852FD
%12FFFD0CF852FFFFFFFD07F87DFD21FF7DFD33F8A8FD12FF7DFD0CF8527D
%52FD08F87DFD21FF27FD32F8FD14FF7DFD16F852FD21FF52FD31F87DFD14
%FF7DFD16F827275227A8A87D52A8FD19FF27FD31F8A8FD14FF52FD15F827
%FD05F827F8F8F8A8A8A8FD0FFF7D27A8FFFFFF7DFD32F8FD15FFFD1FF827
%F827F8F852FD0DFF7DF827A8FFA8FD32F827FD14FFA827FD1DF827FD06F8
%A8FD0CFF52F8F827FF27FD32F827FD16FF52FD1CF827FD06F827FD0CFF27
%F827A8A8FD33F852FD17FF7DFD1BF827FD07F8A8A8FD0AFF27F8A8FF52FD
%34F8277DFD16FF27FD21F827F827FD0AFF7DF8FFFF7DFD36F87DFD15FFA8
%FD21F827F8F8FD0AFF52F8A8FFA827FD35F852FD16FFFD21F852F827A8FF
%FFA827A8FD05FFA8FFFFFFA8FD35F852FD16FF52FD1FF8FF52F8522752FF
%F8F852FFA8FD08FFFD35F827525227527DA8FD10FFFD1FF852FF7DFD09F8
%52FD08FF27FD3BF87DFD0EFF52FD1FF827FF7DFD0AF82752FD05FF52FD3D
%F87DFD0DFF52FD1FF87DFFA8FD0BF852FD05FF27FD3EF852527DFD08FF7D
%27FD1FF87DFFFFA8FD08F82727F8F8FFFFFF7D7D52FD41F82727522752A8
%FFA8FD20F87DFFFFFFA8FD08F8277DF852FFFFFFF8F85227FD45F8A8FFFF
%7DFD1CF82752A8FD04FFA827FD05F85227F8A8FD05FF7DF8277DFD45F87D
%FFFFFFFD1BF827277D7DA8FD04FF27FD04F852FF5227FD07FF52F82752FD
%44F8FD04FFA8FD18F87D7DFD05F8A8FFFFFF52F8F827FD0CFF27F8F827FD
%44F852FD04FF7DFD15F87DA8FFA87D7D5252A8FD04FF7D2727FD0DFF52F8
%F85227FD44F87DFFFFFF7DFD14F827FFFF522727A8FD18FF27F87DA8FD44
%F87DFD04FF27FD14F8FF27FD04F8FD07FF277DFD0FFF52F8F8A852FD44F8
%52FFFFA827FD13F87D7DFD05F8A8FD05FF7DF8F8A8FD0FFFF8F827A8FD45
%F852FF7DFD13F852A8FD05F827FD06FF7DF8F8F8FD0FFF7DF827FFFF5227
%FD43F82727FD12F8277D27FD05F852FF5227FF7D527D27F852FD0FFFA87D
%A8FD04FFA827FD55F82752FD07F87D27FD04F87D52277DFD18FFA87D27FD
%52F85227FD08F8272752F827F827F87DFD1BFF7D52FD5CF827FD04F852FD
%1FFF7D52FD4DF827F827527DFD0CF8A8FD21FFA85252FD49F827F8F87DFF
%FF27FD05F87DFD04F87DFD26FFA87D2727FD47F8FFFFFFA827F8F8F87D27
%F8F852FD2BFFA8A87D5227FD43F8A8FFFFFFA827F87D52F8F8F8A8FD30FF
%A8A87D522727FD3CF827FD06FFA8FF27F8F8F8FD36FFA8FFA87DFD0452FD
%0927FD0BF8277D7D7DFD1DF827FD08FF27F8F827FD47FFA8522727FD06F8
%7DFD04FF52FD1CF852FD08FFA82752A8FD4CFF7D52527DA8FD05FFA8A827
%FD19F827FD66FFFD16F827527DFD67FF7DFD14F87DFD6BFF52277DF827F8
%27FD0BF852FD6DFFA8FFFFFFA8FFA852FD09F827FD76FFA8FD08F852FD74
%FF2727A852FD06F852FD75FFF8F827FD05F8527DFD76FF27FD05F852A8FD
%78FF52FD04F852A8FD79FF27FD04F827F8FD78FFA827F8F8F82727A8FD78
%FF52F8F8F87DA8FD7AFF27F852FD7CFF52F852FD2CFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-09-24T07:11:23-04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:ModifyDate>2015-09-24T07:11:23-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-09-24T07:11:23-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq07oiM7sFRQSzE0AA3JJOKpF5486aL5M8rX3mXWGb6jYoCUiHKSR3YJHGg/md2A&#xA;32HU0GKvivz7/wA5Tfmh5pLwWV0vl3TSW4waaWSZlP2RJckmQkD+TgD4Yqwv8rPOD+VPzB0jzC5u&#xA;ZFtbitxFbMBLMklVeMl9iH5b16+3UKv0mxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxVbNNDBC80zrFDEpeSRyFVVUVLMTsABirwbzt/zlKvlLzFdW0vl/wDSvl2V&#xA;Yn0PXLC6SSC7jO0ziVVeM8HDLxU1qtDirN/zN/PHyl+X2k6bfapHPc3GqcWttNg9MXQjZSxkkjkd&#xA;Cqj7J/ytsVYvqP53flN+ZXlq+8n2evNpOpeYrCSC2+uRtBwmmDIsMkgJi5cgOS86MDRSa4q+TLTz&#xA;Br2rQWfkHzZrk+naBps0npLcoZRYzQq4o0e0hFSU41+Gu3ShVYzqcehpHbfoye5mk4sLz6zEkQ5h&#xA;jxaPg8nwlSNjvUe+yrPv+cePy+uvOf5l6bGpiFho8sWp6kJGAZoLeVTwVPtNzfihpsAdz0qq/QfF&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8m/Oz/AJyB0v8ALK5t&#xA;NNbTJtS1S+t3uIQGEcKKCUQuxqTV13AHTFXzT5P8/wD5s+dvzF0Rdb12+Gh6zfxxX9s9w1ppstnz&#xA;AuoBGWS3cGHknChLHbcnFXoP5Z/84qeb9D/NGLUdYuoh5d0O5W4sbpCrvfKjco09GpMQ/wB+cvkt&#xA;ftYqiNFli/N780fM/lXz95c9b6iL2PQNbjimt57GKKciKGVo2jSRaNzTn+1XqG2Veffmt/zi/wCZ&#xA;PIuhWus2d8uuQchFfpFGYpY5JJOEXpR1dpFbkAabg+2Kqfmi88maNoZOoflje2fmfVtMa4i1vVr6&#xA;6dTPPyilnaGkMZLJylU0BEhACjY4q8k1a7hvLhJ4oYLVfSijFtbKyovpRrGS3OpLuV5sampJxV9P&#xA;/wDOGsvkSzudTs0ukuvOl7G0pKQyhYrCJkBiWV0UcjIQ7gbH4evHZV9T4q7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlnmTzLoflnRbnW9du1sdLswGuLlwzBeTBFAVAzM&#xA;SzAAKCTiry7XtS/J/wDPbRdR8vaDqdpe+YLW2eSwu57SZZrXmVUyRi4jiYoTxV+HTY9eOKvknzxo&#xA;v5haZBF5S1OxvW0jy1e3VtZStBOInmuHqzozcl/epErIqnjxFQKlmZVlGm/85BebNK8weUNVvbi7&#xA;vE8tWEun32kPO0SzzKZkDSg86kxvDyZ0rVPEVxVFa/8AnB5zsfO0P5lWOqmODVY2ex8vG+N4kTrE&#xA;sUlvdQK0fpRqZDLHyQchx478mVVqB/N350+XtR13zZ5tstNl8ozQi3u79Utbcx6hzJQfV1FJFa2X&#xA;j+7LPWlfhGKoaBfM0nmu3/Kjz15tgfykl7b6jeX0l6qw+nNAsyS297cRs3xwz8lRxxLHsfixVlXn&#xA;nyv/AM4yeQ31CFL678y3WqaelvZWFlLBcfU5DRvrhuhRFdyikLvQE/CUbZVOv+cMtY8kfpbVdLtt&#xA;Mmt/NL2vrNqU86zLLbJIoeKJRHF6VGZGK/EW6k/CBir6uxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KqV3d2tnazXd3Mlva26NLPPKwRERByZmZqAAAVJOKvOPyx/Pzyf+YfmLV9E0lJYJ&#xA;dO/eWkk9F+uW4PB5Y0+0vFqfC29CD4gKvTMVdirTMqqWYhVUVZjsAB3OKvkz/nLL869G1axi8i+W&#xA;7uK/g9RLnWb+BlkiqnxRW8bqSrUPxuR0IUVryAVfO/lSx8zXetQ/4bE66pAfWS4t3MJgCkAyvNVF&#xA;iRSRV2YAdzir6/8ANXkLzh+bnkjy3Bpvn2zkXT4WtfM72DmW1ub0JGXJNuypIU/lYAb8hSuKoO5/&#xA;5xn/ACB8kWtvqfm7Vrl7cusfLUbtIIZZaciqLAkT78SePImnfFWS+RfyT/Lq607zff2d/b67oHni&#xA;VpbT6vFCEsIwJ0CWr1lCvF9ZZVIVeNAKbYq8o/M//nErU9D8upP5L1F9Qt42e41q31G5htVpEtIZ&#xA;VL+jABEry8jI4IDbd8VYPof/ADj/AKr5s0rTpNK816BN5gaF1udDk1GGa5X0Xk9NYza/WVasKrSp&#xA;FPGgxVLvLn/OO35gaxqJ0y5l03QtTLmOLTtWu1gupKAkvHbxiWZkopIbjQjcVGKvcvyd/J7Sfyg1&#xA;m483+bfOGmLxhfS3gjcJDHcTOsnFppWQluEJ+D0we/QYq9m8h/mp5F89xTv5a1NLuW1Yie1dWinV&#xA;QaBzFIFfg3ZqU7ddsVZZirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVcSAKnYDqcVfGn/OTf&#xA;/OQH+JLmbyX5WuK+X7Z6anfxNteSoT+7RlNGgQ9/2236AEqvGvy8896v5F822XmXSkjlubTmrQTA&#xA;mOSOVSjo3Eqd1bY9jQ4q+n9S/wCc0dGj1G1stJ8s3Gq+vDAZHS5EZ+szIrNBFGIZGk4M3CvwkkdM&#xA;VZB5W/5yegudP1O/84eVr7yvZ6dF6i3chaWOeQkcLeP1I7djNIDVVFRQEkgYq9KuZrHz9+W102kS&#xA;0tPM2lTR2ksoKlReQMg9QLUgqX+KmKvkjyV/ziP+YWoauw82Knl/QrVi11derDPNKiV5CBI2cCtP&#xA;tSUA60bpiryDX9ahvbqaHTIDp+hq/wDoenKxairUI8zV/ezEH4nPfZeK0UKsz/Jb85Nc/L3zFFKL&#xA;lm8uyhv0nphBMcoC15RouwnPEKrn5MeOKp1+dv53av8AmC2jxXlp+j/K80aXsWmr6csySxzT2zyp&#xA;clEZiyqw47L7VHLFU187ah5P8p+S7z8o4NVvUvtKmg8xWvmIRlIby9mthNHa+hE0jwoYZYuDl2/e&#xA;Cp4gVxVhjfmf581b8tde0jVvMtxf2r3NiPqd3K81wyfvWYrI5LekrRJzUnqV96qt/kFpYn/MW31m&#xA;dW/R3le3udev5Fr8MdhEZEqR2MvAH2xVJPK2papd+ab/AM0XE0kuoWEF3q8l7U81uwpFvNUd1u5Y&#xA;j4YqgPKQS/1q20S/v0stJ1e5gi1G6nZRFCC/EXTc2QcoA7MDyBI5LWjGqrMfL3nWD8qfzEuZPJeo&#xA;W+sWnGKzl1y4if05rZzFLP6cKEmNS6U/abbY9aqvqSf/AJyu/KRL3Sba3ubq7TVWZTPDDtbUlMS/&#xA;WEZlkXmRyAVSeO9Nxir2ASxGQxB1MgHIpUcgD3piq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;+ZP+cpfz8+oRXPkHyvcf6fKOGvahE39yhG9rGw/bYf3hr8I+HqTxVfI2KuxV2KuxV79+SH/ORl15&#xA;dvLez8137w+VNG0prSx0yzgDvNcG4jKu1TXmEZyWLAcVoBU7qvsXy95g0fzFolnrejXC3emX8Ylt&#xA;rhQRyWtDVWAZSCCCCKg7Yq+G/wAy/wAo76DXdRGmeaPLuvXCTSPLZWU1jYXokLlWi+qKY1Lim8aM&#xA;TWopXqq8nvrG9sLyayvreS1vLdzHcW0yNHJG6mjK6MAykdwcVX3eo3V3b2UEzAx6fCbe2AAFI2mk&#xA;nIPj+8nbFX1X+dn5Lw+bfy00b8wNAgKa/aaRZzahbKKm6tFtkNaAbywr08VFOy4q+fvL/lxI/wAv&#xA;PMvmjUFQWkwh0nSasoka+NzBcu0atuypBEytT+fFXvn5O6jL54/5x08x+SvK9olv5q021+qXEkhV&#xA;Fuo7uWSRP3tFoXjWSIB9gab0Oyr5u0bUb7yn5jlS8g5qomsNXsCw4zW8ymKeLmhI3U1RgdmAYdBi&#xA;qS3UcMdzNHBJ60KOyxTU481BorUPSo3piqxo5FVXZSFepRiCAaGhoe+KujkkikWSNikiEMjqSGDD&#xA;cEEdCMVT/wAr+fPNPlfUJ9U0TUJbXVJoPqn1sHmwhLK7KOfIdY16/rpir7p/Ib81L78xPKH17UNO&#xA;ms7+wMdtd3LLSC6l9MFpYSAoFTuU/ZqN8VelYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXjX/OSH52r+&#xA;X+gLpWjyqfNmrRn6r0JtYDVWuWX+aoKxg7FqnfiQVXwnNNNPNJNNI0s0rF5ZXJZmZjVmZjuST1OK&#xA;rMVdirsVdirsVer/AJUf85E+bvy+0yXRFhTVtBkLNFYzO0bwM5q5gmUEoHrUggiu4oa1VYXrPk6e&#xA;08sad5rtZ47jRdVuJ7SJOVbm3nt6M0NwtAtSrBlZCQV3PEnjirHnd3Yu7FmPVmNSfpOKrcVfWP8A&#xA;zi95m/OKwm0zRNY0e9v/ACNqEJfTtUlU8bJFQshWZv8AdLcePpsdtingyrHP+crvO/kvzu2mr5Wv&#xA;W1S98tvdpqjwpL6McMrQp6gdk9N09VQvNGpuOoKnFWFf840+ebvyz+ZNpbS6jBY+X9W5Q62t5IkV&#xA;s8aRuYmZn25q7fB86dCcVep+YP8AnCLneXc2geZVitXblZ2d5bklAXFUedHPIKlaH09z9+KvnW00&#xA;3yXBr09prGp340+3vGg9e0soy8lujFTLSW4T03NPs8Wp+GKvq38rv+cY/JdtYXl83mN/NHlnzDYe&#xA;gLaOL6vC9ZVkScOskh5xtH8PQg1+WKvnnzf+RfnfSdZ80LpekX95oPlyYhtRmgMbSQlvhdF/3aAv&#xA;xM0dQF+I8QcVebYq9S0H/nJj85NFs7KxttbWezsQqRw3NvBLyjRVRY3kKepxUL2YN74qn+hf85gf&#xA;mzY6rLdam9pq1lLypp8kCQJHXp6ckIWTb/LLbffir6S/Ib85b38ztI1K7vNGbS5dNlji9ZGZ7ab1&#xA;VY0jdlX404/Gu9AVPfFXqOKuxV2KuxV2KuxV2KuxV2KsZ/Mfz/ovkPyneeYtVYFIF42tsDR7i4YH&#xA;04U67sRuabCp7Yq/Orzf5r1nzZ5kvvMGsS+rf38hkkpXii9EjQEmiIoCqPAYqk2KuxV2KuxV2Kux&#xA;V2Kvcvyz/Mv8koPyy/wJ570G9m53sl9JqFtSRTM4CLOrepHLC6RKsfFAQwG/2iMVZXafl3/zivqn&#xA;lrVfN+m3mtS6V5Z9GTVLSNmVpPVakcXGeIMfVb4KpItP5l64qxXRtQ/Ibz95wl0DUNPi8jeVYE5a&#xA;FqcLrBeyyhgHjvrib61FxkDFl5/Y4gBtzyVe5eSPya8l2HkTzTo35a+b/W1HWhHbXmuxzwXxtxGS&#xA;fS4W5RULRu61+18Va7DFXgH5aeSJtI/PCPQtJ80aZcjT7trbUvWE8Ud5Zo3G/tjFNF6Un7tXDIXo&#xA;eqsacgq8w82raJ5o1UWd1b3tqLqX0bq0hFtbyLzNGigAURp/KoFAMVfRH/OJf5matffmB5g0bUbi&#xA;mn6xHPqsNu7lliuUlUssXI7KYpG5f6gxV8/+f9a07XPPGvaxpsK2+n39/cXFrEoK0ikkLKSp6Fhu&#xA;R44q+3/+cYNX0a//ACb0W2024eZ9M9W1vllVVeO4MjTOlFLDj+9HA91pXeoxV4Nrug+dvNf/ADkh&#xA;5k8m6hcX6abrkskd+kTEoumRATWcxG6cImWJl6VPw1qxqqlf/OQH5V23kTTvLenm6tNU1KdHjvNd&#xA;mlaC9dUfjbobMzyAQxxDh6vFunElaKCq828++SrXyrfWcFpr+n+Yba+t1uorrTZC4UFivCVSKo9V&#xA;O3Xxp0xVmHnD8hNT0/yTpnnfy1NPreiauUeG2jg53NtFIhYfWTC0i1VwY24iletDtir3n/nDny4u&#xA;m+UNXvZJNRivbm7EN1p95E0FtE0SBleBSTzLrIA7mh2ApQVZV9B4q7FXYq7FXYq7FXYq7FXYq8T/&#xA;AOcrPy/s/MfkI69c6s+mjytHcXSQ+mZYrlpgiJEwDKUdpFVUfenI1G+yr4XxV2KuxV2KuxV2KuxV&#xA;2KuxVN9D82+YdDs9UstLvDb2mtWxs9UtyqSJNCd6FZFYBlr8LrRl7EYqlGKo/Stf13R2kbSdSutO&#xA;aYATNaTSQFwtaBvTZa0r3xVZDqdwt9Ne3DNc3Fwk6zSSOxdnuI3RnZ68mNZORr174qg8VRujazqm&#xA;i6nb6ppdy9pf2rFoJ0pVSQVIoaghlJBB2I2OKqFpaXV5dQ2lrE011cyLFbwoCzPI7cVVQOpZjQYq&#xA;+1/+cUvym8y+SdC1PVvMKNZ3mvfVzFpbE+pDFAJCrTL0WR/V+z1UdaEkBV7hd3NjZQS315LFbQQp&#xA;ynupmWNERd6u7UAUe5xV8W/85b+Y/IXmTzTpOp+XNcTVdQgtPqV9DbD1LZIo5HlidZx8DMzTOCFJ&#xA;6Dp3VeCYqm2g+a/MegapY6ppGoS2l9prM1jKp5CIvXmFR+SUfkeSkUPfFX3D+Qv566T588vWdlq9&#xA;/bw+dI+cV1YnjC1x6dWWeBK/EGj3cL0YNsFpir13FXYq7FXYq7FXYq7FXYq7FWLfmj5RXzf+X2u+&#xA;XaFpb61b6qAwStzERNb1Y7cfWjXl7Yq+CNe/Jv8AMzy/5cl8x61oU+n6TDKkMss7Rq6s54qTFy9Q&#xA;KWoOXGm4xVheKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ko+C20iWwLPeyQaiJKCF4eVuYj+16yMzhh&#xA;/L6X04qzTV9ft/KmveUjpd7B5ostBsYriBLqKRbMz3M0t26rESkg4NMoLEhuS77fCFX0T+Vn/OXu&#xA;i+YtTttG822MeiXlyeEOpRSE2RkP2VkEnxQ16VLMK9SMVTD/AJyp/L78wPPGjeX08oQtqFlaSXEu&#xA;o2Uc8cQcyLF9Xl4yMiScAsgFDUctupxV5p+Vf/OIOsavYXt756eXRVliaLTLOEo1yswZSJ5R8Sen&#xA;QFeH2mrX4aAlV5/+cH/OP/mv8t2W7kf9LeX34qNYhj9NUkYkCOWPlI0Z22NeJr1rtirzSKWJYJY3&#xA;gWR5OPCYlw8fGteNDxIbvyU+1MVeofkD5P8ALvmHzjpzP5uby75gsrqK4060a19T6y0b8+EM5lVO&#xA;Xw0Kuu9dg2+Kvv7FXYq7FXYq7FXYq7FXYq7FXYq8L/5zI1K+s/yiit7ZisOo6rbW16KV5RLHNcAe&#xA;372BDir4fxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV6j+SX5Fal+aMmpvFqaaTZaWYVmuHhadnafm&#xA;Qsaho1PER/FVx1Hjirf57/ll5j8m69FDLpskflq0hgsNJ1WgZLjhGXd3ZSeMkknqPwbcDYVUA4qm&#xA;S/8AOPlrF5C0XzJrnmyw8s6jqsTTLpOr1jYxmRvSkQxl5Dzi4tx9M07nsFX0Ha/ll+Ydn+QWkeVv&#xA;J3mmH9NxyJdx6vBNLFDJaySNOIoJ0Dvw+NeJpRgKbA4qk9n/AM5VeTfK2gWmj67fXPmjzPp6/VtT&#xA;vdOgVLeWZDR2SSZoOar9nmF+OnKlDirH0/5zV0O91GWy1fyi7eXJ6xyETxzzGM7HnBJGkT17rz+k&#xA;4q9X1zR/+cf/ADLouiwa3BosNtqdtBdaJbTPFp9y0FyoeL0QjQTqGqPhXvtirIvLX5T/AJbeWZo7&#xA;jQ/LljZ3UX91d+kJJ1/1Zpecg/4LFWO65/zkD5L0L8zl8g6rFc2125gjXUiqG1EtyoeNHPLmq0dR&#xA;y40r1oN8VenYq7FXYq7FXYq7FXYq7FXYq8L/AOcyJrWP8o4kmUmSbVbZLUjtII5nJP8AzzV8VfD+&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxVPvJXkfzL5116LQ/L1obu+kBd9wscUSkBpZXOyovIb/QKkgY&#xA;q/Qn8q/y+tvIHkmx8tQXT3pty8k9y4485pW5ycF/ZSp+EffvirKbi2t7mP07iJJo6huEihlqpqDQ&#xA;16HFXyrq3/OLHnLzN+curX/mG7P+Eb26mvDq0c0bXLxSMWito42DMroCEJZOAA2rsMVZf58/J7z+&#xA;fzZ8h6r5Qcr5S0CKwtXiN1xFpDZS/vAYndWkWWDivw1LbhqDfFXy9+cnlXT/ACr+Zuv6Dp0kktla&#xA;XAMDSghwJo1m4GvXgZOPL9qlcVYXirZJPU1psMVfox+S/wCY+jee/I1jqFjI31yzjjtNUtpTyliu&#xA;I0APJv2g9OSt3HvUBV8m/wDOW89nJ+dF8tunCaC0tEu2/mlMQcN/yKdB9GKpt+S//OUWqeUotQtP&#xA;OU2p+Y7a5kgaykknE0tuF5if4pzzYMClF5UFO1cVfZej6xpes6Zb6npdzHeWF0gkguImDKysKjcf&#xA;iMVRmKuxV2KuxV2KuxV2KvNf+cjNJ0XUfyc8xnVVXhZQfW7OQ7FLqMgQlTQ0LM3D3DEd8Vfnrirs&#xA;VdirsVdirsVdirsVdirsVdirsVfYH/OFXk42nlvWfNszH1NUnFjbRFQKQ2o5NIH6nnJJxp/kd+yr&#xA;6UxV2KuxV2KvnL/nNDQvKn+DtP124gVPMgu0s7G5TZ3hZWkkSSn2kXjVa/ZJ2+0cVfHGKuxVN9C8&#xA;3+bPL4mGg61f6StwVNwtjczWwkKV48xEy8uPI0riqB1HUtQ1O+nv9RuZby+uWMlxczu0kjserMzE&#xA;knFUNir3v8gv+cjNE/Lfytd6Bq2lXV6s95NfRXNs8fwl4Io0i9OTjsWhJLctq9Dir2XSv+cwfywn&#xA;8tpqmppd2OpGVoX0aNBcTUUA+osn7uMxkN1Yqa12xVmX5cfnr5A8/wDrppM8tncwSRw/VdRVIJJH&#xA;lDsgio8iyEiJjxVuW3TFWc6fqenalbC6066hvbViVWe3kWWMlTRgGQkbHriqJxV2KuxV8SeQ/wA0&#xA;fzEn/PnWr3yX62vWevanOHsbr1TCbA3DejI9d4PRhI4sfsDahG2Kor/nK78473XfMlx5H0m4aPQN&#xA;Hk9PUgm31m9jPxh+5SBhxC/zgtv8NFXz5irsVdirsVdirsVdirsVdirsVdirsVfob/zjtY2dl+TH&#xA;leG1kWRXtjPKykGktxI80itTurSccVej4q7FXYq7FXkn/OQn5J3X5maPZSafqH1TV9GE7WVvKK28&#xA;5nCckcjdG/dDi+/uO4VfCes6Nqmi6pdaVqts9nqNnIYrm2lFGR17eB8QRsRuMVQWKuxV2KuxV2Ku&#xA;xVH3l56RtreyuWa3tQk0TqChW4kRGmYdDUOvHl4KMVZB+Vv5j6v5A84WWu2Ls1ujhNRswSFuLZjS&#xA;RCOnKm6HswBxV+jVjq+lahJdR2F5BdyWMpt7xIZFkMMwAYxyBSeLAMNjiqLxV2KvGfyR/LbzH5Z/&#xA;MD8x9b1O0Wz03WdTc6MgZD6kAuJ5RIFUngvGVAAffwxV81/85L/lzfeUPzIvr5ijaX5jnn1HT3Uj&#xA;kDI4eeNk/Z4SSbditPcBV5LirsVdirsVdirsVdirsVdirsVdirsVZ3+S3nfzL5V8/aUdFvTaR6nd&#xA;2tlqMTKrxS28k6BldXBHQmjCjDsRir9GcVdirsVdirsVfJX/ADm15UtINS8veaLeMJPepNY3zCg5&#xA;GDi8DEd24u4J8ABir5gxV2KuxV2KuxV2KuxVmP5e+Q9d1/8ASWu21qJNF8r276lq08m0ZW3jadYB&#xA;3Z5vS47DbqdsVexf84t/mh5U8nWeqf4q1f0Z/Ml/Elqp5SlXiU+pNPx5emsjXCgM3XiewxV6/wCZ&#xA;f+cnPJWj/mNZ+SoYXvXe8jsdT1QSJFbWksjiMglvt+kx/edAu+5IIxV6lo3mHQNcge40XU7TVIIn&#xA;9OWaynjuEVxvxZomYA+2Kphir43/AOc0vNRvfOWk+W/qqIujWzXIvOdXc3vHknEbKqiBeu/0dVXz&#xA;nirsVdirsVdirsVdirsVdirsVdirsVbxVHT69rlxc/W7jUbqa6JBM8k0jSVXoeRNdqYq9O/KX/nI&#xA;3zt5M1mBNWv7nW/LcjBLywupWmeNCf7y2eQsyMnXhXi3Q70YKvrzQPz0/KbX9St9M0rzJbzX10vK&#xA;CB1lhLbV48pUReVP2a19sVZyZYlVWLqFYgKxIoS2wA+fbFUD5g8waN5e0a71rWrpLLS7FPUurmSp&#xA;CrUKNlBZizEBVUEk7DfFXwx/zkp+aulfmB5ytZdBu7i40DTrRYbdZlMUZuHZnmljjajDkvBSWFfh&#xA;8KYq8ixV2KuxV2KuxV2Kro45JJFjjUvI5CoiipJJoAAO5xV9p/k7+U+veU/yN81WPmFvQuvMNndz&#xA;tYUq1tHJZtEBJ0/eEbsvbYdcVfFYNNx1xV1T1xV6F5E8++fPy9vtERNSudM8u6jc22rzW8JSSO4t&#xA;hKYJH4g/FUROjLUVK0O6iir7s/MnypP5t8ia15ct7j6rcajbNFBPUgLICHQPTfgWUBvauKvg67V/&#xA;MiXmi+YZ5E876DFLb2V1LKJY7qGxDl7KVvi/fIqN6DqaP9g/snFWA4q7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FV4mmCqoduKHkgqaA+I8MVfpc2g6R5s8g2+ka8iapp2p2Nv8AW/iJWX4EkEiu&#xA;tDXmA6sO9Dir87PO/knzB5L8x3Xl/Xrf0L22NVYbxyxN9iWJv2kcdPuNCCMVSHFXYq7FXYq7FWVH&#xA;8tvNFt5Vh826tZy6d5euJo4LS5kQmW4eSpHoQ1UsOKlubFUPZiaDFXof5Q/mF+UHljXrG5PkfU77&#xA;XYeMcF2LlL6X1u8kVp6duivX7I3K9jXcqvuGJ4ryzRzGwiuYwxilVkcK614ujUZTQ7g7jFX5nXXl&#xA;DWP8Z3PlPT7aW81WK+l0+G2Rf3jyRSNH07fZqew+WKvonyb/AM4daxb+X9an8wXVi3mK6tWg0OAN&#xA;JLbW0ki0eW4PBayAEqnEMEPxfEaUVev/AJafkX5a8ueWNAtvMNjZa15h0e3lgGoPH6kaCe5e6McS&#xA;yihWOSU8XZeXU/DyIxV6fir4Q/OPyJpf5YfnRp9y1rPc+Vp7m21aGEtV3iSYNc26yGnxKysBU1Cl&#xA;anvirC/zR8mWHlfzFGukXRvvLur20ep6DdkEM1ncE8FkqB+8jZSjfLt0CrDsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdir66/5xN/OPRBoNr5C1vUZf019alGjLOv7kWxRGSBZa/a5iTireIUdh&#xA;iqQ/85uQ6Adb8vTLef8AOwLbMk1gIzvZmRjHMZOg/eh1C99ztTdV8x4q7FXYq7FXq3/OOM50Xz5/&#xA;jS+jKeW/LVrcz6zekfDGJoJIYI0JoGmlmdVRK1O/hirfnf8A5yX/ADU8x6zJd2Wrz6HpySMbLT7B&#xA;/SCJtQSSLR5WoN+RpWtABtir67/IfXdU8y/lno/mTW4Il1vUElF5dpEkT3AhmeFJXCgbukak9u4o&#xA;KDFWb6vqdppOk3uqXjcLSwglurh/COFDI5/4FcVeL/kX+dvkbz7rdz9b0ex0Tz7clwrRRAy3lsi8&#xA;trngGZkVfiRm6Co2rxVe54q7FXYqwb83/wAqNL/Mvy3Do97cmwmtrhLm2vkiWV0IBV0oxX4XVt6M&#xA;NwDvTFVNPyQ/LyXyLpfkzVNOGqaZpMbJaT3BIuVaRi8jrNHwdC7mpCkDtSmKvFvPH/OFELepc+St&#xA;aKN1XTtUFVr1otzEtR7Boz7tir5886flb5/8lylPMei3FnDWiXgHq2zEnbjPHyjqf5eVfbFWKYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FW1ZlYMpIYGoI2IIxVNfMfmvzJ5lu4bzX9Rn1O7t4Vtori&#xA;5cySCFGZ1Tkdz8Tsd/HFUpxV2KuxV2Ksy81eYo4vKmg+UtJuR+jIIF1HWI4wR6uqXPIs0p/bMMBj&#xA;iUfs0bvXFWG4q9lT/nIPzKPy78t+XtF1C40HXPLcgiSaAoLW9tgOMQm5fZePYcXBjYVZiNhiqY61&#xA;/wA5C/mFJ5km07z3cQy6LHa3dnqfl/R3tzDci6t2hMT3MTzqDVxVubcKbLXbFU+/5xP0Hyle/mZe&#xA;6xpNjqpt9Ns2Njc3gieGGWYCORJZYlQGQo7CMAbryNBir7AxV2KuxV2KuxV2KrZYopY2ilRZI3BV&#xA;0YAqQeoIPXFXlXnH/nGH8ovMpkmXSzot6+5udKYW4r/xgIeD50jr74q8X8z/APOE3ma3LyeWtetd&#xA;Qj3Igvke1lA7KGT10Y+54jFXlfmD8gfzh0LkbzyveTRjf1bJVvVoP2j9WMpUf6wGKsDuba5tpmgu&#xA;YngmQ0eKRSjA+6mhGKqWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqluITPGJ2KQllErqKsFr&#xA;8RA8aYq9u/5xj/Kryp+Yuua5P5nhmuINLFvNHbxSNFE7XDS8llK/vKfu9uLg4qqf85Lfkbd+Utfm&#xA;8xeXNMKeTrpYy62wZkspqBHWQEsUSRviVvs1bjtsMVeX+WPK6zWf+JdcWS38pWdytvdXUYUyTzlT&#xA;ItrbI5UPIyirfsou5P2QVUf+V/5V+YPzI8xSaRoZSCK3j9e7vbnl6UMdeI5cFNWc/ZUfqBOKvvP8&#xA;r/y70r8vvJ1p5c09jMYyZr27I4tcXMgHqSlamg+EKorsoAqeuKssxV2KuxV2KuxV2KuxV2KuxV2K&#xA;oLVdE0XV4Pq+q2FtqFv/AL5uoY5k/wCBkDDFWC6z/wA46/kvq7M9x5XtoHNSGsmlswCfBLd40/4W&#xA;mKsJ1X/nDD8r7pmexv8AVNPY/ZRZoZYht4SRF/8Ah8VYzdf84N2LOTa+cZYkrsJbBZTTwqtxF+rF&#xA;UDN/zg3fhyIfOETx9mewZD9wuH/Xiqz/AKEc1X/qboP+kJ/+q2KsP81f84hfmvpV0F0aK38wWpXl&#xA;61vNFbOtOzx3Lx7/AOqzYq858x/lZ+Yvlsj9NeXr60RgSJfSaSL4ev7yPmm3zxVX8mflH+YPm/U4&#xA;bHSdGueEhUy3s8bQ20UbH+8eVwq0pvQVY9gcVfRdp/zhB5dFmFvPM1496Y6GSGCJIhL48GLsVHhy&#xA;B98VfNHnP8ufOfk67lh17SbmzgS4e2hvZInW3naPesMpHBwV3FDirGsVdirsVdirsVdir7N/5wz8&#xA;qa/pHlHWNV1OyFpZ61NbyabJIpSeaKJHrIa/7qPMen4/EehGKvoK6tbW7tpbW6hS4tZ0aOeCVQ8b&#xA;o4oyurAhlINCDirwT/nI78lNS1byRo9h+X2kwRW2k3U1xcaNZrHbiT10AMyr8Cu6cKfzGu1cVR//&#xA;ADiz+UfmXyFoWsXvmNBa6jrkkFNOBV2hitPVCM7ozLykM5PEdAB3JAVe44q7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxj8y/I1l548k6n5buSiNeRH6pcOvP0bhPiilA6/C3Wm&#xA;9Kjvir4juf8AnGn844Yb+ZNCedLG7NnSNgHn4kj14Efgzw7D46b1G32qKsd1/wDKL8y/L+ly6rrP&#xA;l28stOg4ia6kQcE5sFXkQTSrEDFWIYq7FXoH5Rfkz5m/MzVLi3010stOslDXupzqzRozfYjULu7t&#xA;1p2G57VVfXnlf/nF/wDJ/RLG1judGXWNQgUevf3ryv6z92MHP0VHgvHp1qd8VeqwQQW8EdvbxrDB&#xA;CqxwwxqFREUUVVUUAAAoAMVX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXi3/ADkp+b3nD8t7by7P5et7eSPUJrgXsl1G0ij0BGY4hxZKep6jGvX4dsVfIf5p&#xA;ebvL3m3zZJruh6Kugw3UUZu7FGVkNyK+pIvBUUc9v2RU79TirIPIP/OOf5n+cY0u7fTf0bpjCKRL&#xA;3UC1usscpBDQgqzyDgeVQtPfFX2l+Vn5U+W/y30ObStEeef61L693d3TK0sj04r9gIoVVFAAMVZn&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfKH/Oa3&#xA;nPTJ5dG8nwc3v7NjqN43SNFkQxxJuPiYirbdB89lXjn5bflP+aPmCWHW/LnlsajaQMTFcX4ijtGc&#xA;1UOouHjSf0234jkKj4gRsVX3t5H0/wAyaf5S0uy8zXy6lr0MAGoXiKFV5CSaCgWvEELyoK0r3xVP&#xA;MVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfH83&#xA;+E/+ho9Z/wCVsc/Q+sP+hPr/AKP6N9Dg31b6z6nw+l6fHhTbn9v9rFX13Z/VPqkH1P0/qfpr9W9H&#xA;j6fp8Rw4cfh48elNqYqq4q7FXYq7FXYq7FXYq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 16.1.0.843</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">pattern</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>792.000000</stDim:w>
            <stDim:h>612.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:F7ABB6CBAC62E5119FE2AEAA7FB7F5E1</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F7ABB6CBAC62E5119FE2AEAA7FB7F5E1</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:7e160943-2b80-4b02-b780-0921dbd5f300</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4a131c3f-a03e-458c-9279-3b19d7300c9e</stRef:instanceID>
            <stRef:documentID>uuid:7e160943-2b80-4b02-b780-0921dbd5f300</stRef:documentID>
            <stRef:originalDocumentID>uuid:7e160943-2b80-4b02-b780-0921dbd5f300</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F7ABB6CBAC62E5119FE2AEAA7FB7F5E1</stEvt:instanceID>
                  <stEvt:when>2015-09-24T07:11:23-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -543 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 543 li
680.256 543 li
680.256 0 li
cp
clp
[1 0 0 1 0 0 ]ct
20.2119 363.369 mo
21.856 363.956 24.6157 367.128 27.6401 370.387 cv
30.6641 373.646 33.9526 376.993 35.832 379.254 cv
37.7104 381.515 38.1807 382.689 38.4448 384.01 cv
38.709 385.331 38.7676 386.799 38.5327 388.15 cv
38.2979 389.5 37.7695 390.733 37.5933 391.702 cv
37.417 392.672 37.5933 393.376 38.3271 394.315 cv
39.0615 395.256 40.3535 396.43 41.4692 397.78 cv
42.585 399.131 43.5244 400.658 44.2583 402.097 cv
44.9922 403.535 45.5205 404.886 45.7266 406.031 cv
45.9316 407.176 45.8145 408.115 45.4619 408.908 cv
45.1099 409.701 44.5225 410.347 43.5537 410.875 cv
42.585 411.403 41.2344 411.815 40.1772 412.05 cv
39.1201 412.285 38.3564 412.344 37.7988 411.962 cv
37.2407 411.58 36.8887 410.758 36.8301 409.789 cv
36.771 408.82 37.0059 407.704 36.8008 406.971 cv
36.5952 406.236 35.9487 405.884 35.0098 404.915 cv
34.0703 403.946 32.8369 402.36 31.8677 400.775 cv
30.8989 399.189 30.1943 397.604 29.7246 395.96 cv
29.2549 394.315 29.02 392.613 28.6094 391.468 cv
28.1978 390.322 27.6104 389.735 26.73 389.09 cv
25.8486 388.443 24.6748 387.739 23.9995 387.122 cv
23.3237 386.506 23.1475 385.978 23.4121 385.097 cv
23.6763 384.216 24.3809 382.982 24.8799 381.866 cv
25.3789 380.751 25.6729 379.753 25.3496 378.637 cv
25.0269 377.521 24.0874 376.288 22.9717 374.938 cv
21.856 373.587 20.564 372.119 19.6245 370.738 cv
18.6851 369.358 18.0977 368.067 18.0684 366.423 cv
18.0386 364.778 18.5674 362.782 20.2119 363.369 cv
cp
9.68604 322.896 mo
9.64209 321.207 9.52441 319.856 9.71533 318.813 cv
9.90625 317.771 10.4058 317.038 10.8755 316.642 cv
11.3452 316.245 11.7856 316.187 12.3726 316.172 cv
12.96 316.157 13.6938 316.187 14.8389 315.335 cv
15.9839 314.483 17.54 312.751 18.3184 311.444 cv
19.0962 310.139 19.0962 309.257 18.8032 308.758 cv
18.5088 308.259 17.9219 308.142 17.2173 307.833 cv
16.5127 307.525 15.6904 307.025 14.9565 306.614 cv
14.2222 306.204 13.5762 305.881 12.7837 305.029 cv
11.9907 304.178 11.0513 302.798 10.3467 301.814 cv
9.64209 300.831 9.17236 300.243 8.68799 300.009 cv
8.20361 299.773 7.7041 299.892 6.97021 300.199 cv
6.23633 300.508 5.26709 301.007 4.70996 301.623 cv
4.15137 302.24 4.00488 302.974 4.06348 304.735 cv
4.12207 306.497 4.38672 309.287 4.38672 310.931 cv
4.38672 312.575 4.12207 313.074 3.5791 313.529 cv
3.03564 313.984 2.21387 314.396 1.81738 314.807 cv
1.4209 315.218 1.45068 315.629 1.61182 316.187 cv
1.77344 316.744 2.06738 317.449 2.50781 318.241 cv
2.94775 319.034 3.53516 319.915 3.88721 321.017 cv
4.23975 322.117 4.35693 323.438 4.31689 325.024 cv
4.27637 326.609 4.07861 328.459 4.03809 330.302 cv
3.99756 332.145 4.11523 333.979 5.04004 334.259 cv
5.96484 334.537 7.69727 333.26 8.604 332.063 cv
9.51025 330.867 9.59082 329.751 9.64551 328.181 cv
9.70068 326.609 9.72998 324.584 9.68604 322.896 cv
9.68604 322.896 li
cp
613.456 435.789 mo
612.59 435.877 611.327 436.229 610.432 436.758 cv
609.536 437.287 609.008 437.991 608.361 438.975 cv
607.716 439.959 606.952 441.221 606.248 442.41 cv
605.543 443.6 604.897 444.715 604.53 445.757 cv
604.163 446.8 604.075 447.769 604.178 449.148 cv
604.28 450.528 604.574 452.319 604.472 453.479 cv
604.369 454.639 603.869 455.168 603.238 455.593 cv
602.607 456.019 601.844 456.342 601.388 457.018 cv
600.934 457.692 600.786 458.72 600.463 459.439 cv
600.141 460.159 599.642 460.57 598.379 460.981 cv
597.116 461.393 595.091 461.803 593.77 461.847 cv
592.448 461.891 591.831 461.568 590.848 460.805 cv
589.864 460.041 588.514 458.838 587.794 457.766 cv
587.075 456.694 586.987 455.755 586.973 454.536 cv
586.958 453.318 587.017 451.82 587.266 450.353 cv
587.516 448.885 587.956 447.445 588.426 446.242 cv
588.896 445.038 589.395 444.069 590.011 443.13 cv
590.628 442.189 591.361 441.28 592.478 440.487 cv
593.593 439.694 595.091 439.019 596.734 438.152 cv
598.379 437.286 600.17 436.229 601.535 435.422 cv
602.9 434.614 603.84 434.057 604.251 433.264 cv
604.662 432.472 604.545 431.444 603.929 431.106 cv
603.312 430.769 602.195 431.121 601.139 431.591 cv
600.082 432.061 599.084 432.647 598.232 433.132 cv
597.381 433.617 596.676 433.998 596.162 433.998 cv
595.648 433.998 595.325 433.617 595.164 432.897 cv
595.003 432.178 595.003 431.121 595.517 429.902 cv
596.03 428.684 597.058 427.305 598.232 425.909 cv
599.406 424.515 600.728 423.105 602.063 422.166 cv
603.399 421.227 604.75 420.757 606.292 420.39 cv
607.833 420.022 609.565 419.758 610.799 419.405 cv
612.031 419.053 612.766 418.613 613.529 417.952 cv
614.293 417.292 615.085 416.411 615.907 416.381 cv
616.729 416.353 617.581 417.174 618.286 417.718 cv
618.99 418.261 619.548 418.525 620.12 418.363 cv
620.693 418.202 621.28 417.614 621.896 417.277 cv
622.514 416.939 623.159 416.852 624.172 416.852 cv
625.186 416.852 626.565 416.939 627.446 417.248 cv
628.327 417.556 628.709 418.085 628.855 418.613 cv
629.002 419.142 628.914 419.67 628.298 420.213 cv
627.681 420.756 626.536 421.313 625.597 421.887 cv
624.656 422.459 623.923 423.046 623.453 423.678 cv
622.983 424.309 622.778 424.984 622.484 425.85 cv
622.19 426.717 621.809 427.773 621.148 428.859 cv
620.487 429.946 619.548 431.062 618.755 432.045 cv
617.963 433.029 617.316 433.881 616.759 434.526 cv
616.201 435.173 615.731 435.612 615.261 435.745 cv
614.792 435.877 614.322 435.701 613.456 435.789 cv
613.456 435.789 li
cp
586.943 409.342 mo
586.459 409.761 586.635 410.421 586.906 411.214 cv
587.178 412.007 587.545 412.932 588.161 413.98 cv
588.778 415.031 589.644 416.205 590.415 416.91 cv
591.186 417.614 591.86 417.85 592.991 418.055 cv
594.121 418.261 595.707 418.437 597.557 418.378 cv
599.406 418.319 601.521 418.025 603.15 417.732 cv
604.78 417.438 605.925 417.145 607.069 416.528 cv
608.215 415.911 609.36 414.973 609.947 414.003 cv
610.534 413.034 610.563 412.036 610.446 411.199 cv
610.329 410.362 610.064 409.688 609.551 409.335 cv
609.037 408.982 608.273 408.953 607.716 409.254 cv
607.158 409.556 606.806 410.187 606.351 410.723 cv
605.896 411.258 605.338 411.698 604.222 411.992 cv
603.105 412.285 601.433 412.433 599.936 412.697 cv
598.438 412.961 597.116 413.343 596.133 413.27 cv
595.149 413.195 594.503 412.667 594.181 412.116 cv
593.857 411.566 593.857 410.994 593.167 410.399 cv
592.478 409.805 591.098 409.188 589.835 408.968 cv
588.572 408.748 587.428 408.924 586.943 409.342 cv
586.943 409.342 li
cp
618.329 393.656 mo
617.581 394.434 617.434 396.372 617.066 398.09 cv
616.7 399.807 616.112 401.305 615.775 402.802 cv
615.438 404.299 615.35 405.797 615.481 407.103 cv
615.613 408.41 615.966 409.525 617.052 410.245 cv
618.139 410.964 619.959 411.287 621.838 411.654 cv
623.717 412.021 625.655 412.433 626.829 412.301 cv
628.004 412.168 628.415 411.493 629.031 409.893 cv
629.647 408.292 630.47 405.768 630.661 404.05 cv
630.852 402.332 630.411 401.422 629.516 400.835 cv
628.62 400.248 627.27 399.983 626.462 399.777 cv
625.655 399.572 625.391 399.426 625.067 399.103 cv
624.744 398.779 624.363 398.28 624.04 397.796 cv
623.717 397.312 623.453 396.842 623.086 396.151 cv
622.719 395.462 622.249 394.552 621.339 393.905 cv
620.429 393.26 619.078 392.878 618.329 393.656 cv
618.329 393.656 li
cp
567.521 379.24 mo
567.843 378.609 568.343 377.846 569.399 377.038 cv
570.456 376.23 572.071 375.379 573.612 374.792 cv
575.154 374.205 576.622 373.882 578.12 373.867 cv
579.617 373.853 581.144 374.146 583.845 374.513 cv
586.546 374.881 590.422 375.32 592.683 375.938 cv
594.943 376.554 595.589 377.347 595.457 377.978 cv
595.325 378.609 594.415 379.079 592.756 379.593 cv
591.098 380.106 588.689 380.664 586.341 381.236 cv
583.992 381.81 581.701 382.396 580.321 382.22 cv
578.941 382.044 578.472 381.104 577.269 380.723 cv
576.064 380.341 574.126 380.518 572.276 380.635 cv
570.427 380.752 568.665 380.811 567.857 380.591 cv
567.051 380.371 567.197 379.871 567.521 379.24 cv
567.521 379.24 li
cp
616.61 352.038 mo
616.786 355.149 616.903 359.025 617.286 361.991 cv
617.667 364.957 618.313 367.012 618.842 370.036 cv
619.37 373.06 619.781 377.054 620.516 379.52 cv
621.249 381.986 622.307 382.926 623.804 383.277 cv
625.301 383.63 627.239 383.396 628.912 382.661 cv
630.586 381.927 631.995 380.693 633.287 379.226 cv
634.579 377.758 635.753 376.055 636.928 374.998 cv
638.103 373.941 639.276 373.53 640.628 373.383 cv
641.979 373.236 643.505 373.354 644.474 373.09 cv
645.442 372.825 645.854 372.18 646.235 371.475 cv
646.617 370.77 646.97 370.007 647.674 369.155 cv
648.379 368.304 649.436 367.364 650.463 366.307 cv
651.491 365.25 652.489 364.076 653.635 363.313 cv
654.779 362.549 656.071 362.196 656.981 362.344 cv
657.892 362.49 658.42 363.136 658.303 364.34 cv
658.186 365.544 657.422 367.306 656.806 368.715 cv
656.188 370.124 655.719 371.181 656.424 371.944 cv
657.128 372.708 659.008 373.178 660.299 372.913 cv
661.591 372.649 662.296 371.65 662.707 370.241 cv
663.118 368.832 663.235 367.012 662.912 364.868 cv
662.59 362.725 661.826 360.259 661.503 358.263 cv
661.181 356.266 661.298 354.739 662.091 354.298 cv
662.883 353.857 664.352 354.504 665.584 355.003 cv
666.817 355.502 667.815 355.854 668.227 356.999 cv
668.638 358.145 668.462 360.082 668.491 361.434 cv
668.521 362.783 668.755 363.547 669.372 364.047 cv
669.988 364.545 670.986 364.78 671.515 364.223 cv
672.044 363.664 672.103 362.314 672.748 361.727 cv
673.395 361.14 674.628 361.315 675.739 361.492 cv
676.851 361.668 677.841 361.844 678.336 361.374 cv
678.831 360.904 678.831 359.789 678.63 358.351 cv
678.428 356.911 678.025 355.15 677.324 354.093 cv
676.624 353.036 675.626 352.684 675.626 351.949 cv
675.626 351.216 676.624 350.1 676.918 349.014 cv
677.211 347.927 676.8 346.87 676.066 346.077 cv
675.332 345.285 674.275 344.756 673.746 345.285 cv
673.218 345.813 673.218 347.398 672.895 348.309 cv
672.572 349.219 671.926 349.454 671.427 348.955 cv
670.928 348.456 670.575 347.223 669.93 346.313 cv
669.284 345.402 668.345 344.815 667.64 344.785 cv
666.935 344.756 666.466 345.285 666.054 346.166 cv
665.643 347.047 665.291 348.28 664.615 348.573 cv
663.94 348.866 662.941 348.221 662.766 347.164 cv
662.589 346.106 663.235 344.639 664.233 343.229 cv
665.232 341.82 666.583 340.47 666.348 339.735 cv
666.113 339.001 664.292 338.884 662.707 339.03 cv
661.121 339.178 659.771 339.589 658.772 340.205 cv
657.774 340.822 657.128 341.644 656.6 341.468 cv
656.071 341.291 655.66 340.117 655.249 338.913 cv
654.838 337.71 654.427 336.477 654.397 335.185 cv
654.368 333.893 654.721 332.542 653.928 332.014 cv
653.136 331.485 651.197 331.778 649.788 332.189 cv
648.379 332.601 647.498 333.13 646.559 333.951 cv
645.619 334.773 644.62 335.89 643.975 336.741 cv
643.329 337.593 643.035 338.179 642.565 338.972 cv
642.096 339.765 641.449 340.763 640.539 341.468 cv
639.629 342.172 638.455 342.584 637.163 342.906 cv
635.871 343.229 634.462 343.464 634.345 342.877 cv
634.227 342.29 635.401 340.881 635.694 339.56 cv
635.988 338.238 635.401 337.005 633.934 336.153 cv
632.465 335.302 630.116 334.832 628.883 335.302 cv
627.65 335.771 627.532 337.181 627.269 338.238 cv
627.004 339.295 626.593 340 625.683 340.117 cv
624.772 340.234 623.363 339.765 622.453 339.061 cv
621.543 338.355 621.132 337.416 621.602 336.3 cv
622.071 335.185 623.422 333.893 624.127 332.014 cv
624.831 330.135 624.89 327.668 624.714 324.82 cv
624.538 321.973 624.127 318.742 623.275 317.656 cv
622.424 316.569 621.132 317.627 619.958 319.799 cv
618.783 321.972 617.727 325.261 616.845 328.255 cv
615.965 331.25 615.26 333.951 615.143 336.564 cv
615.025 339.178 615.494 341.703 615.847 344.14 cv
616.199 346.576 616.435 348.926 616.61 352.038 cv
616.61 352.038 li
cp
396.947 257.305 mo
396.169 257.173 395.171 257.055 394.393 257.217 cv
393.614 257.378 393.057 257.818 392.484 258.318 cv
391.912 258.817 391.324 259.375 391.222 260.094 cv
391.119 260.813 391.501 261.694 391.721 262.604 cv
391.941 263.515 392 264.454 392.044 265.247 cv
392.088 266.04 392.117 266.686 392.528 267.244 cv
392.939 267.801 393.732 268.271 394.687 268.711 cv
395.641 269.152 396.756 269.563 397.49 269.622 cv
398.225 269.681 398.576 269.387 399.002 268.653 cv
399.428 267.919 399.928 266.745 400.06 265.306 cv
400.191 263.867 399.957 262.164 399.692 260.857 cv
399.428 259.551 399.135 258.641 398.709 258.112 cv
398.283 257.584 397.726 257.437 396.947 257.305 cv
396.947 257.305 li
cp
398.753 239.424 mo
398.547 240.203 398.518 241.347 398.386 242.316 cv
398.254 243.285 398.019 244.078 398.562 244.812 cv
399.105 245.546 400.427 246.221 401.748 246.354 cv
403.069 246.485 404.39 246.074 405.373 245.326 cv
406.357 244.577 407.003 243.491 407.003 242.478 cv
407.003 241.465 406.357 240.525 405.521 240.026 cv
404.684 239.527 403.656 239.468 402.657 239.175 cv
401.659 238.881 400.69 238.353 400.016 238.294 cv
399.34 238.235 398.958 238.646 398.753 239.424 cv
398.753 239.424 li
cp
376.747 253.488 mo
375.382 254.061 373.943 254.882 372.093 255.602 cv
370.243 256.321 367.982 256.938 366.69 257.76 cv
365.398 258.582 365.076 259.609 365.091 261.019 cv
365.105 262.428 365.458 264.219 365.986 265.467 cv
366.515 266.715 367.219 267.419 368.188 268.051 cv
369.157 268.683 370.391 269.24 371.315 269.313 cv
372.24 269.387 372.856 268.976 373.679 268.168 cv
374.501 267.361 375.528 266.157 376.219 264.982 cv
376.908 263.808 377.261 262.663 378.039 262.076 cv
378.816 261.489 380.021 261.459 380.872 261.269 cv
381.724 261.078 382.223 260.726 382.663 259.962 cv
383.104 259.199 383.485 258.024 383.632 256.762 cv
383.778 255.5 383.69 254.148 383.162 253.385 cv
382.634 252.622 381.665 252.445 380.534 252.519 cv
379.404 252.593 378.112 252.916 376.747 253.488 cv
376.747 253.488 li
cp
349.771 249.679 mo
351.158 250.038 352.538 250.009 353.434 250.097 cv
354.329 250.185 354.741 250.39 354.8 250.904 cv
354.858 251.418 354.564 252.24 354.652 252.916 cv
354.741 253.591 355.21 254.12 356.193 254.369 cv
357.178 254.618 358.675 254.589 359.614 254.339 cv
360.554 254.09 360.936 253.62 361.772 252.548 cv
362.609 251.477 363.901 249.803 364.68 248.614 cv
365.457 247.425 365.722 246.72 365.824 245.839 cv
365.927 244.958 365.868 243.901 365.78 242.845 cv
365.692 241.788 365.575 240.731 365.824 240.1 cv
366.074 239.468 366.69 239.263 367.204 239.292 cv
367.718 239.321 368.13 239.585 368.569 240.202 cv
369.01 240.818 369.479 241.788 370.316 242.375 cv
371.153 242.962 372.357 243.167 373.811 243.505 cv
375.264 243.843 376.967 244.313 378.846 244.562 cv
380.726 244.812 382.78 244.841 384.014 244.694 cv
385.247 244.547 385.657 244.225 386.054 243.931 cv
386.45 243.637 386.832 243.373 386.994 242.83 cv
387.155 242.287 387.097 241.465 387.097 240.555 cv
387.097 239.645 387.155 238.646 386.994 238.044 cv
386.832 237.442 386.45 237.237 385.907 236.679 cv
385.364 236.121 384.659 235.211 384.072 234.844 cv
383.485 234.477 383.016 234.653 382.369 234.565 cv
381.724 234.477 380.901 234.125 379.551 232.979 cv
378.2 231.834 376.321 229.896 375.073 228.62 cv
373.825 227.342 373.209 226.726 372.65 226.351 cv
372.093 225.977 371.594 225.845 370.94 225.823 cv
370.288 225.801 369.48 225.889 368.87 225.882 cv
368.262 225.874 367.851 225.772 367.461 225.287 cv
367.072 224.803 366.705 223.937 366.17 223.54 cv
365.634 223.144 364.929 223.217 364.019 223.203 cv
363.108 223.188 361.993 223.085 360.716 223.048 cv
359.438 223.012 358 223.041 357.171 222.645 cv
356.341 222.248 356.121 221.426 355.666 220.45 cv
355.211 219.474 354.521 218.343 353.882 217.536 cv
353.243 216.728 352.656 216.244 352.12 215.914 cv
351.584 215.583 351.1 215.407 350.667 215.334 cv
350.234 215.26 349.853 215.29 349.713 215.671 cv
349.573 216.053 349.676 216.787 349.765 217.602 cv
349.853 218.417 349.926 219.312 349.778 220.677 cv
349.632 222.042 349.265 223.878 348.839 225.647 cv
348.414 227.416 347.929 229.12 347.701 230.235 cv
347.474 231.351 347.503 231.879 347.768 232.819 cv
348.031 233.759 348.531 235.109 348.751 236.298 cv
348.972 237.487 348.913 238.515 348.678 239.484 cv
348.442 240.453 348.031 241.363 347.474 242.479 cv
346.916 243.594 346.212 244.916 345.874 245.84 cv
345.536 246.765 345.565 247.294 346.277 247.932 cv
346.989 248.571 348.384 249.319 349.771 249.679 cv
349.771 249.679 li
cp
272.999 177.004 mo
273.145 176.535 273.409 176.109 273.887 175.756 cv
274.364 175.404 275.054 175.125 275.479 174.817 cv
275.905 174.509 276.066 174.171 276.324 173.43 cv
276.581 172.688 276.933 171.543 277.336 170.743 cv
277.74 169.943 278.195 169.488 278.907 168.739 cv
279.619 167.99 280.588 166.948 281.249 166.368 cv
281.909 165.789 282.262 165.671 283.128 165.729 cv
283.994 165.789 285.374 166.023 286.262 166.295 cv
287.15 166.566 287.547 166.875 287.833 167.19 cv
288.119 167.506 288.295 167.829 288.347 168.401 cv
288.398 168.974 288.325 169.796 288.267 170.391 cv
288.208 170.985 288.163 171.353 288.435 171.793 cv
288.707 172.233 289.293 172.747 289.639 173.099 cv
289.983 173.452 290.086 173.643 290.476 174.054 cv
290.865 174.465 291.54 175.096 292.039 175.676 cv
292.538 176.256 292.861 176.784 293.14 177.32 cv
293.419 177.856 293.654 178.399 293.713 179.177 cv
293.771 179.955 293.654 180.968 293.507 181.666 cv
293.36 182.363 293.184 182.745 292.648 182.773 cv
292.112 182.803 291.217 182.48 289.991 182.399 cv
288.765 182.318 287.209 182.48 285.954 182.561 cv
284.699 182.642 283.744 182.642 282.93 182.275 cv
282.115 181.908 281.44 181.174 280.771 180.667 cv
280.104 180.161 279.443 179.882 278.665 179.757 cv
277.887 179.632 276.991 179.662 276.066 179.72 cv
275.142 179.779 274.188 179.867 273.637 179.669 cv
273.086 179.471 272.939 178.986 272.881 178.487 cv
272.822 177.988 272.852 177.474 272.999 177.004 cv
272.999 177.004 li
cp
267.839 134.797 mo
269.335 136.552 270.158 137.58 270.965 138.49 cv
271.772 139.4 272.565 140.193 273.167 141.074 cv
273.769 141.955 274.18 142.924 274.679 143.966 cv
275.178 145.008 275.766 146.124 276.412 146.726 cv
277.057 147.328 277.762 147.416 278.746 147.401 cv
279.729 147.386 280.992 147.269 281.799 146.961 cv
282.607 146.652 282.959 146.153 283.223 145.551 cv
283.487 144.95 283.664 144.245 283.693 143.452 cv
283.722 142.659 283.605 141.778 283.781 141.309 cv
283.957 140.839 284.427 140.78 285 140.736 cv
285.572 140.692 286.247 140.663 286.658 140.413 cv
287.069 140.164 287.216 139.694 287.407 138.739 cv
287.598 137.785 287.833 136.347 287.892 134.556 cv
287.95 132.765 287.833 130.621 287.774 129.08 cv
287.715 127.538 287.715 126.599 287.539 125.924 cv
287.363 125.249 287.011 124.837 286.379 124.28 cv
285.748 123.722 284.838 123.017 284.397 122.488 cv
283.957 121.96 283.986 121.607 284.25 121.138 cv
284.515 120.668 285.014 120.081 285.513 119.479 cv
286.013 118.877 286.511 118.261 286.791 117.615 cv
287.07 116.968 287.128 116.293 287.084 115.647 cv
287.04 115.001 286.894 114.385 286.526 113.769 cv
286.159 113.152 285.572 112.535 285.001 112.101 cv
284.43 111.667 283.875 111.415 282.98 111.275 cv
282.086 111.134 280.853 111.104 279.649 111.031 cv
278.445 110.958 277.271 110.84 276.214 110.385 cv
275.157 109.93 274.217 109.137 273.439 108.609 cv
272.661 108.081 272.044 107.816 271.575 107.86 cv
271.105 107.904 270.782 108.257 270.547 108.727 cv
270.313 109.196 270.166 109.784 270.136 110.43 cv
270.107 111.075 270.195 111.78 270.342 112.514 cv
270.489 113.248 270.694 114.012 271.017 114.628 cv
271.34 115.245 271.78 115.714 272.397 116.125 cv
273.014 116.537 273.806 116.889 274.364 117.212 cv
274.922 117.535 275.245 117.828 275.406 118.239 cv
275.568 118.65 275.568 119.179 275.598 119.722 cv
275.627 120.265 275.686 120.823 275.436 121.396 cv
275.186 121.968 274.628 122.555 273.968 123.216 cv
273.308 123.876 272.544 124.611 271.957 124.669 cv
271.369 124.728 270.958 124.111 270.415 123.495 cv
269.872 122.878 269.197 122.262 268.565 121.954 cv
267.934 121.646 267.347 121.646 266.848 121.264 cv
266.349 120.882 265.938 120.118 265.629 119.546 cv
265.321 118.974 265.116 118.592 264.822 118.621 cv
264.528 118.65 264.146 119.091 263.633 119.575 cv
263.119 120.06 262.473 120.588 262.15 121.043 cv
261.827 121.498 261.827 121.88 261.813 122.82 cv
261.798 123.759 261.768 125.257 261.798 126.226 cv
261.827 127.194 261.915 127.635 263.044 129.097 cv
264.173 130.558 266.343 133.042 267.839 134.797 cv
267.839 134.797 li
cp
206.85 172.088 mo
207.612 172.705 208.449 173.204 209.059 173.593 cv
209.667 173.982 210.05 174.261 210.453 174.496 cv
210.857 174.73 211.283 174.921 211.877 175.017 cv
212.472 175.112 213.235 175.112 214.351 175.127 cv
215.467 175.142 216.935 175.171 218.219 175.2 cv
219.503 175.229 220.605 175.259 221.787 175.354 cv
222.968 175.45 224.231 175.611 225.208 175.817 cv
226.184 176.022 226.874 176.272 227.637 176.441 cv
228.4 176.61 229.237 176.698 229.655 176.617 cv
230.074 176.536 230.074 176.287 230.257 175.89 cv
230.441 175.494 230.808 174.951 231.249 174.437 cv
231.688 173.923 232.203 173.438 232.628 173.167 cv
233.054 172.896 233.392 172.837 234.28 172.814 cv
235.168 172.792 236.606 172.808 237.458 172.749 cv
238.31 172.69 238.574 172.558 238.897 172.33 cv
239.22 172.103 239.602 171.78 239.961 171.552 cv
240.321 171.325 240.658 171.192 241.011 171.119 cv
241.363 171.046 241.73 171.031 242.222 171.104 cv
242.714 171.178 243.331 171.339 243.961 171.589 cv
244.593 171.839 245.239 172.176 245.687 172.425 cv
246.134 172.675 246.384 172.837 246.633 173.204 cv
246.883 173.571 247.132 174.143 247.456 174.738 cv
247.779 175.333 248.175 175.95 248.608 176.302 cv
249.042 176.654 249.511 176.742 250.296 176.698 cv
251.082 176.654 252.183 176.478 253.093 176.42 cv
254.003 176.361 254.723 176.42 255.486 176.588 cv
256.25 176.757 257.057 177.036 257.762 177.131 cv
258.466 177.227 259.068 177.139 259.942 176.816 cv
260.815 176.493 261.96 175.936 262.738 175.51 cv
263.516 175.084 263.927 174.79 264.272 174.225 cv
264.617 173.66 264.896 172.823 264.896 172.449 cv
264.896 172.074 264.617 172.162 263.942 172.06 cv
263.267 171.957 262.195 171.663 261.167 171.495 cv
260.14 171.326 259.156 171.281 258.51 171.12 cv
257.864 170.958 257.556 170.68 257.152 170.423 cv
256.749 170.166 256.25 169.931 256.029 169.446 cv
255.809 168.962 255.868 168.228 255.927 167.611 cv
255.985 166.995 256.044 166.496 256.389 166.114 cv
256.734 165.732 257.365 165.468 258.106 165.167 cv
258.848 164.866 259.699 164.528 260.412 164.337 cv
261.123 164.147 261.696 164.103 262.43 164.205 cv
263.164 164.308 264.06 164.558 264.999 164.763 cv
265.938 164.969 266.922 165.13 267.546 165.167 cv
268.17 165.204 268.435 165.116 268.831 164.874 cv
269.227 164.631 269.756 164.235 270.101 163.993 cv
270.445 163.75 270.607 163.663 270.541 163.522 cv
270.475 163.383 270.181 163.192 269.785 162.693 cv
269.389 162.194 268.889 161.387 268.332 160.646 cv
267.774 159.904 267.158 159.229 265.8 158.128 cv
264.442 157.026 262.343 155.5 260.684 154.289 cv
259.025 153.078 257.806 152.182 257.036 151.478 cv
256.265 150.773 255.942 150.259 255.758 149.503 cv
255.575 148.747 255.531 147.749 255.516 146.56 cv
255.502 145.371 255.516 143.991 255.406 142.758 cv
255.296 141.525 255.062 140.438 254.958 138.81 cv
254.856 137.18 254.886 135.007 254.944 132.834 cv
255.003 130.662 255.091 128.489 254.988 126.713 cv
254.886 124.937 254.592 123.556 254.02 121.897 cv
253.447 120.238 252.595 118.301 251.686 117.053 cv
250.775 115.805 249.806 115.247 248.837 114.792 cv
247.868 114.337 246.899 113.985 246.077 113.75 cv
245.255 113.515 244.58 113.397 243.919 113.588 cv
243.259 113.779 242.613 114.278 242.26 114.851 cv
241.908 115.423 241.849 116.069 242.025 117.552 cv
242.201 119.034 242.613 121.354 242.891 123.145 cv
243.17 124.937 243.317 126.199 243.435 127.638 cv
243.552 129.076 243.64 130.691 243.699 131.91 cv
243.758 133.128 243.787 133.95 243.567 134.581 cv
243.347 135.212 242.877 135.653 242.422 135.976 cv
241.966 136.299 241.526 136.504 240.821 136.284 cv
240.117 136.064 239.148 135.418 238.664 134.611 cv
238.179 133.803 238.179 132.834 238.223 131.161 cv
238.267 129.487 238.355 127.109 238.355 125.23 cv
238.355 123.351 238.267 121.971 238.106 120.87 cv
237.944 119.769 237.709 118.946 237.372 118.697 cv
237.034 118.448 236.594 118.77 235.948 119.02 cv
235.302 119.27 234.45 119.446 233.745 119.828 cv
233.041 120.209 232.483 120.796 232.116 121.53 cv
231.749 122.264 231.573 123.145 230.883 123.652 cv
230.193 124.158 228.989 124.291 228.13 124.078 cv
227.271 123.865 226.757 123.307 226.596 122.5 cv
226.435 121.692 226.625 120.635 227.088 119.931 cv
227.55 119.226 228.284 118.874 228.666 118.389 cv
229.047 117.904 229.077 117.288 228.886 116.745 cv
228.695 116.202 228.284 115.732 227.624 115.218 cv
226.963 114.704 226.053 114.146 225.385 113.677 cv
224.717 113.206 224.291 112.825 223.976 112.208 cv
223.66 111.591 223.455 110.74 223.044 110.292 cv
222.632 109.845 222.016 109.8 221.458 109.999 cv
220.9 110.197 220.401 110.637 219.961 111.408 cv
219.52 112.179 219.138 113.28 218.742 113.911 cv
218.346 114.542 217.935 114.704 217.392 114.601 cv
216.848 114.498 216.173 114.131 215.71 113.412 cv
215.248 112.692 214.999 111.621 215.175 110.762 cv
215.351 109.903 215.953 109.257 216.768 108.795 cv
217.583 108.333 218.61 108.053 219.014 107.269 cv
219.417 106.483 219.197 105.191 218.316 104.758 cv
217.435 104.326 215.894 104.751 214.154 105.368 cv
212.415 105.984 210.477 106.792 208.928 107.445 cv
207.379 108.098 206.22 108.597 205.244 108.905 cv
204.268 109.214 203.475 109.331 202.594 109.771 cv
201.713 110.212 200.744 110.976 199.658 111.886 cv
198.571 112.796 197.367 113.853 196.472 114.983 cv
195.576 116.113 194.989 117.317 194.417 118.286 cv
193.844 119.255 193.287 119.989 193.081 120.65 cv
192.875 121.311 193.022 121.897 193.066 122.412 cv
193.11 122.925 193.052 123.365 192.831 123.879 cv
192.611 124.393 192.229 124.98 192.142 125.523 cv
192.053 126.066 192.259 126.566 192.67 127.124 cv
193.081 127.682 193.698 128.298 194.432 128.548 cv
195.166 128.797 196.017 128.68 197.602 128.65 cv
199.188 128.621 201.507 128.68 202.961 128.827 cv
204.414 128.974 205.001 129.208 205.266 129.664 cv
205.53 130.118 205.471 130.793 205.266 131.381 cv
205.06 131.968 204.708 132.467 204.179 132.717 cv
203.65 132.967 202.946 132.967 202.418 132.967 cv
201.889 132.967 201.537 132.967 200.729 132.893 cv
199.922 132.82 198.659 132.673 197.603 132.731 cv
196.545 132.791 195.694 133.055 194.887 133.466 cv
194.079 133.876 193.315 134.435 193.081 134.919 cv
192.846 135.404 193.139 135.814 193.741 136.417 cv
194.343 137.018 195.253 137.811 196.002 138.031 cv
196.75 138.251 197.338 137.899 197.999 137.87 cv
198.659 137.84 199.394 138.134 199.937 138.589 cv
200.479 139.044 200.832 139.661 201.551 139.984 cv
202.271 140.307 203.357 140.336 204.311 140.351 cv
205.266 140.366 206.087 140.366 207.071 140.792 cv
208.054 141.217 209.2 142.069 210.183 142.729 cv
211.167 143.39 211.989 143.859 212.973 144.08 cv
213.956 144.3 215.102 144.271 215.864 144.608 cv
216.628 144.946 217.01 145.65 217.7 146.708 cv
218.39 147.765 219.388 149.174 219.476 149.893 cv
219.564 150.613 218.742 150.642 217.538 150.906 cv
216.334 151.17 214.749 151.669 213.707 151.538 cv
212.664 151.405 212.165 150.642 211.534 149.967 cv
210.903 149.292 210.139 148.704 209.229 148.469 cv
208.319 148.234 207.262 148.352 206.411 148.308 cv
205.559 148.264 204.913 148.058 204.047 147.809 cv
203.181 147.559 202.094 147.266 201.037 147.222 cv
199.98 147.178 198.953 147.383 198.042 147.5 cv
197.132 147.618 196.34 147.647 195.723 147.897 cv
195.106 148.146 194.666 148.616 194.02 149.306 cv
193.374 149.996 192.522 150.906 192.229 151.897 cv
191.935 152.888 192.199 153.96 192.493 154.849 cv
192.786 155.736 193.109 156.441 193.593 157.014 cv
194.078 157.586 194.724 158.026 195.473 158.511 cv
196.221 158.995 197.073 159.524 197.924 159.979 cv
198.776 160.434 199.627 160.816 200.42 160.875 cv
201.213 160.933 201.947 160.669 202.387 160.875 cv
202.828 161.08 202.975 161.755 203.327 162.401 cv
203.679 163.047 204.237 163.664 204.53 164.178 cv
204.824 164.691 204.854 165.103 204.81 165.675 cv
204.765 166.247 204.648 166.981 204.619 167.73 cv
204.589 168.479 204.648 169.242 205.022 169.991 cv
205.396 170.739 206.086 171.472 206.85 172.088 cv
206.85 172.088 li
cp
170.311 106.749 mo
169.797 107.115 169.239 107.556 169.107 108.246 cv
168.975 108.936 169.269 109.875 169.4 110.947 cv
169.533 112.019 169.503 113.223 169.488 114.147 cv
169.474 115.072 169.474 115.718 169.841 116.599 cv
170.208 117.479 170.942 118.596 171.618 119.447 cv
172.293 120.299 172.909 120.885 173.996 121.076 cv
175.082 121.267 176.638 121.062 178.106 120.577 cv
179.574 120.093 180.954 119.33 182.29 118.449 cv
183.626 117.568 184.918 116.569 186.779 115.156 cv
188.64 113.743 191.07 111.914 194.149 109.873 cv
197.229 107.832 200.958 105.579 204.646 103.278 cv
208.334 100.978 211.982 98.6289 213.645 96.8384 cv
215.306 95.0483 214.983 93.8149 214.146 92.7432 cv
213.31 91.6714 211.959 90.7617 211.02 89.9395 cv
210.08 89.1172 209.552 88.3833 208.92 88.0015 cv
208.289 87.6201 207.555 87.5903 206.704 87.4727 cv
205.852 87.3555 204.883 87.1499 204.267 86.6802 cv
203.65 86.2104 203.386 85.4766 203.225 84.8013 cv
203.063 84.126 203.004 83.5093 202.358 82.9072 cv
201.712 82.3052 200.479 81.7183 199.51 81.4102 cv
198.542 81.1016 197.836 81.0723 196.882 81.1455 cv
195.928 81.2192 194.724 81.3955 193.447 81.4395 cv
192.17 81.4834 190.819 81.3955 189.88 81.542 cv
188.94 81.6885 188.412 82.0708 188.06 82.584 cv
187.707 83.0977 187.531 83.7441 187.354 84.3901 cv
187.179 85.0356 187.002 85.6821 186.929 86.3569 cv
186.856 87.0322 186.885 87.7368 186.812 88.5298 cv
186.738 89.3223 186.562 90.2031 185.945 91.436 cv
185.329 92.6694 184.272 94.2554 183.171 95.8701 cv
182.07 97.4844 180.925 99.1289 179.853 100.538 cv
178.782 101.947 177.783 103.122 176.902 103.988 cv
176.021 104.854 175.258 105.412 174.421 105.662 cv
173.584 105.911 172.674 105.853 171.984 105.97 cv
171.294 106.088 170.825 106.381 170.311 106.749 cv
170.311 106.749 li
cp
249.717 104.194 mo
249.218 104.209 248.63 104.297 248.396 104.987 cv
248.161 105.677 248.278 106.969 248.366 108.026 cv
248.454 109.083 248.513 109.904 248.939 110.462 cv
249.365 111.021 250.157 111.314 251.038 111.769 cv
251.919 112.224 252.888 112.841 253.725 113.443 cv
254.562 114.044 255.266 114.632 255.941 114.999 cv
256.617 115.366 257.263 115.513 257.806 115.263 cv
258.349 115.013 258.789 114.367 259.318 113.707 cv
259.846 113.046 260.463 112.371 260.771 111.622 cv
261.079 110.874 261.079 110.052 260.991 109.244 cv
260.903 108.437 260.727 107.644 260.213 106.998 cv
259.7 106.352 258.848 105.853 258.1 105.281 cv
257.351 104.708 256.705 104.062 255.971 103.93 cv
255.237 103.797 254.415 104.179 253.578 104.326 cv
252.741 104.473 251.89 104.385 251.258 104.312 cv
250.627 104.238 250.216 104.179 249.717 104.194 cv
249.717 104.194 li
cp
214.058 63.2944 mo
213.222 63.6318 212.311 63.6611 211.651 63.9697 cv
210.99 64.2778 210.579 64.8652 209.595 65.3496 cv
208.612 65.834 207.056 66.2158 205.852 65.9956 cv
204.648 65.7754 203.796 64.9531 203.165 64.2046 cv
202.534 63.4556 202.123 62.7803 201.932 62.0615 cv
201.741 61.3418 201.771 60.5781 201.786 59.8887 cv
201.8 59.1987 201.8 58.582 202.167 57.98 cv
202.534 57.3784 203.268 56.791 203.944 56.3506 cv
204.619 55.9102 205.235 55.6167 205.837 55.6606 cv
206.439 55.7046 207.026 56.0864 207.525 56.3359 cv
208.024 56.5854 208.436 56.7026 209.082 56.4531 cv
209.728 56.2036 210.608 55.5869 211.328 55.1025 cv
212.047 54.6182 212.604 54.2656 212.884 53.6641 cv
213.163 53.062 213.163 52.2109 213.618 51.5645 cv
214.073 50.9185 214.983 50.4785 215.981 49.8027 cv
216.979 49.1279 218.066 48.2178 218.83 47.8213 cv
219.593 47.4248 220.033 47.5425 220.914 47.4248 cv
221.795 47.3071 223.116 46.9551 224.525 46.7793 cv
225.935 46.603 227.432 46.603 228.24 46.7061 cv
229.047 46.8086 229.165 47.0137 229.252 47.3955 cv
229.34 47.7773 229.399 48.335 229.487 49.3481 cv
229.575 50.3613 229.693 51.8291 229.767 52.9595 cv
229.839 54.0898 229.869 54.8823 229.487 55.646 cv
229.105 56.4092 228.313 57.1431 227.594 57.833 cv
226.874 58.5229 226.228 59.1689 225.582 59.6392 cv
224.937 60.1084 224.291 60.4023 223.586 60.5493 cv
222.881 60.6958 222.118 60.6958 221.369 60.6519 cv
220.621 60.6079 219.887 60.52 219.226 60.6812 cv
218.565 60.8428 217.978 61.2539 217.523 61.4595 cv
217.067 61.665 216.745 61.665 216.202 61.9878 cv
215.658 62.3105 214.895 62.9565 214.058 63.2944 cv
214.058 63.2944 li
cp
213.911 73.395 mo
213.147 73.8506 212.208 73.9233 211.54 73.7769 cv
210.872 73.6299 210.476 73.2632 210.219 72.6172 cv
209.962 71.9712 209.845 71.0464 209.918 70.3047 cv
209.991 69.5635 210.255 69.0059 210.725 68.5435 cv
211.195 68.0806 211.87 67.7139 212.751 67.3467 cv
213.632 66.9795 214.718 66.6128 215.445 66.3486 cv
216.172 66.0845 216.539 65.9229 216.913 66.0332 cv
217.288 66.1431 217.669 66.5249 217.941 66.9136 cv
218.212 67.3027 218.374 67.6992 218.264 68.1104 cv
218.154 68.521 217.772 68.9473 217.324 69.4756 cv
216.877 70.0039 216.362 70.6348 215.812 71.3691 cv
215.262 72.103 214.674 72.9399 213.911 73.395 cv
213.911 73.395 li
cp
224.297 69.2334 mo
223.791 70.0479 223.189 70.7671 222.602 71.3545 cv
222.015 71.9419 221.442 72.397 220.745 72.8301 cv
220.047 73.2632 219.226 73.6743 218.616 74.0117 cv
218.007 74.3491 217.61 74.6133 217.273 74.9072 cv
216.935 75.2007 216.656 75.5239 216.443 75.9053 cv
216.23 76.2871 216.084 76.7271 216.047 77.2705 cv
216.01 77.814 216.084 78.46 216.216 79.0547 cv
216.348 79.6489 216.539 80.1919 216.781 80.6548 cv
217.023 81.1172 217.317 81.4985 217.853 81.7114 cv
218.389 81.9243 219.167 81.9688 219.878 81.9536 cv
220.591 81.939 221.237 81.8657 221.729 81.6382 cv
222.22 81.4106 222.558 81.0288 222.727 80.6177 cv
222.896 80.207 222.896 79.7666 223.057 79.6123 cv
223.219 79.458 223.542 79.5903 223.923 79.8765 cv
224.305 80.1626 224.745 80.603 225.318 81.124 cv
225.89 81.6455 226.595 82.2471 227.175 82.585 cv
227.754 82.9229 228.209 82.9956 229.45 82.8276 cv
230.691 82.6587 232.717 82.2471 234.031 82.042 cv
235.344 81.8364 235.946 81.8364 236.35 82.0127 cv
236.754 82.189 236.959 82.541 237.165 83.04 cv
237.371 83.5391 237.576 84.1851 237.657 84.6992 cv
237.737 85.2129 237.693 85.5947 237.363 85.9614 cv
237.033 86.3286 236.416 86.6807 235.763 86.8203 cv
235.109 86.96 234.419 86.8862 233.766 86.9082 cv
233.113 86.9302 232.496 87.0479 231.417 87.3418 cv
230.338 87.6348 228.797 88.1045 227.645 88.5889 cv
226.492 89.0737 225.729 89.5728 225.193 90.0791 cv
224.657 90.5859 224.349 91.0996 224.099 91.5918 cv
223.849 92.0835 223.659 92.5532 223.725 93.1992 cv
223.791 93.8452 224.113 94.667 224.495 95.1147 cv
224.877 95.5625 225.317 95.6357 226.073 95.6577 cv
226.83 95.6802 227.901 95.6504 228.833 95.6064 cv
229.766 95.5625 230.559 95.5039 231.072 95.3789 cv
231.586 95.2544 231.821 95.0635 232.423 94.4468 cv
233.025 93.8301 233.994 92.7881 234.713 92.2451 cv
235.432 91.7017 235.902 91.6572 238.611 91.3271 cv
241.319 90.9971 246.267 90.3799 248.946 89.9546 cv
251.625 89.5283 252.036 89.2939 252.616 88.7729 cv
253.196 88.2515 253.944 87.4443 254.59 86.769 cv
255.236 86.0938 255.78 85.5508 256.278 84.8979 cv
256.778 84.2446 257.233 83.481 257.526 82.6592 cv
257.82 81.8369 257.952 80.9561 258.04 80.1338 cv
258.128 79.312 258.172 78.5483 257.96 77.8071 cv
257.747 77.0659 257.277 76.3467 256.697 75.8989 cv
256.117 75.4507 255.427 75.2749 254.847 75.3555 cv
254.268 75.4365 253.798 75.7739 253.328 76.2729 cv
252.858 76.772 252.388 77.4326 251.882 77.9907 cv
251.375 78.5483 250.833 79.0034 250.37 78.9521 cv
249.907 78.9004 249.525 78.3428 249.306 77.3374 cv
249.085 76.3315 249.026 74.8784 248.953 73.4248 cv
248.88 71.9717 248.792 70.5181 248.594 69.4321 cv
248.396 68.3457 248.087 67.626 247.646 67.2593 cv
247.206 66.8921 246.634 66.8774 246.142 67.0024 cv
245.65 67.127 245.239 67.3916 244.784 67.8906 cv
244.329 68.3896 243.83 69.124 243.448 69.8945 cv
243.066 70.6655 242.802 71.4727 242.648 72.3091 cv
242.494 73.146 242.45 74.0122 242.567 74.812 cv
242.685 75.6123 242.964 76.3467 243.367 76.9561 cv
243.771 77.5649 244.3 78.0493 244.725 78.4165 cv
245.151 78.7837 245.474 79.0327 245.65 79.3853 cv
245.826 79.7378 245.855 80.1924 245.863 80.6621 cv
245.87 81.1323 245.855 81.6167 245.621 81.9541 cv
245.386 82.292 244.931 82.4829 244.336 82.5781 cv
243.741 82.6738 243.008 82.6738 242.442 82.417 cv
241.877 82.1597 241.48 81.646 241.018 80.9194 cv
240.556 80.1924 240.027 79.2534 239.499 78.6147 cv
238.971 77.9761 238.442 77.6382 238.09 77.2275 cv
237.737 76.8159 237.561 76.3315 237.341 75.5024 cv
237.121 74.6729 236.856 73.4985 236.724 72.4932 cv
236.592 71.4873 236.592 70.6504 235.888 69.3296 cv
235.183 68.0083 233.773 66.2026 232.555 65.0796 cv
231.336 63.9565 230.309 63.5161 229.333 63.2813 cv
228.356 63.0464 227.432 63.0171 226.705 63.2007 cv
225.978 63.3838 225.45 63.7803 225.303 64.3823 cv
225.155 64.9844 225.391 65.7915 225.303 66.6499 cv
225.214 67.5088 224.804 68.4189 224.297 69.2334 cv
224.297 69.2334 li
cp
259.617 89.0313 mo
259.581 90.1318 259.537 91.0713 259.603 91.8423 cv
259.669 92.6128 259.845 93.2148 260.161 93.6113 cv
260.476 94.0078 260.931 94.1982 261.511 94.1836 cv
262.091 94.1689 262.795 93.9487 263.214 93.3545 cv
263.632 92.7598 263.765 91.791 263.882 90.7412 cv
264 89.6914 264.102 88.561 264.154 87.6514 cv
264.205 86.7407 264.205 86.0508 264.007 85.3608 cv
263.809 84.6709 263.412 83.981 262.928 83.7021 cv
262.443 83.4229 261.871 83.5552 261.32 83.9072 cv
260.77 84.2598 260.241 84.8325 259.962 85.75 cv
259.683 86.6675 259.654 87.9297 259.617 89.0313 cv
259.617 89.0313 li
cp
233.912 41.7461 mo
233.347 42.2158 233.274 43.0674 233.54 43.9175 cv
233.807 44.7676 234.414 45.6172 234.688 46.3501 cv
234.962 47.083 234.903 47.6992 234.896 48.3013 cv
234.888 48.9033 234.933 49.4902 235.437 50.3208 cv
235.94 51.1514 236.904 52.2256 237.775 53.2837 cv
238.646 54.3418 239.425 55.3843 240.21 55.9565 cv
240.996 56.5293 241.788 56.6318 242.61 56.4409 cv
243.432 56.2505 244.284 55.7661 244.688 55.1494 cv
245.091 54.5327 245.047 53.7842 245.26 53.3579 cv
245.473 52.9326 245.942 52.8301 246.493 52.6758 cv
247.043 52.5215 247.675 52.3159 248.093 52.0669 cv
248.512 51.8169 248.717 51.5234 248.93 51.2148 cv
249.143 50.9063 249.363 50.5835 249.62 50.2388 cv
249.877 49.8936 250.171 49.5264 250.251 48.9614 cv
250.332 48.3965 250.2 47.6328 250.075 46.9136 cv
249.951 46.1943 249.833 45.519 249.525 45.1299 cv
249.216 44.7412 248.717 44.6382 247.976 44.4399 cv
247.234 44.2422 246.251 43.9482 245.465 43.7646 cv
244.68 43.5811 244.093 43.5078 243.667 43.5444 cv
243.241 43.5811 242.977 43.728 242.61 44.1025 cv
242.243 44.4766 241.773 45.0786 241.296 45.4531 cv
240.819 45.8271 240.335 45.9741 239.938 45.9521 cv
239.542 45.9302 239.234 45.7393 239.021 45.2324 cv
238.808 44.7261 238.69 43.9038 238.302 43.1631 cv
237.912 42.4214 237.251 41.7607 236.393 41.4746 cv
235.534 41.1885 234.478 41.2764 233.912 41.7461 cv
233.912 41.7461 li
cp
241.604 32.2993 mo
240.892 32.4092 240.481 32.791 240.217 33.2241 cv
239.952 33.6572 239.835 34.1416 239.945 34.6484 cv
240.055 35.1548 240.393 35.6831 240.811 36.2412 cv
241.229 36.7988 241.729 37.3857 242.338 37.9146 cv
242.947 38.4434 243.667 38.9131 244.342 39.2065 cv
245.017 39.5 245.648 39.6177 246.368 39.7422 cv
247.087 39.8672 247.895 39.9995 248.577 40.249 cv
249.26 40.4985 249.817 40.8652 250.324 41.2397 cv
250.831 41.6138 251.286 41.9956 251.741 42.0986 cv
252.196 42.2012 252.651 42.0249 253.128 41.6655 cv
253.605 41.3057 254.104 40.7627 254.442 39.9111 cv
254.78 39.0596 254.956 37.8999 254.596 36.8428 cv
254.236 35.7856 253.341 34.8315 252.636 34.3843 cv
251.932 33.936 251.418 33.9951 250.801 34.208 cv
250.185 34.4204 249.465 34.7876 248.834 35.0298 cv
248.203 35.272 247.66 35.3892 247.241 35.4336 cv
246.823 35.4775 246.529 35.4482 246.096 35.272 cv
245.663 35.0957 245.09 34.7729 244.753 34.4575 cv
244.415 34.1416 244.313 33.8335 244.283 33.5107 cv
244.254 33.1875 244.298 32.8496 243.813 32.6006 cv
243.329 32.3506 242.316 32.189 241.604 32.2993 cv
241.604 32.2993 li
cp
277.386 71.9443 mo
276.682 72.5903 275.859 73.4712 274.979 73.8525 cv
274.098 74.2344 273.158 74.1167 272.688 74.5571 cv
272.219 74.9976 272.219 75.9961 272.042 76.73 cv
271.866 77.4639 271.514 77.9341 271.088 78.3887 cv
270.663 78.8442 270.163 79.2842 269.415 79.71 cv
268.666 80.1357 267.667 80.5469 267.315 81.1929 cv
266.963 81.8389 267.256 82.7197 267.624 83.5713 cv
267.991 84.4229 268.431 85.2446 269.238 85.2886 cv
270.046 85.3325 271.22 84.5986 272.071 84.3784 cv
272.923 84.1582 273.452 84.4521 273.965 85.2153 cv
274.479 85.9785 274.979 87.2119 275.228 88.3716 cv
275.478 89.5313 275.478 90.6177 275.815 91.3369 cv
276.153 92.0566 276.828 92.4087 278.252 92.438 cv
279.676 92.4673 281.849 92.1738 283.273 91.748 cv
284.697 91.3223 285.372 90.7646 285.622 89.8838 cv
285.872 89.0029 285.695 87.7988 285.446 86.6538 cv
285.196 85.5088 284.873 84.4224 284.8 83.1895 cv
284.726 81.9561 284.902 80.5762 284.99 79.02 cv
285.079 77.4639 285.079 75.7314 284.873 74.3809 cv
284.667 73.0308 284.256 72.0615 283.713 71.4746 cv
283.17 70.8872 282.495 70.6816 281.731 70.5791 cv
280.968 70.4761 280.117 70.4761 279.397 70.6816 cv
278.678 70.8872 278.091 71.2983 277.386 71.9443 cv
277.386 71.9443 li
cp
265.472 74.2256 mo
264.407 73.8286 262.881 73.5205 261.934 73.4839 cv
260.987 73.4473 260.62 73.6821 260.796 74.3208 cv
260.973 74.9595 261.691 76.0015 262.47 76.6699 cv
263.248 77.3374 264.084 77.6313 264.804 77.6826 cv
265.523 77.7339 266.125 77.543 266.595 77.1543 cv
267.065 76.7651 267.402 76.1777 267.27 75.6421 cv
267.138 75.106 266.536 74.6216 265.472 74.2256 cv
265.472 74.2256 li
cp
262.507 71.8198 mo
261.913 71.4165 261.34 71.0347 261.017 70.2715 cv
260.694 69.5078 260.621 68.3628 261.318 67.6362 cv
262.015 66.9092 263.483 66.6011 264.973 66.6084 cv
266.463 66.6162 267.976 66.9385 269.055 67.6582 cv
270.133 68.3774 270.779 69.4932 270.823 70.4697 cv
270.868 71.4453 270.31 72.2822 269.605 72.9063 cv
268.9 73.5303 268.049 73.9414 267.146 73.9346 cv
266.243 73.9268 265.289 73.501 264.503 73.0752 cv
263.718 72.6494 263.102 72.2236 262.507 71.8198 cv
262.507 71.8198 li
cp
265.576 61.4277 mo
264.188 61.5078 262.368 61.4785 261.112 61.4126 cv
259.857 61.3467 259.167 61.2437 258.742 60.7886 cv
258.316 60.3335 258.154 59.5259 258.272 58.4326 cv
258.389 57.3389 258.786 55.9585 258.947 54.5493 cv
259.108 53.1401 259.035 51.7012 259.248 50.8721 cv
259.461 50.0425 259.96 49.8223 260.922 50.0645 cv
261.883 50.3066 263.307 51.0112 264.511 52.1934 cv
265.715 53.375 266.699 55.0337 267.389 56.5752 cv
268.079 58.1167 268.475 59.541 268.196 60.3486 cv
267.917 61.1558 266.963 61.3467 265.576 61.4277 cv
265.576 61.4277 li
cp
269.885 45.2139 mo
268.798 45.0522 267.932 45.3018 267.286 45.3677 cv
266.64 45.4336 266.214 45.3164 265.92 44.9712 cv
265.627 44.6265 265.465 44.0542 265.282 43.5771 cv
265.098 43.0996 264.893 42.7178 265.143 42.3657 cv
265.392 42.0132 266.097 41.6904 266.779 41.2573 cv
267.462 40.8242 268.123 40.2813 268.541 39.8555 cv
268.959 39.4292 269.136 39.1211 269.158 38.5269 cv
269.18 37.9321 269.047 37.0508 269.216 36.5005 cv
269.385 35.9502 269.855 35.73 270.685 35.6128 cv
271.514 35.4951 272.703 35.4805 273.841 35.5317 cv
274.979 35.583 276.065 35.7007 276.902 36.0015 cv
277.738 36.3022 278.326 36.7871 278.839 37.1685 cv
279.353 37.5508 279.793 37.8296 280.08 38.3799 cv
280.366 38.9307 280.499 39.7524 280.462 40.8608 cv
280.425 41.9692 280.22 43.3638 280.22 44.4795 cv
280.22 45.5957 280.425 46.4321 280.689 47.2324 cv
280.954 48.0322 281.276 48.7959 281.519 49.3682 cv
281.761 49.9409 281.922 50.3223 281.747 50.77 cv
281.57 51.2178 281.056 51.7319 280.374 52.1133 cv
279.691 52.4951 278.839 52.7446 278.193 52.6494 cv
277.547 52.5537 277.107 52.1133 276.96 51.519 cv
276.813 50.9243 276.96 50.1758 276.902 49.5371 cv
276.843 48.8984 276.579 48.3701 275.991 47.8857 cv
275.404 47.4009 274.494 46.9604 273.386 46.4541 cv
272.277 45.9473 270.971 45.375 269.885 45.2139 cv
269.885 45.2139 li
cp
283.559 42.1084 mo
283.493 42.9521 283.493 43.6572 283.779 44.7583 cv
284.065 45.8594 284.638 47.3569 284.938 48.1719 cv
285.24 48.9863 285.269 49.1187 285.372 49.5664 cv
285.475 50.0142 285.651 50.7773 285.988 51.4307 cv
286.326 52.084 286.825 52.627 287.376 53.3467 cv
287.926 54.0659 288.528 54.9609 289.196 55.5483 cv
289.864 56.1357 290.598 56.4146 291.171 56.3267 cv
291.743 56.2388 292.154 55.7837 292.352 55.3066 cv
292.55 54.8291 292.536 54.3301 292.874 53.8237 cv
293.211 53.3174 293.901 52.8032 294.745 52.2012 cv
295.589 51.5996 296.588 50.9097 297.307 50.271 cv
298.026 49.6323 298.466 49.0449 298.276 48.1201 cv
298.085 47.1953 297.263 45.9326 296.521 44.8247 cv
295.78 43.7163 295.12 42.7622 294.166 42.0352 cv
293.211 41.3086 291.963 40.8091 291.068 40.2954 cv
290.172 39.7817 289.629 39.2529 289.079 38.9888 cv
288.528 38.7246 287.97 38.7246 287.442 38.4971 cv
286.913 38.2695 286.414 37.8145 286.003 37.6309 cv
285.592 37.4478 285.269 37.5352 284.932 37.8584 cv
284.594 38.1816 284.241 38.7393 284 39.5098 cv
283.757 40.2808 283.625 41.2646 283.559 42.1084 cv
283.559 42.1084 li
cp
294.921 55.6079 mo
294.415 55.9014 294.018 56.2534 293.71 56.606 cv
293.401 56.958 293.182 57.3105 293.116 57.751 cv
293.049 58.1914 293.137 58.7197 293.233 59.3145 cv
293.329 59.9087 293.431 60.5693 293.651 60.8853 cv
293.872 61.2007 294.209 61.1714 295.134 61.0835 cv
296.059 60.9951 297.571 60.8486 298.738 60.415 cv
299.905 59.9824 300.727 59.2632 301.087 58.3091 cv
301.447 57.3545 301.344 56.165 301.036 55.4092 cv
300.728 54.6528 300.213 54.3306 299.45 54.3081 cv
298.687 54.2861 297.674 54.5649 296.859 54.8223 cv
296.044 55.0791 295.428 55.314 294.921 55.6079 cv
294.921 55.6079 li
cp
310.916 55.7324 mo
310.123 55.2109 308.787 54.6973 307.789 54.5508 cv
306.791 54.4038 306.13 54.624 305.792 55.042 cv
305.455 55.4604 305.44 56.0771 305.433 56.7012 cv
305.425 57.3247 305.425 57.9565 305.536 58.4409 cv
305.646 58.9253 305.866 59.2632 306.306 59.689 cv
306.747 60.1143 307.407 60.6284 307.987 61.0098 cv
308.567 61.3916 309.066 61.6411 309.719 61.6782 cv
310.373 61.7144 311.18 61.5386 311.716 61.2007 cv
312.251 60.8633 312.516 60.3643 312.553 59.689 cv
312.589 59.0137 312.398 58.1621 312.178 57.4722 cv
311.958 56.7817 311.708 56.2534 310.916 55.7324 cv
310.916 55.7324 li
cp
313.043 45.9043 mo
312.559 46.4478 311.589 46.4185 310.694 46.3447 cv
309.799 46.2715 308.977 46.1543 308.154 46.1396 cv
307.332 46.1245 306.51 46.2124 305.747 46.4185 cv
304.983 46.624 304.279 46.9468 303.604 46.9912 cv
302.928 47.0352 302.282 46.7998 301.856 46.3447 cv
301.431 45.8896 301.225 45.2144 301.167 44.4658 cv
301.108 43.7168 301.196 42.895 301.387 42.1172 cv
301.578 41.3389 301.871 40.605 301.739 40.062 cv
301.607 39.5186 301.049 39.166 300.491 38.8433 cv
299.933 38.52 299.375 38.2266 299.126 37.4487 cv
298.876 36.6704 298.935 35.4077 298.964 34.4243 cv
298.994 33.4409 298.994 32.7363 298.642 32.2373 cv
298.289 31.7378 297.585 31.4443 296.982 30.9453 cv
296.381 30.4458 295.881 29.7412 295.662 28.582 cv
295.441 27.4219 295.5 25.8071 295.529 24.6182 cv
295.559 23.4287 295.559 22.6655 296.102 22.4307 cv
296.645 22.1953 297.731 22.4893 298.656 22.8271 cv
299.581 23.1641 300.345 23.5464 300.771 24.207 cv
301.196 24.8672 301.284 25.8071 301.769 26.3359 cv
302.253 26.8643 303.134 26.9814 304.117 27.0845 cv
305.101 27.187 306.188 27.2749 307.142 27.7012 cv
308.096 28.1265 308.917 28.8901 309.71 29.9175 cv
310.503 30.9453 311.267 32.2368 311.898 33.4111 cv
312.529 34.5859 313.028 35.6426 313.351 36.6118 cv
313.674 37.5806 313.821 38.4614 313.821 39.5332 cv
313.821 40.605 313.674 41.8672 313.601 43.0566 cv
313.527 44.2456 313.527 45.3613 313.043 45.9043 cv
313.043 45.9043 li
cp
322.276 35.437 mo
323.127 35.1436 323.92 34.9966 324.698 35.041 cv
325.476 35.085 326.24 35.3198 326.768 35.7749 cv
327.297 36.23 327.59 36.9053 328.06 37.5659 cv
328.53 38.2261 329.176 38.8726 329.763 39.1221 cv
330.35 39.3716 330.879 39.2251 331.069 38.6084 cv
331.26 37.9917 331.113 36.9053 331.055 35.8926 cv
330.996 34.8794 331.025 33.9395 330.174 32.604 cv
329.322 31.2681 327.59 29.5356 326.43 28.4639 cv
325.271 27.3926 324.684 26.9814 324.155 27.231 cv
323.626 27.4805 323.157 28.3906 322.775 29.2568 cv
322.394 30.123 322.1 30.9448 321.527 31.2974 cv
320.955 31.6494 320.104 31.5322 319.061 31.415 cv
318.019 31.2974 316.786 31.1797 315.772 30.6514 cv
314.76 30.123 313.967 29.1836 313.13 28.2148 cv
312.293 27.2456 311.413 26.2471 311.133 25.4399 cv
310.854 24.6323 311.177 24.0161 311.794 23.605 cv
312.411 23.1938 313.321 22.9883 313.82 22.5332 cv
314.319 22.0781 314.407 21.3735 314.407 20.6538 cv
314.407 19.9346 314.319 19.2007 314.892 18.2026 cv
315.464 17.2041 316.698 15.9419 318.004 14.6797 cv
319.311 13.4165 320.69 12.1543 321.821 11.2588 cv
322.951 10.3633 323.832 9.83447 324.61 9.61426 cv
325.388 9.39404 326.063 9.48193 327.002 9.2915 cv
327.942 9.10059 329.146 8.63086 330.115 8.05859 cv
331.083 7.48584 331.818 6.81055 332.479 6.31152 cv
333.139 5.8125 333.726 5.48926 334.607 5.40137 cv
335.488 5.31348 336.662 5.45996 337.705 5.15186 cv
338.747 4.84375 339.657 4.08008 340.479 3.39551 cv
341.302 2.71143 342.035 2.10596 343.137 1.80322 cv
344.237 1.5 345.706 1.5 347.35 1.5 cv
348.994 1.5 350.814 1.5 352.019 1.6709 cv
353.222 1.84131 353.809 2.18262 354.396 2.79395 cv
354.983 3.40479 355.57 4.28564 355.938 5.22559 cv
356.305 6.16455 356.451 7.16309 355.996 8.14648 cv
355.541 9.12988 354.484 10.0991 353.691 10.9653 cv
352.898 11.8311 352.37 12.5947 352.18 13.3877 cv
351.988 14.1802 352.136 15.002 352.62 15.5454 cv
353.104 16.0884 353.927 16.353 354.572 16.0005 cv
355.219 15.6484 355.688 14.6797 356.202 13.96 cv
356.716 13.2407 357.273 12.771 357.861 12.7417 cv
358.448 12.7119 359.064 13.123 359.329 13.9893 cv
359.593 14.8555 359.505 16.1768 359.094 18.4375 cv
358.683 20.6982 357.949 23.8984 357.317 26.5117 cv
356.687 29.125 356.158 31.1509 355.497 32.457 cv
354.837 33.7637 354.044 34.3511 353.119 34.9526 cv
352.194 35.5547 351.138 36.1714 350.418 36.7881 cv
349.698 37.4043 349.316 38.021 349.596 38.7993 cv
349.874 39.5771 350.814 40.5166 351.387 41.2651 cv
351.959 42.0142 352.165 42.5723 351.71 43.3799 cv
351.255 44.1865 350.139 45.2432 349.405 45.9189 cv
348.671 46.5942 348.319 46.8877 348.055 47.6074 cv
347.79 48.3267 347.614 49.4717 347.306 50.4697 cv
346.997 51.4678 346.558 52.3193 346.014 53.1563 cv
345.471 53.9932 344.824 54.8149 344.252 55.3438 cv
343.68 55.8721 343.181 56.1069 342.461 56.019 cv
341.742 55.9307 340.803 55.52 340.039 55.52 cv
339.275 55.52 338.688 55.9307 338.438 56.4741 cv
338.189 57.0176 338.277 57.6924 338.732 58.6025 cv
339.188 59.5127 340.009 60.6577 340.993 60.9077 cv
341.977 61.1572 343.122 60.5112 344.678 59.9678 cv
346.234 59.4248 348.201 58.9844 349.596 58.8818 cv
350.99 58.7788 351.813 59.0137 352.238 59.6304 cv
352.664 60.2471 352.693 61.2451 352.355 62.4346 cv
352.019 63.623 351.313 65.0034 350.652 66.0459 cv
349.992 67.0879 349.376 67.793 347.878 68.791 cv
346.381 69.7891 344.003 71.0811 342.52 71.5806 cv
341.037 72.0796 340.45 71.7856 339.599 70.7729 cv
338.747 69.7598 337.631 68.0273 336.721 66.7798 cv
335.811 65.5322 335.106 64.7686 334.49 64.3867 cv
333.874 64.0049 333.345 64.0049 332.845 64.4312 cv
332.346 64.8564 331.876 65.708 331.245 66.9561 cv
330.614 68.2036 329.821 69.8477 329.131 70.7729 cv
328.441 71.6978 327.854 71.9033 327.458 71.7856 cv
327.062 71.6685 326.856 71.228 326.489 70.4497 cv
326.122 69.6719 325.593 68.5557 324.991 68.0864 cv
324.39 67.6167 323.714 67.793 323.024 68.1304 cv
322.334 68.4678 321.629 68.9673 320.617 69.2168 cv
319.604 69.4663 318.282 69.4663 317.328 69.5986 cv
316.374 69.7305 315.787 69.9951 315.229 70.0684 cv
314.671 70.1416 314.143 70.0244 313.658 69.6719 cv
313.173 69.3193 312.733 68.7319 312.733 67.8223 cv
312.733 66.9121 313.173 65.6787 313.79 64.666 cv
314.407 63.6528 315.2 62.8599 315.669 62.3022 cv
316.139 61.7441 316.286 61.4219 316.345 60.7314 cv
316.404 60.0415 316.374 58.9844 316.242 58.2065 cv
316.11 57.4282 315.875 56.9292 315.625 56.3569 cv
315.376 55.7842 315.111 55.1382 315.361 54.1689 cv
315.61 53.2002 316.374 51.9087 317.123 51.1309 cv
317.871 50.3525 318.605 50.0879 319.09 50.3525 cv
319.575 50.6167 319.809 51.4092 319.927 52.4663 cv
320.044 53.5234 320.044 54.8447 320.382 55.9165 cv
320.719 56.9878 321.395 57.8101 322.54 58.353 cv
323.685 58.8965 325.3 59.1606 326.973 58.8965 cv
328.646 58.6318 330.379 57.8394 331.495 56.7676 cv
332.61 55.6963 333.109 54.3452 333.036 53.4941 cv
332.963 52.6426 332.317 52.29 331.568 52.4077 cv
330.819 52.5249 329.968 53.1123 329.234 53.6846 cv
328.5 54.2573 327.884 54.8149 326.9 54.9917 cv
325.917 55.1675 324.566 54.9619 323.861 54.4775 cv
323.156 53.9932 323.098 53.2295 323.743 52.0552 cv
324.39 50.8809 325.74 49.2954 326.356 48.0479 cv
326.973 46.7998 326.856 45.8896 326.444 45.0527 cv
326.034 44.2163 325.329 43.4526 324.536 43.2471 cv
323.744 43.0415 322.863 43.3936 322.084 44.1865 cv
321.307 44.979 320.631 46.2124 319.868 46.8145 cv
319.104 47.416 318.253 47.3872 317.783 46.9321 cv
317.313 46.4766 317.226 45.5957 317.181 44.4658 cv
317.137 43.3354 317.137 41.9551 317.548 40.6045 cv
317.959 39.2539 318.782 37.9331 319.647 37.0522 cv
320.514 36.1709 321.424 35.731 322.276 35.437 cv
322.276 35.437 li
cp
292.78 84.873 mo
292.135 85.3945 291.136 86.084 290.534 86.7964 cv
289.932 87.5083 289.727 88.2422 289.396 89.1895 cv
289.066 90.1362 288.611 91.2954 288.318 92.1182 cv
288.024 92.9399 287.892 93.4243 287.907 93.8574 cv
287.921 94.2905 288.083 94.6724 288.384 95.2378 cv
288.685 95.8027 289.125 96.5513 289.617 97.0435 cv
290.108 97.5352 290.652 97.77 291.195 97.8506 cv
291.738 97.9312 292.281 97.8579 292.692 97.9609 cv
293.104 98.0635 293.382 98.3428 293.617 98.6509 cv
293.852 98.959 294.043 99.2969 294.608 99.4585 cv
295.173 99.6196 296.113 99.605 297.229 99.5977 cv
298.344 99.5903 299.636 99.5903 300.437 99.4434 cv
301.237 99.2969 301.545 99.0029 301.779 98.5039 cv
302.015 98.0049 302.176 97.3003 302.051 95.5605 cv
301.926 93.8208 301.515 91.0464 301.229 89.417 cv
300.942 87.7876 300.781 87.3032 300.333 86.9805 cv
299.886 86.6572 299.152 86.4956 298.66 86.0479 cv
298.168 85.6001 297.918 84.8657 297.794 84.2422 cv
297.669 83.6182 297.669 83.104 297.346 82.8472 cv
297.023 82.5903 296.377 82.5903 295.768 82.7666 cv
295.159 82.9429 294.586 83.2949 294.153 83.6475 cv
293.72 84 293.427 84.3521 292.78 84.873 cv
292.78 84.873 li
cp
292.294 74.4722 mo
293.41 74.6187 294.878 74.5313 295.964 74.5161 cv
297.051 74.502 297.756 74.5601 298.901 74.8247 cv
300.046 75.0889 301.631 75.5586 302.717 76.2632 cv
303.804 76.9678 304.391 77.9077 304.655 79.3906 cv
304.919 80.873 304.861 82.8989 304.861 85.1743 cv
304.861 87.4497 304.919 89.9746 305.184 91.6191 cv
305.448 93.2632 305.918 94.0264 306.491 94.6577 cv
307.063 95.2891 307.738 95.7881 308.561 96.0522 cv
309.382 96.3164 310.352 96.3462 311.717 96.4053 cv
313.083 96.4634 314.844 96.5513 316.223 96.7573 cv
317.604 96.9624 318.602 97.2856 319.307 98.0635 cv
320.011 98.8413 320.422 100.075 320.936 100.691 cv
321.45 101.308 322.066 101.308 322.874 101.25 cv
323.681 101.19 324.68 101.073 325.267 100.589 cv
325.854 100.104 326.03 99.2529 326.72 98.6655 cv
327.41 98.0786 328.614 97.7554 330.39 97.5059 cv
332.167 97.2559 334.515 97.0801 336.732 96.9038 cv
338.949 96.7275 341.033 96.5513 342.751 96.1553 cv
344.469 95.7588 345.819 95.1421 346.95 94.8491 cv
348.08 94.5547 348.99 94.5845 349.856 94.6284 cv
350.723 94.6724 351.545 94.731 351.985 94.0562 cv
352.426 93.3804 352.484 91.9712 352.572 90.0776 cv
352.66 88.1836 352.778 85.8057 352.514 83.8682 cv
352.249 81.9297 351.604 80.4326 350.972 79.2876 cv
350.341 78.1421 349.725 77.3496 349.182 76.8945 cv
348.638 76.4395 348.168 76.3218 347.449 76.1016 cv
346.729 75.8813 345.761 75.5586 345.1 75.3975 cv
344.439 75.2358 344.087 75.2358 343.617 75.2207 cv
343.147 75.2065 342.561 75.1768 341.855 75.5288 cv
341.151 75.8813 340.329 76.6157 339.698 77.1147 cv
339.066 77.6138 338.626 77.8779 337.774 78.0249 cv
336.923 78.1719 335.661 78.2012 334.662 78.4946 cv
333.664 78.7881 332.93 79.3462 331.667 80.1978 cv
330.405 81.0488 328.614 82.1938 327.322 83.2363 cv
326.03 84.2788 325.237 85.2183 324.225 85.4385 cv
323.211 85.6587 321.978 85.1597 320.261 84.7046 cv
318.543 84.2495 316.341 83.8384 314.711 83.5303 cv
313.082 83.2217 312.025 83.0166 311.085 82.312 cv
310.146 81.6069 309.324 80.4033 309.368 79.4053 cv
309.412 78.4067 310.322 77.6138 311.306 77.1294 cv
312.29 76.645 313.346 76.4688 313.875 76.2339 cv
314.403 75.999 314.403 75.7056 314.183 75.1328 cv
313.963 74.5601 313.522 73.709 312.818 73.019 cv
312.113 72.3291 311.144 71.8003 310.087 71.5361 cv
309.03 71.272 307.885 71.272 306.857 70.9492 cv
305.83 70.626 304.919 69.98 304.186 69.1284 cv
303.452 68.2773 302.894 67.2202 302.219 66.8242 cv
301.543 66.4277 300.75 66.6919 300.002 66.9854 cv
299.253 67.2788 298.548 67.6016 297.712 67.3374 cv
296.875 67.0732 295.906 66.2217 294.834 65.6348 cv
293.763 65.0474 292.588 64.7246 291.531 64.6514 cv
290.474 64.5776 289.535 64.7539 288.683 65.2969 cv
287.832 65.8403 287.068 66.75 287.245 68.189 cv
287.42 69.6274 288.537 71.5952 289.476 72.7695 cv
290.416 73.9434 291.179 74.3252 292.294 74.4722 cv
292.294 74.4722 li
cp
319.094 121.571 mo
318.482 124.62 317.807 127.85 317.234 130.507 cv
316.661 133.164 316.192 135.249 315.957 136.659 cv
315.722 138.067 315.722 138.801 316.016 139.506 cv
316.309 140.211 316.896 140.886 318.981 141.987 cv
321.065 143.088 324.647 144.615 326.542 145.511 cv
328.436 146.406 328.641 146.67 328.655 147.023 cv
328.67 147.375 328.494 147.815 327.628 148.08 cv
326.761 148.344 325.206 148.432 323.84 148.491 cv
322.475 148.549 321.3 148.579 320.654 148.902 cv
320.008 149.225 319.891 149.841 320.067 150.942 cv
320.243 152.043 320.713 153.628 321.447 154.744 cv
322.181 155.86 323.18 156.506 324.471 157.123 cv
325.763 157.739 327.349 158.327 328.553 158.532 cv
329.756 158.738 330.579 158.562 331.416 157.989 cv
332.252 157.417 333.104 156.448 333.661 156.037 cv
334.219 155.625 334.483 155.772 334.719 156.448 cv
334.954 157.123 335.159 158.327 335.687 159.031 cv
336.216 159.736 337.067 159.941 337.684 159.736 cv
338.3 159.53 338.682 158.914 339.21 158.268 cv
339.739 157.622 340.415 156.947 340.899 156.8 cv
341.384 156.653 341.677 157.035 342.073 157.563 cv
342.47 158.092 342.969 158.768 343.446 159.237 cv
343.923 159.707 344.378 159.971 345.053 160.125 cv
345.729 160.28 346.624 160.324 347.255 160.155 cv
347.887 159.986 348.254 159.604 348.407 159.127 cv
348.562 158.65 348.503 158.078 348.841 157.769 cv
349.179 157.461 349.912 157.417 350.926 157.563 cv
351.938 157.71 353.23 158.048 354.126 158.202 cv
355.021 158.356 355.521 158.327 356.02 157.989 cv
356.519 157.652 357.019 157.006 357.425 156.525 cv
357.833 156.044 358.148 155.729 358.578 155.571 cv
359.007 155.413 359.551 155.413 359.977 155.538 cv
360.402 155.663 360.71 155.912 361.063 156.213 cv
361.415 156.514 361.812 156.866 362.509 157.043 cv
363.206 157.219 364.204 157.219 365.012 157.064 cv
365.819 156.91 366.436 156.602 367.037 156.558 cv
367.64 156.514 368.227 156.734 368.813 156.962 cv
369.401 157.189 369.988 157.424 370.568 157.498 cv
371.148 157.571 371.721 157.483 372.308 157.219 cv
372.896 156.954 373.497 156.514 373.725 155.897 cv
373.952 155.281 373.806 154.488 373.688 153.931 cv
373.57 153.373 373.482 153.05 372.631 152.426 cv
371.779 151.802 370.165 150.877 369.041 150.216 cv
367.918 149.556 367.287 149.159 366.692 148.514 cv
366.098 147.868 365.539 146.972 365.701 146.172 cv
365.862 145.372 366.743 144.667 367.528 144.477 cv
368.313 144.285 369.004 144.608 369.598 145.093 cv
370.192 145.578 370.692 146.223 371.133 146.693 cv
371.573 147.163 371.955 147.457 372.696 147.64 cv
373.438 147.824 374.538 147.897 375.617 147.912 cv
376.696 147.926 377.753 147.882 378.392 147.941 cv
379.03 148 379.251 148.161 379.31 148.69 cv
379.368 149.218 379.266 150.113 379.28 150.671 cv
379.295 151.229 379.427 151.449 379.786 151.75 cv
380.146 152.051 380.733 152.433 381.24 152.727 cv
381.746 153.021 382.172 153.226 382.591 153.651 cv
383.009 154.078 383.42 154.724 383.948 155.325 cv
384.478 155.927 385.123 156.485 385.732 157.006 cv
386.341 157.527 386.913 158.012 387.516 158.46 cv
388.117 158.907 388.749 159.318 389.027 159.825 cv
389.307 160.332 389.233 160.933 388.946 161.646 cv
388.66 162.357 388.161 163.179 387.846 163.884 cv
387.529 164.588 387.397 165.176 387.802 165.653 cv
388.205 166.13 389.145 166.497 389.761 166.681 cv
390.378 166.864 390.671 166.864 391.273 166.299 cv
391.875 165.734 392.785 164.603 393.607 163.7 cv
394.43 162.798 395.164 162.123 395.81 161.733 cv
396.456 161.344 397.014 161.241 397.49 161.447 cv
397.968 161.652 398.364 162.167 398.694 162.849 cv
399.024 163.532 399.289 164.383 399.84 165.015 cv
400.39 165.646 401.227 166.057 401.99 166.446 cv
402.754 166.835 403.443 167.202 404.148 167.591 cv
404.853 167.98 405.572 168.391 406.336 168.596 cv
407.1 168.802 407.906 168.802 408.435 168.816 cv
408.964 168.831 409.213 168.86 409.595 169.359 cv
409.977 169.859 410.49 170.828 410.916 171.65 cv
411.342 172.472 411.68 173.147 412.156 173.507 cv
412.634 173.866 413.25 173.911 414.308 173.903 cv
415.364 173.896 416.862 173.837 418.014 173.962 cv
419.167 174.086 419.974 174.395 420.437 174.857 cv
420.899 175.32 421.017 175.936 421.002 176.523 cv
420.987 177.111 420.84 177.668 420.326 177.918 cv
419.813 178.167 418.932 178.109 418.212 178.124 cv
417.493 178.138 416.935 178.227 416.318 178.667 cv
415.701 179.107 415.026 179.9 414.675 180.678 cv
414.322 181.456 414.292 182.219 414.645 183.056 cv
414.997 183.893 415.731 184.803 416.832 185.214 cv
417.934 185.625 419.401 185.538 420.605 185.244 cv
421.81 184.95 422.748 184.451 423.247 183.731 cv
423.746 183.012 423.806 182.073 424.069 181.456 cv
424.334 180.839 424.804 180.546 425.626 180.341 cv
426.448 180.135 427.622 180.018 428.826 180.047 cv
430.03 180.076 431.264 180.252 432.511 180.986 cv
433.759 181.72 435.021 183.012 435.858 183.952 cv
436.695 184.892 437.105 185.479 436.915 186.242 cv
436.724 187.005 435.932 187.945 435.241 188.738 cv
434.552 189.53 433.964 190.176 433.348 190.793 cv
432.731 191.409 432.085 191.997 431.277 191.967 cv
430.471 191.938 429.501 191.292 428.562 190.631 cv
427.622 189.971 426.712 189.295 425.816 188.855 cv
424.921 188.415 424.04 188.209 423.174 188.106 cv
422.309 188.003 421.456 188.003 420.723 188.195 cv
419.988 188.385 419.372 188.767 418.932 189.222 cv
418.491 189.677 418.227 190.206 417.742 190.338 cv
417.258 190.47 416.554 190.206 416.069 190.059 cv
415.585 189.912 415.32 189.883 414.982 190.22 cv
414.645 190.558 414.233 191.263 413.97 191.835 cv
413.705 192.408 413.588 192.848 413.471 193.714 cv
413.353 194.581 413.235 195.873 413.367 196.827 cv
413.5 197.781 413.882 198.398 414.483 199.103 cv
415.085 199.807 415.907 200.6 416.538 201.363 cv
417.17 202.127 417.61 202.861 417.815 203.536 cv
418.021 204.212 417.992 204.828 417.728 205.459 cv
417.464 206.091 416.965 206.737 415.761 207.544 cv
414.557 208.352 412.648 209.32 411.459 209.952 cv
410.271 210.583 409.801 210.876 409.125 210.921 cv
408.45 210.965 407.569 210.759 406.762 210.833 cv
405.954 210.906 405.221 211.258 403.62 212.022 cv
402.02 212.785 399.554 213.959 397.924 214.796 cv
396.294 215.633 395.502 216.132 395.12 217.41 cv
394.738 218.687 394.768 220.742 394.797 222.239 cv
394.826 223.737 394.855 224.676 395.208 225.322 cv
395.561 225.968 396.235 226.32 397.381 226.658 cv
398.526 226.996 400.141 227.318 402.122 227.597 cv
404.104 227.876 406.453 228.111 407.818 227.847 cv
409.184 227.583 409.565 226.819 410.006 226.041 cv
410.446 225.263 410.945 224.47 411.738 223.957 cv
412.531 223.443 413.617 223.208 414.41 222.929 cv
415.203 222.65 415.702 222.327 415.746 221.637 cv
415.79 220.947 415.379 219.89 415.276 219.156 cv
415.174 218.422 415.379 218.011 416.157 217.806 cv
416.936 217.6 418.286 217.6 419.533 217.835 cv
420.781 218.07 421.927 218.54 422.939 219.215 cv
423.952 219.89 424.833 220.771 425.611 221.314 cv
426.39 221.857 427.064 222.063 428.034 222.107 cv
429.003 222.151 430.265 222.033 431.234 222.18 cv
432.203 222.327 432.878 222.738 433.362 223.428 cv
433.847 224.118 434.141 225.087 434.464 225.807 cv
434.786 226.525 435.139 226.996 435.623 227.26 cv
436.108 227.524 436.725 227.583 437.473 227.847 cv
438.222 228.111 439.103 228.581 439.895 229.33 cv
440.688 230.079 441.392 231.106 442.097 231.812 cv
442.802 232.516 443.506 232.897 444.137 233.323 cv
444.769 233.749 445.326 234.219 446.192 234.307 cv
447.059 234.395 448.233 234.102 449.599 233.705 cv
450.964 233.309 452.52 232.81 453.797 232.78 cv
455.074 232.75 456.072 233.191 457.394 233.866 cv
458.715 234.542 460.358 235.452 461.621 236.156 cv
462.884 236.861 463.765 237.36 465.145 237.39 cv
466.524 237.419 468.403 236.979 470.694 236.538 cv
472.984 236.098 475.686 235.657 478.24 235.173 cv
480.794 234.688 483.201 234.16 483.833 233.543 cv
484.465 232.927 483.319 232.222 482.115 231.694 cv
480.911 231.166 479.649 230.813 478.695 230.108 cv
477.74 229.403 477.095 228.347 475.686 227.319 cv
474.276 226.292 472.104 225.293 470.576 224.604 cv
469.05 223.913 468.169 223.531 466.495 223.238 cv
464.822 222.944 462.355 222.739 460.594 222.563 cv
458.832 222.386 457.775 222.239 456.719 221.74 cv
455.661 221.241 454.604 220.39 454.135 219.685 cv
453.665 218.98 453.782 218.423 454.824 217.923 cv
455.867 217.424 457.834 216.984 459.464 217.146 cv
461.093 217.307 462.385 218.07 463.368 218.672 cv
464.352 219.274 465.027 219.714 466.055 219.905 cv
467.083 220.096 468.463 220.037 469.461 220.302 cv
470.459 220.566 471.076 221.153 472.177 221.579 cv
473.277 222.004 474.863 222.269 477.124 222.196 cv
479.385 222.122 482.321 221.711 484.083 221.461 cv
485.845 221.212 486.432 221.124 486.549 220.713 cv
486.666 220.302 486.314 219.567 485.58 218.085 cv
484.846 216.603 483.73 214.371 482.894 213.064 cv
482.057 211.758 481.499 211.375 480.662 211.126 cv
479.825 210.877 478.71 210.759 477.917 210.657 cv
477.124 210.554 476.654 210.466 476.111 209.923 cv
475.567 209.379 474.951 208.381 474.203 207.603 cv
473.454 206.825 472.573 206.267 472.133 205.592 cv
471.692 204.917 471.692 204.124 471.517 203.258 cv
471.34 202.392 470.988 201.452 470.474 200.659 cv
469.96 199.867 469.285 199.221 468.609 198.868 cv
467.935 198.516 467.259 198.457 466.613 198.428 cv
465.967 198.398 465.351 198.398 464.528 197.929 cv
463.706 197.459 462.679 196.52 462.062 195.683 cv
461.445 194.846 461.24 194.112 460.976 193.554 cv
460.712 192.996 460.389 192.614 460.007 192.585 cv
459.625 192.556 459.185 192.878 458.392 193.202 cv
457.599 193.525 456.454 193.848 455.456 194.2 cv
454.458 194.552 453.606 194.934 452.916 194.978 cv
452.227 195.022 451.697 194.729 451.316 194.112 cv
450.935 193.496 450.699 192.556 450.288 191.896 cv
449.877 191.235 449.29 190.853 448.614 190.53 cv
447.939 190.207 447.176 189.943 446.574 189.679 cv
445.973 189.414 445.532 189.15 445.737 188.813 cv
445.942 188.475 446.795 188.063 447.411 187.491 cv
448.027 186.918 448.409 186.185 448.482 185.671 cv
448.556 185.157 448.321 184.863 447.969 184.731 cv
447.616 184.599 447.146 184.628 446.691 184.408 cv
446.236 184.188 445.797 183.718 445.414 182.896 cv
445.033 182.074 444.71 180.899 444.666 180.033 cv
444.622 179.167 444.856 178.61 445.502 178.067 cv
446.148 177.523 447.205 176.995 448.174 176.922 cv
449.143 176.848 450.024 177.23 450.611 177.876 cv
451.198 178.522 451.492 179.432 451.918 179.946 cv
452.344 180.46 452.901 180.577 453.812 180.43 cv
454.722 180.284 455.984 179.872 456.895 179.417 cv
457.805 178.962 458.362 178.463 458.832 178.448 cv
459.302 178.434 459.684 178.903 459.859 179.447 cv
460.036 179.99 460.007 180.606 459.934 181.34 cv
459.86 182.074 459.742 182.926 460.007 183.866 cv
460.271 184.805 460.917 185.833 461.445 186.552 cv
461.974 187.271 462.385 187.683 463.839 187.961 cv
465.292 188.24 467.787 188.387 469.931 188.534 cv
472.074 188.681 473.865 188.827 474.613 188.548 cv
475.362 188.27 475.069 187.565 474.805 186.846 cv
474.541 186.126 474.306 185.392 473.542 184.747 cv
472.778 184.1 471.487 183.542 470.356 182.926 cv
469.227 182.309 468.257 181.634 467.979 181.208 cv
467.699 180.783 468.11 180.606 468.565 180.357 cv
469.021 180.107 469.52 179.785 469.96 179.652 cv
470.4 179.52 470.782 179.579 471.546 179.388 cv
472.309 179.197 473.454 178.757 474.32 178.258 cv
475.187 177.758 475.773 177.2 476.375 176.613 cv
476.978 176.026 477.594 175.41 477.696 174.969 cv
477.8 174.529 477.389 174.264 476.596 173.795 cv
475.803 173.325 474.629 172.65 473.719 171.857 cv
472.809 171.064 472.162 170.155 472.368 169.362 cv
472.573 168.569 473.631 167.894 474.525 167.424 cv
475.422 166.954 476.155 166.69 476.479 166.162 cv
476.802 165.633 476.713 164.84 476.493 164.106 cv
476.272 163.372 475.921 162.697 475.407 162.037 cv
474.894 161.375 474.218 160.729 473.499 160.363 cv
472.779 159.996 472.016 159.908 470.151 159.893 cv
468.287 159.878 465.321 159.937 463.589 159.849 cv
461.856 159.761 461.357 159.526 460.785 158.983 cv
460.213 158.439 459.566 157.588 458.495 157.016 cv
457.423 156.443 455.926 156.149 454.84 155.958 cv
453.753 155.768 453.078 155.68 452.183 155.885 cv
451.287 156.091 450.172 156.59 449.275 157.089 cv
448.38 157.588 447.705 158.087 446.971 158.175 cv
446.237 158.263 445.444 157.941 444.534 157.574 cv
443.624 157.206 442.596 156.795 441.539 156.458 cv
440.482 156.12 439.396 155.856 438.471 155.753 cv
437.546 155.65 436.783 155.709 436.431 156.047 cv
436.078 156.384 436.137 157.001 436.255 157.809 cv
436.372 158.616 436.548 159.614 436.445 160.392 cv
436.343 161.17 435.961 161.728 435.388 162.125 cv
434.815 162.521 434.052 162.756 433.392 162.653 cv
432.731 162.55 432.173 162.109 432.056 161.581 cv
431.938 161.053 432.261 160.436 432.555 159.893 cv
432.849 159.35 433.113 158.88 433.172 158.205 cv
433.23 157.529 433.083 156.648 432.819 156.105 cv
432.555 155.562 432.173 155.356 431.601 155.254 cv
431.028 155.151 430.265 155.151 429.678 155.151 cv
429.091 155.151 428.679 155.151 427.931 154.813 cv
427.182 154.476 426.096 153.8 425.464 153.213 cv
424.833 152.626 424.657 152.127 424.642 151.275 cv
424.627 150.424 424.774 149.22 425.142 148.413 cv
425.509 147.605 426.096 147.194 426.859 146.93 cv
427.622 146.666 428.562 146.548 429.398 146.475 cv
430.235 146.402 430.969 146.372 431.63 146.093 cv
432.291 145.814 432.878 145.286 433.127 144.493 cv
433.377 143.7 433.288 142.643 432.745 141.909 cv
432.202 141.175 431.203 140.764 430.484 140.559 cv
429.765 140.353 429.324 140.353 428.811 140.353 cv
428.297 140.353 427.709 140.353 427.298 139.634 cv
426.887 138.915 426.652 137.476 426.109 136.287 cv
425.565 135.098 424.714 134.158 423.951 133.629 cv
423.188 133.101 422.513 132.983 422.028 133.277 cv
421.544 133.571 421.25 134.276 420.56 135.347 cv
419.87 136.419 418.783 137.857 417.902 138.885 cv
417.021 139.913 416.347 140.529 415.48 140.691 cv
414.614 140.853 413.558 140.559 412.956 139.883 cv
412.354 139.208 412.207 138.151 412.926 137.358 cv
413.646 136.566 415.231 136.037 416.053 135.156 cv
416.875 134.276 416.934 133.042 416.831 131.868 cv
416.729 130.693 416.464 129.578 415.612 128.961 cv
414.761 128.345 413.322 128.228 412.427 128.433 cv
411.531 128.638 411.179 129.167 410.782 130.121 cv
410.387 131.075 409.946 132.455 409.462 133.233 cv
408.978 134.012 408.448 134.188 408.185 133.835 cv
407.92 133.483 407.92 132.602 407.905 131.81 cv
407.891 131.017 407.861 130.312 407.317 129.916 cv
406.775 129.519 405.718 129.431 404.926 129.769 cv
404.133 130.106 403.604 130.87 403.192 131.531 cv
402.782 132.191 402.488 132.749 402.165 132.969 cv
401.842 133.189 401.49 133.072 401.05 132.764 cv
400.609 132.455 400.08 131.956 400.036 131.046 cv
399.992 130.135 400.433 128.814 400.976 127.376 cv
401.52 125.938 402.165 124.381 401.211 123.089 cv
400.257 121.797 397.702 120.77 396.146 120.506 cv
394.59 120.242 394.032 120.741 393.899 121.387 cv
393.768 122.033 394.062 122.825 393.591 123.647 cv
393.122 124.47 391.889 125.321 390.948 126.216 cv
390.01 127.112 389.363 128.051 388.908 128.096 cv
388.453 128.14 388.189 127.288 387.896 126.07 cv
387.602 124.851 387.278 123.266 386.574 122.811 cv
385.869 122.355 384.783 123.031 383.8 123.457 cv
382.816 123.882 381.935 124.059 381.289 123.867 cv
380.644 123.677 380.231 123.119 379.88 122.561 cv
379.527 122.003 379.233 121.445 379.366 120.755 cv
379.498 120.065 380.056 119.243 380.203 118.23 cv
380.35 117.217 380.085 116.013 379.821 115.294 cv
379.557 114.575 379.293 114.34 378.617 114.296 cv
377.942 114.252 376.855 114.399 375.931 114.825 cv
375.006 115.25 374.242 115.955 373.259 116.234 cv
372.275 116.514 371.071 116.366 370.117 116.366 cv
369.163 116.366 368.459 116.514 368.106 117.086 cv
367.754 117.658 367.754 118.657 367.886 119.992 cv
368.018 121.329 368.282 123.002 368.018 123.927 cv
367.754 124.852 366.961 125.028 366.08 124.984 cv
365.199 124.939 364.23 124.676 363.232 124.911 cv
362.234 125.146 361.206 125.879 360.458 126.423 cv
359.709 126.966 359.239 127.318 358.535 127.157 cv
357.83 126.995 356.891 126.32 356.332 125.63 cv
355.774 124.939 355.599 124.235 355.862 123.251 cv
356.127 122.268 356.832 121.005 357.14 119.919 cv
357.448 118.833 357.36 117.923 356.759 116.719 cv
356.156 115.515 355.041 114.017 353.837 112.858 cv
352.633 111.698 351.341 110.876 350.637 109.922 cv
349.932 108.968 349.814 107.881 349.036 107.221 cv
348.258 106.56 346.819 106.325 345.646 106.414 cv
344.471 106.501 343.561 106.912 342.533 107.925 cv
341.505 108.938 340.36 110.553 339.567 112.594 cv
338.774 114.634 338.334 117.101 337.938 119.42 cv
337.542 121.739 337.189 123.912 337.262 125.645 cv
337.336 127.377 337.835 128.669 338.408 129.711 cv
338.98 130.753 339.626 131.546 340.301 132.735 cv
340.977 133.924 341.682 135.51 342.415 137.448 cv
343.149 139.385 343.913 141.675 344.221 143.202 cv
344.529 144.729 344.383 145.492 343.795 146.036 cv
343.208 146.579 342.181 146.902 341.505 146.535 cv
340.83 146.167 340.507 145.111 339.714 143.481 cv
338.921 141.852 337.659 139.649 336.558 137.874 cv
335.457 136.097 334.518 134.747 333.578 133.411 cv
332.638 132.075 331.699 130.753 331.317 129.432 cv
330.936 128.111 331.111 126.79 331.39 125.248 cv
331.669 123.707 332.051 121.945 332.447 119.816 cv
332.844 117.688 333.255 115.192 333.93 113.151 cv
334.605 111.111 335.544 109.525 335.677 108.381 cv
335.809 107.235 335.134 106.531 334.121 106.134 cv
333.108 105.738 331.757 105.65 330.524 105.708 cv
329.291 105.767 328.175 105.973 327.104 106.34 cv
326.032 106.707 325.004 107.235 324.167 107.881 cv
323.331 108.527 322.685 109.291 322.156 110.127 cv
321.628 110.964 321.217 111.875 320.736 113.764 cv
320.256 115.653 319.707 118.522 319.094 121.571 cv
319.094 121.571 li
cp
358.533 104.417 mo
357.564 104.329 356.185 104.505 355.494 104.975 cv
354.805 105.444 354.805 106.208 355.23 107.104 cv
355.656 107.999 356.507 109.026 357.594 110.583 cv
358.68 112.139 360.001 114.224 360.984 115.075 cv
361.969 115.926 362.614 115.545 363.378 114.987 cv
364.141 114.429 365.022 113.695 366.196 113.284 cv
367.371 112.873 368.839 112.785 370.013 112.653 cv
371.188 112.521 372.068 112.344 372.626 111.596 cv
373.185 110.847 373.419 109.526 373.419 108.484 cv
373.419 107.441 373.185 106.678 372.259 105.958 cv
371.335 105.239 369.72 104.563 368.398 103.727 cv
367.077 102.89 366.05 101.892 365.315 101.481 cv
364.581 101.07 364.142 101.246 363.76 101.863 cv
363.378 102.479 363.055 103.536 362.541 104.167 cv
362.027 104.799 361.322 105.004 360.691 104.931 cv
360.06 104.857 359.502 104.505 358.533 104.417 cv
358.533 104.417 li
cp
400.607 171.858 mo
399.99 172.446 399.99 173.444 400.255 174.376 cv
400.52 175.308 401.048 176.174 401.958 176.989 cv
402.868 177.804 404.16 178.567 405.393 178.913 cv
406.626 179.257 407.801 179.184 408.344 178.707 cv
408.887 178.23 408.799 177.349 408.3 176.38 cv
407.801 175.411 406.891 174.354 406.054 173.43 cv
405.217 172.504 404.453 171.712 403.455 171.403 cv
402.457 171.095 401.224 171.271 400.607 171.858 cv
400.607 171.858 li
cp
388.422 175.059 mo
387.923 176.116 387.747 176.732 387.688 177.569 cv
387.63 178.406 387.688 179.463 387.614 180.667 cv
387.542 181.87 387.336 183.221 387.512 184.19 cv
387.688 185.159 388.246 185.746 388.892 186.686 cv
389.538 187.625 390.272 188.917 390.83 189.592 cv
391.388 190.268 391.77 190.326 392.371 190.312 cv
392.974 190.297 393.796 190.209 394.324 189.856 cv
394.853 189.504 395.087 188.887 395.675 188.212 cv
396.262 187.537 397.201 186.803 397.656 186.025 cv
398.111 185.247 398.082 184.425 398.053 183.191 cv
398.023 181.958 397.994 180.314 397.817 179.096 cv
397.642 177.877 397.318 177.085 396.614 176.16 cv
395.909 175.235 394.823 174.178 393.751 173.297 cv
392.68 172.416 391.623 171.712 390.684 172.108 cv
389.743 172.504 388.922 174.002 388.422 175.059 cv
388.422 175.059 li
cp
185.414 446.027 mo
180.814 445.109 174.121 443.817 166.869 442.262 cv
159.616 440.705 151.806 438.886 143.556 436.742 cv
135.306 434.599 126.615 432.132 118.423 429.343 cv
110.231 426.554 102.539 423.441 94.2007 420.124 cv
85.8623 416.806 76.8779 413.283 70.125 410.729 cv
63.3721 408.174 58.8506 406.589 56.3843 405.297 cv
53.918 404.005 53.5068 403.007 52.9492 402.126 cv
52.3911 401.245 51.6865 400.481 51.4517 399.513 cv
51.2168 398.544 51.4517 397.369 50.9819 396.253 cv
50.5117 395.138 49.3379 394.081 47.7817 392.231 cv
46.2251 390.382 44.2871 387.739 43.3774 385.331 cv
42.4673 382.924 42.5845 380.751 42.291 378.96 cv
41.9971 377.169 41.293 375.76 40.0894 373.998 cv
38.8853 372.236 37.1821 370.122 35.2441 368.654 cv
33.3066 367.187 31.1338 366.364 30.1064 365.542 cv
29.0786 364.72 29.1958 363.897 29.46 362.43 cv
29.7241 360.962 30.1357 358.848 30.0181 357.145 cv
29.9004 355.441 29.2544 354.15 29.3428 353.269 cv
29.4312 352.389 30.2529 351.919 31.5156 351.185 cv
32.7778 350.451 34.481 349.452 34.8628 348.249 cv
35.2441 347.045 34.3052 345.636 33.7729 344.183 cv
33.2407 342.729 33.1157 341.231 33.1123 339.749 cv
33.1084 338.267 33.2261 336.798 33.2114 335.756 cv
33.1968 334.714 33.0498 334.097 32.0811 333.26 cv
31.1123 332.423 29.3213 331.366 28.3374 330.53 cv
27.354 329.693 27.1777 329.076 26.7373 327.417 cv
26.2969 325.759 25.5923 323.057 25.3135 321.34 cv
25.0347 319.622 25.1816 318.889 25.5337 317.934 cv
25.8862 316.979 26.4438 315.806 27.3687 314.19 cv
28.2935 312.576 29.5854 310.521 30.6426 308.759 cv
31.6997 306.997 32.522 305.528 33.7847 304.236 cv
35.0469 302.944 36.75 301.829 37.6895 301.021 cv
38.6289 300.214 38.8052 299.715 39.231 298.145 cv
39.6567 296.573 40.332 293.931 40.6553 292.037 cv
40.978 290.144 40.9482 288.998 40.9341 287.647 cv
40.9189 286.297 40.9189 284.741 40.4644 283.405 cv
40.0093 282.069 39.0986 280.953 38.2329 279.749 cv
37.3667 278.546 36.5444 277.254 36.1772 276.212 cv
35.8105 275.169 35.8984 274.377 36.104 273.334 cv
36.3096 272.292 36.6323 271 36.9116 269.958 cv
37.1904 268.916 37.4258 268.124 37.5435 267.125 cv
37.6611 266.127 37.6611 264.923 37.4995 262.677 cv
37.3379 260.431 37.0151 257.142 36.7217 254.324 cv
36.4277 251.505 36.1636 249.156 36.0903 247.542 cv
36.0171 245.927 36.1338 245.046 36.3105 243.916 cv
36.4863 242.785 36.7212 241.405 37.1768 240.377 cv
37.6313 239.35 38.3066 238.675 38.6885 237.72 cv
39.0708 236.766 39.1592 235.533 38.9097 233.831 cv
38.6602 232.127 38.0728 229.955 37.2363 228.501 cv
36.3994 227.048 35.313 226.314 34.4175 226.006 cv
33.522 225.697 32.8174 225.815 31.5698 226.241 cv
30.3218 226.667 28.5308 227.4 26.9893 227.988 cv
25.4478 228.575 24.1558 229.015 23.4219 228.927 cv
22.688 228.839 22.5117 228.222 22.1157 227.562 cv
21.7192 226.901 21.1025 226.197 20.9702 225.448 cv
20.8384 224.699 21.1904 223.907 21.1611 223.041 cv
21.1318 222.174 20.7207 221.234 20.1484 220.295 cv
19.5757 219.355 18.8418 218.416 18.3428 217.697 cv
17.8433 216.978 17.5791 216.478 17.6528 215.715 cv
17.7256 214.951 18.1372 213.924 18.2251 212.764 cv
18.313 211.604 18.0781 210.313 18.1953 209.593 cv
18.313 208.874 18.7827 208.727 19.2085 208.448 cv
19.6343 208.169 20.0161 207.758 20.1484 206.804 cv
20.2803 205.85 20.1631 204.352 19.9722 203.295 cv
19.7813 202.238 19.5171 201.622 19.312 201.159 cv
19.1064 200.696 18.9595 200.388 18.4312 200.263 cv
17.9023 200.138 16.9927 200.197 16.1411 200.234 cv
15.2896 200.271 14.4966 200.286 14.0049 199.999 cv
13.5127 199.713 13.3228 199.125 13.0581 198.546 cv
12.7939 197.966 12.4561 197.394 12.2949 196.77 cv
12.1333 196.146 12.1479 195.47 12.6836 194.487 cv
13.2197 193.503 14.2764 192.211 18.0933 187 cv
21.9102 181.788 28.4868 172.657 33.3022 166.271 cv
38.1172 159.885 41.1709 156.244 46.7202 149.667 cv
52.2695 143.091 60.314 133.578 66.9492 125.885 cv
73.585 118.193 78.8115 112.321 82.2466 108.372 cv
85.6821 104.423 87.3257 102.396 88.5151 100.987 cv
89.7041 99.5776 90.438 98.7847 91.1577 98.4326 cv
91.877 98.0801 92.5811 98.168 93.0952 98.3447 cv
93.6089 98.5205 93.9316 98.7847 94.167 99.416 cv
94.4014 100.047 94.5488 101.046 95.2241 102.367 cv
95.8989 103.688 97.103 105.332 97.749 106.448 cv
98.395 107.563 98.4829 108.151 98.5122 109.149 cv
98.5415 110.147 98.5122 111.557 98.7617 112.526 cv
99.0117 113.495 99.54 114.023 100.523 114.684 cv
101.507 115.344 102.946 116.137 104.062 116.783 cv
105.177 117.429 105.97 117.928 106.293 118.442 cv
106.616 118.956 106.469 119.484 106.425 120.263 cv
106.381 121.041 106.44 122.068 106.631 122.758 cv
106.821 123.448 107.145 123.8 107.409 124.417 cv
107.673 125.033 107.878 125.914 108.216 126.281 cv
108.554 126.648 109.023 126.501 109.611 126.252 cv
110.198 126.002 110.903 125.65 111.255 125.224 cv
111.607 124.799 111.607 124.299 111.798 123.536 cv
111.989 122.772 112.371 121.745 112.752 121.172 cv
113.134 120.6 113.516 120.482 114.309 120.086 cv
115.102 119.689 116.305 119.015 117.274 118.779 cv
118.243 118.545 118.977 118.75 120.709 119 cv
122.441 119.25 125.172 119.543 126.655 119.602 cv
128.138 119.66 128.373 119.484 128.607 119.176 cv
128.842 118.867 129.077 118.427 129.43 118.237 cv
129.782 118.045 130.251 118.104 131.25 118.281 cv
132.248 118.457 133.775 118.75 135.14 119.103 cv
136.505 119.455 137.709 119.866 138.752 120.468 cv
139.794 121.07 140.675 121.863 140.587 122.318 cv
140.499 122.773 139.442 122.89 137.343 123.052 cv
135.244 123.213 132.102 123.419 130.34 123.566 cv
128.579 123.712 128.197 123.801 127.037 124.065 cv
125.877 124.33 123.939 124.77 123.059 125.459 cv
122.178 126.149 122.354 127.089 122.677 127.955 cv
123 128.821 123.47 129.614 124.688 129.673 cv
125.906 129.731 127.874 129.056 129.856 128.602 cv
131.837 128.146 133.834 127.911 135.288 128.058 cv
136.741 128.205 137.651 128.733 138.532 129.012 cv
139.413 129.291 140.264 129.321 141.307 128.763 cv
142.349 128.205 143.582 127.06 144.83 125.577 cv
146.078 124.094 147.34 122.274 148.25 121.599 cv
149.161 120.923 149.718 121.393 150.188 122.905 cv
150.658 124.417 151.04 126.972 151.216 129.746 cv
151.392 132.521 151.363 135.516 151.641 137.16 cv
151.92 138.804 152.507 139.098 153.447 138.701 cv
154.386 138.305 155.678 137.219 156.823 136.03 cv
157.968 134.84 158.967 133.549 159.701 133.196 cv
160.435 132.844 160.904 133.431 161.125 133.842 cv
161.345 134.253 161.315 134.488 161.051 135.883 cv
160.787 137.277 160.288 139.832 160.053 141.843 cv
159.818 143.854 159.848 145.322 160.332 146.188 cv
160.816 147.055 161.756 147.319 162.622 146.879 cv
163.488 146.438 164.281 145.293 164.927 144.412 cv
165.573 143.532 166.072 142.915 166.718 142.885 cv
167.364 142.856 168.157 143.414 169.125 143.928 cv
170.095 144.441 171.239 144.911 171.944 145.558 cv
172.649 146.203 172.913 147.025 173.045 147.598 cv
173.177 148.17 173.177 148.493 173.368 149.198 cv
173.559 149.902 173.94 150.989 174.411 151.796 cv
174.88 152.604 175.438 153.132 176.701 154.292 cv
177.963 155.452 179.931 157.243 181.354 158.3 cv
182.778 159.357 183.659 159.68 184.628 159.797 cv
185.597 159.915 186.654 159.827 188.063 160.135 cv
189.473 160.443 191.234 161.148 192.248 161.604 cv
193.26 162.059 193.524 162.264 193.877 162.587 cv
194.229 162.91 194.669 163.35 195.095 164.025 cv
195.521 164.701 195.932 165.611 196.417 166.918 cv
196.901 168.224 197.459 169.927 197.723 171.087 cv
197.987 172.247 197.958 172.863 197.444 173.612 cv
196.931 174.36 195.932 175.241 195.271 175.99 cv
194.611 176.739 194.288 177.355 194.435 178.236 cv
194.582 179.117 195.198 180.262 195.844 181.333 cv
196.49 182.405 197.165 183.404 198.883 184.094 cv
200.601 184.784 203.36 185.166 205.753 185.547 cv
208.146 185.929 210.172 186.311 212.257 186.59 cv
214.341 186.869 216.484 187.044 217.982 187.044 cv
219.479 187.044 220.331 186.869 220.712 187.147 cv
221.094 187.426 221.006 188.16 220.918 188.982 cv
220.83 189.804 220.742 190.715 221.021 191.596 cv
221.3 192.477 221.946 193.328 222.592 194.297 cv
223.238 195.266 223.884 196.352 224.5 197.086 cv
225.117 197.82 225.704 198.202 226.673 198.393 cv
227.642 198.583 228.992 198.583 230.152 198.393 cv
231.312 198.202 232.281 197.82 232.765 197.159 cv
233.25 196.499 233.25 195.559 232.985 194.708 cv
232.721 193.856 232.192 193.093 231.723 192.33 cv
231.253 191.566 230.842 190.803 230.725 189.702 cv
230.607 188.601 230.783 187.162 231.121 186.296 cv
231.458 185.43 231.958 185.136 232.633 185.151 cv
233.309 185.166 234.16 185.488 234.982 185.444 cv
235.804 185.4 236.597 184.989 237.39 184.535 cv
238.182 184.079 238.975 183.58 239.738 182.67 cv
240.502 181.76 241.236 180.438 241.823 179.631 cv
242.41 178.824 242.851 178.53 243.364 178.78 cv
243.878 179.029 244.465 179.822 244.745 180.894 cv
245.023 181.965 244.994 183.315 244.979 184.123 cv
244.965 184.931 244.965 185.195 245.067 185.518 cv
245.17 185.841 245.375 186.222 246.374 186.957 cv
247.372 187.69 249.163 188.777 250.345 189.459 cv
251.527 190.142 252.1 190.421 253.171 190.604 cv
254.243 190.788 255.813 190.876 257.524 190.715 cv
259.234 190.553 261.084 190.142 262.082 190.201 cv
263.08 190.26 263.228 190.788 263.455 191.419 cv
263.682 192.051 263.991 192.785 264.218 193.232 cv
264.445 193.68 264.593 193.842 264.989 194.055 cv
265.385 194.267 266.031 194.532 267.103 194.693 cv
268.175 194.854 269.672 194.914 271.184 194.928 cv
272.696 194.943 274.223 194.913 275.684 194.898 cv
277.145 194.884 278.539 194.884 279.552 194.855 cv
280.565 194.825 281.196 194.767 281.321 194.282 cv
281.446 193.798 281.064 192.887 280.661 192.087 cv
280.257 191.288 279.831 190.597 279.729 189.856 cv
279.625 189.115 279.846 188.322 280.8 187.735 cv
281.754 187.147 283.442 186.766 284.418 186.523 cv
285.395 186.281 285.659 186.179 286.158 186.392 cv
286.657 186.604 287.391 187.133 288.383 187.867 cv
289.374 188.601 290.621 189.54 291.208 190.172 cv
291.796 190.803 291.722 191.125 291.502 191.698 cv
291.282 192.271 290.915 193.093 290.687 193.776 cv
290.459 194.458 290.372 195.002 290.32 196.022 cv
290.269 197.042 290.254 198.539 290.423 199.582 cv
290.592 200.624 290.944 201.211 291.165 201.579 cv
291.385 201.945 291.473 202.092 291.884 202.225 cv
292.295 202.356 293.029 202.474 293.8 202.357 cv
294.57 202.239 295.377 201.887 295.678 201.366 cv
295.979 200.845 295.774 200.155 295.627 199.406 cv
295.48 198.657 295.393 197.85 295.209 197.101 cv
295.025 196.352 294.747 195.663 294.769 194.921 cv
294.791 194.179 295.113 193.387 295.921 192.748 cv
296.729 192.109 298.02 191.625 298.747 191.185 cv
299.474 190.744 299.635 190.348 299.774 189.731 cv
299.914 189.115 300.031 188.278 300.442 187.625 cv
300.854 186.971 301.558 186.501 302.226 186.083 cv
302.894 185.665 303.525 185.298 303.841 184.916 cv
304.157 184.535 304.157 184.138 304.142 183.558 cv
304.127 182.979 304.098 182.215 303.709 181.76 cv
303.32 181.305 302.571 181.158 301.815 180.945 cv
301.06 180.733 300.296 180.454 299.914 179.991 cv
299.532 179.529 299.532 178.883 299.613 178.34 cv
299.694 177.796 299.855 177.356 300.325 176.798 cv
300.795 176.24 301.573 175.565 302.197 174.934 cv
302.821 174.302 303.291 173.715 303.489 173.194 cv
303.687 172.673 303.614 172.218 303.43 171.932 cv
303.247 171.646 302.953 171.528 302.131 171.403 cv
301.309 171.278 299.958 171.146 298.938 171.028 cv
297.917 170.911 297.228 170.809 296.655 170.471 cv
296.083 170.133 295.627 169.561 294.527 168.372 cv
293.426 167.183 291.679 165.377 290.615 164.269 cv
289.551 163.161 289.169 162.75 289.162 162.177 cv
289.154 161.605 289.521 160.871 289.779 160.115 cv
290.035 159.358 290.182 158.58 290.131 157.949 cv
290.079 157.318 289.83 156.833 289.478 156.305 cv
289.125 155.776 288.67 155.204 288.42 154.506 cv
288.171 153.809 288.127 152.987 288.09 152.246 cv
288.054 151.504 288.024 150.844 288.273 150.337 cv
288.523 149.831 289.052 149.479 289.573 149.046 cv
290.094 148.613 290.608 148.099 291.071 147.894 cv
291.533 147.688 291.944 147.791 292.473 147.85 cv
293.001 147.909 293.647 147.923 293.721 147.563 cv
293.794 147.204 293.295 146.47 292.942 145.853 cv
292.59 145.237 292.385 144.738 292.348 143.857 cv
292.312 142.976 292.443 141.713 292.73 141.119 cv
293.016 140.524 293.457 140.598 294.014 140.605 cv
294.572 140.612 295.247 140.554 295.395 139.937 cv
295.541 139.32 295.159 138.146 294.47 136.077 cv
293.779 134.007 292.781 131.042 292.275 129.162 cv
291.769 127.283 291.753 126.491 291.753 125.192 cv
291.753 123.892 291.769 122.087 291.747 120.017 cv
291.725 117.947 291.666 115.612 291.718 114.152 cv
291.77 112.691 291.931 112.104 292.775 110.805 cv
293.619 109.505 295.146 107.494 296.079 106.364 cv
297.01 105.233 297.348 104.984 298.582 104.896 cv
299.814 104.808 301.943 104.881 303.859 105.064 cv
305.774 105.248 307.478 105.542 308.982 105.77 cv
310.487 105.997 311.793 106.158 312.535 106.459 cv
313.276 106.76 313.453 107.201 313.68 107.707 cv
313.908 108.214 314.187 108.786 314.047 109.814 cv
313.908 110.841 313.35 112.324 312.711 114.24 cv
312.073 116.156 311.354 118.504 310.869 120.229 cv
310.385 121.955 310.135 123.055 309.856 123.789 cv
309.577 124.523 309.269 124.891 308.909 125.309 cv
308.549 125.727 308.139 126.197 307.676 126.498 cv
307.214 126.799 306.7 126.931 306.076 127.071 cv
305.452 127.21 304.718 127.356 304.307 127.092 cv
303.896 126.828 303.808 126.153 303.646 125.639 cv
303.485 125.125 303.25 124.773 302.854 124.685 cv
302.457 124.597 301.899 124.773 301.547 125.074 cv
301.195 125.375 301.047 125.801 300.901 126.41 cv
300.754 127.019 300.607 127.812 300.563 128.678 cv
300.519 129.544 300.578 130.483 300.644 131.409 cv
300.71 132.333 300.783 133.244 300.835 133.86 cv
300.886 134.477 300.916 134.8 300.71 135.409 cv
300.505 136.018 300.064 136.914 300.021 137.523 cv
299.977 138.132 300.329 138.455 301.122 139.042 cv
301.914 139.629 303.147 140.481 304.006 141.142 cv
304.865 141.803 305.349 142.272 305.746 143.116 cv
306.142 143.96 306.45 145.179 306.531 146.346 cv
306.612 147.513 306.465 148.629 306.34 149.583 cv
306.216 150.538 306.113 151.33 306.246 151.903 cv
306.377 152.476 306.744 152.828 307.479 153.261 cv
308.212 153.694 309.313 154.208 309.967 154.692 cv
310.62 155.177 310.825 155.632 311.185 156.314 cv
311.545 156.997 312.059 157.907 312.33 158.436 cv
312.602 158.964 312.631 159.111 312.764 159.515 cv
312.896 159.919 313.13 160.579 313.079 161.174 cv
313.028 161.769 312.69 162.297 312.228 163.082 cv
311.765 163.868 311.178 164.91 310.818 165.739 cv
310.458 166.569 310.326 167.186 310.385 167.626 cv
310.443 168.066 310.693 168.331 311.339 168.411 cv
311.985 168.492 313.027 168.389 313.938 168.337 cv
314.848 168.286 315.626 168.286 316.154 168.573 cv
316.683 168.859 316.962 169.431 317.263 170.026 cv
317.564 170.62 317.887 171.237 318.063 171.751 cv
318.239 172.265 318.268 172.676 318.217 173.469 cv
318.166 174.261 318.034 175.436 318.048 176.309 cv
318.063 177.183 318.224 177.755 318.635 178.812 cv
319.047 179.869 319.707 181.41 320.125 182.394 cv
320.544 183.378 320.72 183.803 321.109 183.914 cv
321.498 184.024 322.1 183.818 322.459 183.532 cv
322.819 183.246 322.937 182.879 322.974 181.183 cv
323.01 179.487 322.966 176.463 322.922 174.782 cv
322.878 173.101 322.834 172.764 323.091 172.595 cv
323.348 172.426 323.906 172.426 324.339 172.456 cv
324.772 172.485 325.08 172.544 325.411 172.867 cv
325.741 173.189 326.093 173.777 326.6 174.489 cv
327.106 175.201 327.767 176.038 328.295 176.823 cv
328.824 177.608 329.22 178.342 329.506 178.937 cv
329.792 179.531 329.969 179.987 330.204 181.161 cv
330.438 182.336 330.732 184.229 330.981 186.042 cv
331.231 187.855 331.437 189.588 331.937 190.938 cv
332.436 192.289 333.228 193.258 334.241 194.535 cv
335.254 195.813 336.487 197.398 337.354 198.191 cv
338.22 198.983 338.719 198.983 339.306 198.792 cv
339.893 198.602 340.568 198.22 340.892 197.662 cv
341.215 197.104 341.185 196.37 341.111 195.298 cv
341.038 194.227 340.921 192.817 340.936 191.834 cv
340.95 190.851 341.097 190.293 341.86 188.223 cv
342.624 186.152 344.004 182.571 344.929 180.207 cv
345.854 177.844 346.323 176.698 346.206 175.612 cv
346.088 174.526 345.384 173.498 344.685 172.566 cv
343.986 171.633 343.293 170.795 342.88 169.474 cv
342.468 168.152 342.335 166.346 342.379 165.223 cv
342.424 164.1 342.644 163.66 343.788 163.455 cv
344.934 163.249 347.004 163.278 349.699 163.169 cv
352.395 163.059 355.716 162.811 357.641 163.039 cv
359.565 163.267 360.094 163.971 359.932 164.778 cv
359.771 165.586 358.919 166.496 358.537 167.186 cv
358.156 167.876 358.244 168.346 358.831 168.493 cv
359.418 168.64 360.505 168.463 361.385 168.096 cv
362.267 167.729 362.941 167.171 363.455 167.539 cv
363.97 167.906 364.321 169.197 364.483 170.813 cv
364.645 172.427 364.615 174.365 364.688 175.789 cv
364.762 177.213 364.938 178.123 364.454 178.549 cv
363.97 178.975 362.824 178.916 362.178 179.327 cv
361.532 179.738 361.385 180.619 361.635 181.5 cv
361.885 182.38 362.53 183.261 363.323 183.834 cv
364.116 184.406 365.056 184.671 365.643 185.375 cv
366.229 186.08 366.464 187.225 366.743 188.165 cv
367.022 189.104 367.346 189.838 368.05 190.616 cv
368.755 191.394 369.841 192.216 370.442 193.2 cv
371.045 194.183 371.162 195.329 371.045 196.768 cv
370.927 198.206 370.575 199.938 369.181 201.612 cv
367.786 203.285 365.349 204.9 363.91 206.163 cv
362.471 207.425 362.031 208.335 361.547 208.379 cv
361.062 208.423 360.533 207.602 359.961 207.103 cv
359.389 206.603 358.771 206.427 358.331 206.324 cv
357.892 206.222 357.627 206.192 357.392 206.632 cv
357.157 207.073 356.951 207.983 356.951 208.791 cv
356.951 209.598 357.157 210.303 357.523 211.609 cv
357.892 212.916 358.42 214.824 357.965 215.206 cv
357.51 215.587 356.071 214.442 354.603 213.429 cv
353.135 212.417 351.638 211.535 350.36 210.993 cv
349.083 210.449 348.026 210.244 346.983 210.567 cv
345.941 210.89 344.914 211.741 344.121 212.578 cv
343.328 213.415 342.771 214.237 342.976 215.191 cv
343.182 216.146 344.15 217.231 344.782 217.966 cv
345.413 218.7 345.706 219.081 345.28 219.771 cv
344.854 220.461 343.71 221.459 342.594 222.311 cv
341.478 223.163 340.392 223.867 339.026 224.131 cv
337.661 224.396 336.017 224.22 334.549 223.764 cv
333.081 223.309 331.789 222.575 330.6 221.988 cv
329.411 221.401 328.324 220.96 327.635 220.696 cv
326.945 220.432 326.651 220.344 326.078 220.549 cv
325.506 220.755 324.655 221.254 324.082 221.958 cv
323.51 222.663 323.216 223.574 323.612 224.234 cv
324.008 224.895 325.095 225.306 326.24 225.966 cv
327.385 226.627 328.589 227.537 329.587 227.919 cv
330.585 228.301 331.378 228.154 332.846 228.11 cv
334.314 228.066 336.458 228.125 337.94 228.345 cv
339.423 228.565 340.245 228.947 340.936 229.27 cv
341.625 229.592 342.183 229.857 342.521 230.488 cv
342.858 231.119 342.976 232.118 343.122 233.41 cv
343.27 234.701 343.445 236.287 343.063 237.623 cv
342.682 238.958 341.742 240.045 341.097 240.896 cv
340.451 241.748 340.098 242.364 339.613 242.628 cv
339.129 242.893 338.512 242.805 336.927 243.04 cv
335.341 243.274 332.787 243.832 331.172 244.258 cv
329.557 244.684 328.882 244.978 328.47 245.462 cv
328.06 245.946 327.913 246.622 327.898 247.312 cv
327.884 248.001 328.001 248.706 327.986 249.47 cv
327.972 250.233 327.825 251.055 327.561 251.833 cv
327.296 252.611 326.915 253.345 326.416 253.624 cv
325.916 253.903 325.3 253.727 324.507 253.551 cv
323.714 253.375 322.745 253.198 322.422 253.521 cv
322.1 253.844 322.422 254.666 322.892 255.914 cv
323.362 257.162 323.979 258.836 324.052 259.834 cv
324.125 260.833 323.655 261.155 322.687 261.801 cv
321.718 262.447 320.25 263.416 319.236 264.429 cv
318.224 265.442 317.666 266.499 317.167 267.277 cv
316.668 268.055 316.228 268.555 315.244 269.112 cv
314.26 269.67 312.734 270.287 311.75 270.992 cv
310.767 271.696 310.326 272.489 309.65 273.648 cv
308.976 274.809 308.065 276.335 307.64 277.656 cv
307.214 278.978 307.272 280.093 307.346 281.048 cv
307.419 282.002 307.507 282.794 307.404 283.309 cv
307.302 283.822 307.008 284.057 306.479 284.424 cv
305.951 284.791 305.188 285.29 304.659 286.244 cv
304.131 287.198 303.837 288.607 302.927 292.909 cv
302.017 297.211 300.49 304.404 299.712 308.206 cv
298.934 312.009 298.904 312.42 299.124 313.667 cv
299.344 314.915 299.814 317 300.123 318.123 cv
300.431 319.246 300.578 319.407 301.056 319.568 cv
301.533 319.729 302.34 319.892 303.566 320.06 cv
304.792 320.229 306.436 320.405 307.331 320.669 cv
308.227 320.934 308.374 321.286 308.696 322.108 cv
309.02 322.93 309.519 324.222 310.208 324.927 cv
310.898 325.631 311.779 325.749 312.726 325.925 cv
313.673 326.101 314.686 326.336 315.156 326.703 cv
315.625 327.069 315.552 327.569 315.53 328.259 cv
315.508 328.949 315.538 329.83 315.53 331.717 cv
315.523 333.603 315.479 336.495 315.457 338.043 cv
315.435 339.593 315.435 339.798 315.89 340.422 cv
316.345 341.046 317.254 342.088 317.915 342.858 cv
318.576 343.629 318.987 344.129 319.339 344.327 cv
319.691 344.525 319.985 344.422 321.211 344.033 cv
322.437 343.645 324.595 342.969 325.901 342.646 cv
327.208 342.323 327.663 342.353 329.292 342.367 cv
330.922 342.382 333.726 342.382 335.282 342.455 cv
336.839 342.528 337.146 342.676 338.85 342.998 cv
340.553 343.321 343.65 343.82 345.31 344.158 cv
346.968 344.496 347.188 344.672 348.105 345.237 cv
349.023 345.803 350.638 346.757 351.549 347.321 cv
352.459 347.887 352.664 348.063 353.911 349.377 cv
355.16 350.69 357.45 353.143 358.749 354.647 cv
360.048 356.152 360.356 356.71 360.643 357.025 cv
360.929 357.342 361.193 357.414 362.016 357.745 cv
362.838 358.075 364.218 358.662 365.068 358.912 cv
365.921 359.161 366.243 359.073 367.345 358.883 cv
368.445 358.691 370.324 358.398 371.396 358.295 cv
372.468 358.192 372.732 358.28 373.37 358.493 cv
374.01 358.707 375.022 359.044 375.653 359.301 cv
376.285 359.558 376.534 359.734 376.784 360.233 cv
377.033 360.732 377.283 361.555 377.562 362.024 cv
377.841 362.494 378.149 362.611 379.235 362.655 cv
380.322 362.699 382.187 362.67 383.544 362.685 cv
384.902 362.699 385.754 362.758 386.568 362.897 cv
387.383 363.037 388.16 363.257 388.989 363.514 cv
389.819 363.771 390.7 364.064 391.684 364.035 cv
392.667 364.006 393.753 363.653 395.258 363.286 cv
396.763 362.919 398.686 362.537 399.75 362.412 cv
400.814 362.288 401.021 362.42 401.438 362.904 cv
401.857 363.389 402.488 364.226 402.907 364.843 cv
403.325 365.459 403.53 365.855 403.553 367.382 cv
403.574 368.909 403.413 371.565 403.252 373.834 cv
403.09 376.102 402.929 377.98 402.95 379.147 cv
402.973 380.314 403.178 380.77 403.875 381.768 cv
404.572 382.766 405.762 384.308 406.716 385.533 cv
407.67 386.759 408.39 387.669 408.926 388.381 cv
409.461 389.094 409.813 389.607 409.96 390.261 cv
410.106 390.913 410.049 391.706 409.887 392.785 cv
409.726 393.864 409.461 395.229 409.593 396.103 cv
409.726 396.977 410.254 397.358 410.863 397.776 cv
411.473 398.195 412.162 398.65 413.16 398.738 cv
414.159 398.826 415.466 398.548 416.295 398.599 cv
417.124 398.65 417.477 399.032 417.638 399.486 cv
417.8 399.942 417.771 400.471 417.433 401.036 cv
417.095 401.601 416.449 402.203 416.222 402.694 cv
415.994 403.187 416.185 403.568 417.021 403.612 cv
417.858 403.656 419.341 403.362 420.317 403.604 cv
421.293 403.847 421.763 404.625 422.468 405.623 cv
423.173 406.622 424.112 407.84 425.228 408.537 cv
426.344 409.234 427.636 409.411 429.104 409.521 cv
430.572 409.631 432.216 409.675 433.251 409.447 cv
434.286 409.22 434.712 408.721 434.925 408.28 cv
435.137 407.84 435.137 407.458 434.954 406.276 cv
434.771 405.095 434.403 403.113 434.506 401.997 cv
434.608 400.882 435.181 400.632 436.011 400.258 cv
436.84 399.884 437.926 399.384 438.514 398.899 cv
439.101 398.415 439.188 397.945 439.232 396.947 cv
439.277 395.949 439.277 394.422 439.145 393.512 cv
439.013 392.602 438.748 392.309 438.176 391.897 cv
437.604 391.486 436.723 390.958 436.341 390.399 cv
435.959 389.842 436.076 389.255 436.076 388.065 cv
436.076 386.876 435.959 385.085 435.444 383.441 cv
434.932 381.797 434.021 380.3 433.419 379.36 cv
432.817 378.421 432.523 378.039 431.408 377.041 cv
430.292 376.042 428.354 374.428 427.444 373.355 cv
426.534 372.284 426.651 371.756 426.843 370.874 cv
427.033 369.993 427.298 368.76 426.916 367.747 cv
426.534 366.734 425.507 365.941 424.449 365.223 cv
423.393 364.503 422.307 363.856 421.763 363.152 cv
421.22 362.447 421.22 361.685 421.733 360.716 cv
422.248 359.746 423.275 358.572 424.127 357.955 cv
424.979 357.339 425.653 357.28 426.388 357.354 cv
427.121 357.427 427.914 357.633 428.751 357.456 cv
429.588 357.28 430.469 356.723 431.247 356.047 cv
432.024 355.372 432.7 354.579 433.346 353.903 cv
433.992 353.229 434.608 352.671 434.813 351.863 cv
435.02 351.056 434.814 349.999 434.594 349.037 cv
434.374 348.076 434.139 347.209 434.197 346.651 cv
434.256 346.094 434.608 345.844 435.122 345.382 cv
435.636 344.919 436.312 344.244 436.862 343.635 cv
437.412 343.025 437.838 342.482 438.132 342.02 cv
438.425 341.558 438.587 341.176 438.675 340.09 cv
438.763 339.003 438.778 337.212 438.646 335.567 cv
438.514 333.924 438.234 332.426 437.771 330.562 cv
437.31 328.697 436.663 326.466 435.959 324.587 cv
435.254 322.708 434.49 321.181 433.375 319.508 cv
432.26 317.834 430.791 316.014 429.235 314.369 cv
427.679 312.726 426.035 311.257 424.61 309.994 cv
423.187 308.731 421.982 307.675 420.603 306.839 cv
419.223 306.002 417.667 305.385 416.713 304.827 cv
415.758 304.27 415.406 303.771 415.641 302.537 cv
415.876 301.304 416.697 299.337 417.388 297.531 cv
418.078 295.726 418.636 294.081 419.149 292.818 cv
419.663 291.556 420.133 290.675 420.265 288.928 cv
420.397 287.181 420.192 284.568 419.884 283.144 cv
419.575 281.72 419.164 281.484 418.563 281.353 cv
417.961 281.221 417.168 281.191 416.596 280.736 cv
416.022 280.281 415.67 279.4 415.361 278.74 cv
415.054 278.079 414.789 277.639 414.144 277.154 cv
413.498 276.67 412.47 276.142 411.545 275.51 cv
410.62 274.879 409.798 274.145 409.593 273.602 cv
409.387 273.059 409.798 272.706 410.224 271.869 cv
410.649 271.032 411.09 269.711 411.28 268.831 cv
411.472 267.95 411.413 267.509 411.104 266.746 cv
410.797 265.982 410.238 264.896 409.313 263.729 cv
408.389 262.562 407.098 261.314 406.466 260.272 cv
405.834 259.229 405.864 258.393 405.923 257.292 cv
405.981 256.19 406.069 254.825 406.444 253.724 cv
406.818 252.623 407.479 251.787 408.11 251.207 cv
408.741 250.626 409.344 250.304 410.269 250.23 cv
411.193 250.157 412.441 250.333 413.527 250.318 cv
414.613 250.304 415.538 250.099 416.809 249.636 cv
418.078 249.173 419.693 248.454 421 248.109 cv
422.307 247.764 423.305 247.793 424.449 247.815 cv
425.595 247.837 426.886 247.853 427.752 247.684 cv
428.618 247.516 429.058 247.163 429.579 246.737 cv
430.101 246.312 430.702 245.813 431.671 245.563 cv
432.64 245.313 433.977 245.313 434.931 245.343 cv
435.885 245.372 436.457 245.431 437.33 245.776 cv
438.204 246.121 439.379 246.752 441.242 247.64 cv
443.107 248.529 445.662 249.673 446.821 250.43 cv
447.981 251.186 447.746 251.553 447.57 252.257 cv
447.394 252.962 447.276 254.004 447.255 254.68 cv
447.232 255.354 447.306 255.663 447.665 255.957 cv
448.025 256.25 448.671 256.529 449.178 256.742 cv
449.685 256.955 450.051 257.102 450.514 257.183 cv
450.977 257.263 451.534 257.278 452.121 257.263 cv
452.708 257.249 453.325 257.204 454.022 256.757 cv
454.72 256.309 455.497 255.458 456.092 255.01 cv
456.687 254.562 457.098 254.518 457.949 254.467 cv
458.801 254.415 460.093 254.356 461.34 254.334 cv
462.588 254.313 463.792 254.327 464.497 254.562 cv
465.201 254.797 465.407 255.252 465.825 256.037 cv
466.243 256.823 466.875 257.939 467.132 258.871 cv
467.389 259.803 467.271 260.552 467.205 261.514 cv
467.139 262.475 467.124 263.649 467.103 264.42 cv
467.08 265.191 467.051 265.558 467.308 266.057 cv
467.564 266.556 468.107 267.188 469.392 268.56 cv
470.677 269.933 472.702 272.047 473.929 273.368 cv
475.154 274.689 475.58 275.218 475.771 276.194 cv
475.962 277.17 475.918 278.595 476.104 279.442 cv
476.292 280.29 476.71 280.562 477.18 280.727 cv
477.649 280.892 478.171 280.95 480.075 280.976 cv
481.98 281.001 485.269 280.994 487.452 281.002 cv
489.637 281.009 490.715 281.031 491.416 281.021 cv
492.117 281.009 492.439 280.965 492.781 280.697 cv
493.122 280.429 493.482 279.938 494.105 279.009 cv
494.729 278.08 495.618 276.715 496.125 275.926 cv
496.631 275.137 496.756 274.924 496.818 274.568 cv
496.881 274.212 496.881 273.713 496.858 272.99 cv
496.836 272.268 496.792 271.321 496.821 270.612 cv
496.851 269.904 496.953 269.435 497.188 268.407 cv
497.423 267.379 497.79 265.793 497.988 264.685 cv
498.187 263.577 498.216 262.945 497.995 261.925 cv
497.775 260.905 497.306 259.496 496.968 257.917 cv
496.63 256.339 496.425 254.592 496.388 253.374 cv
496.351 252.155 496.483 251.466 496.571 250.681 cv
496.659 249.895 496.703 249.014 496.872 248.435 cv
497.041 247.855 497.335 247.576 498.187 247.605 cv
499.038 247.635 500.446 247.972 501.673 248.42 cv
502.898 248.868 503.94 249.425 504.77 250.306 cv
505.6 251.187 506.216 252.391 506.854 253.719 cv
507.493 255.048 508.154 256.501 508.624 257.463 cv
509.094 258.424 509.373 258.895 510.063 259.166 cv
510.752 259.438 511.854 259.511 512.918 259.569 cv
513.982 259.628 515.01 259.672 515.671 259.738 cv
516.331 259.804 516.625 259.893 516.911 260.146 cv
517.197 260.399 517.477 260.817 517.909 261.25 cv
518.343 261.683 518.93 262.131 519.157 262.545 cv
519.385 262.96 519.253 263.342 519.201 264.153 cv
519.149 264.964 519.179 266.205 519.22 266.976 cv
519.26 267.747 519.312 268.047 519.469 268.242 cv
519.627 268.437 519.892 268.524 520.725 268.572 cv
521.558 268.62 522.959 268.627 524.188 268.635 cv
525.419 268.642 526.476 268.649 527.165 268.697 cv
527.855 268.745 528.179 268.833 528.505 269.057 cv
528.832 269.28 529.162 269.64 529.639 270.381 cv
530.116 271.123 530.739 272.246 531.293 273.263 cv
531.848 274.279 532.332 275.189 532.786 275.71 cv
533.242 276.231 533.668 276.363 534.416 276.547 cv
535.165 276.73 536.236 276.966 536.831 277.215 cv
537.426 277.465 537.543 277.729 537.58 278.903 cv
537.617 280.078 537.572 282.163 537.536 283.689 cv
537.499 285.216 537.47 286.185 537.521 286.827 cv
537.572 287.47 537.704 287.785 538.009 288.189 cv
538.313 288.593 538.791 289.084 539.176 289.36 cv
539.562 289.635 539.855 289.694 540.651 289.687 cv
541.448 289.679 542.747 289.605 543.529 289.632 cv
544.311 289.657 544.575 289.782 545.276 290.226 cv
545.977 290.67 547.115 291.434 547.826 291.819 cv
548.539 292.204 548.825 292.211 549.178 292.039 cv
549.529 291.866 549.948 291.515 550.454 291.074 cv
550.961 290.634 551.556 290.104 552.113 289.848 cv
552.671 289.591 553.192 289.605 553.85 289.613 cv
554.507 289.62 555.299 289.62 555.853 289.628 cv
556.407 289.635 556.723 289.65 557.211 290.105 cv
557.698 290.561 558.359 291.456 558.909 292.197 cv
559.46 292.938 559.9 293.525 560.095 293.937 cv
560.29 294.348 560.238 294.583 560.08 294.95 cv
559.923 295.316 559.658 295.816 559.431 296.213 cv
559.203 296.609 559.013 296.902 559.067 297.064 cv
559.122 297.226 559.424 297.255 559.948 297.244 cv
560.473 297.233 561.222 297.182 561.904 296.892 cv
562.587 296.603 563.204 296.073 563.992 295.424 cv
564.782 294.774 565.743 294.004 566.407 293.475 cv
567.072 292.946 567.439 292.66 567.821 292.491 cv
568.202 292.322 568.6 292.271 569.153 292.278 cv
569.707 292.286 570.419 292.352 571.321 292.281 cv
572.225 292.212 573.317 292.007 574.313 291.838 cv
575.308 291.669 576.202 291.537 577.047 291.592 cv
577.891 291.647 578.684 291.889 579.521 292.054 cv
580.357 292.22 581.237 292.307 581.935 292.461 cv
582.632 292.615 583.146 292.835 583.271 293.313 cv
583.396 293.789 583.131 294.523 582.624 295.529 cv
582.118 296.535 581.37 297.812 580.709 299.03 cv
580.048 300.249 579.476 301.408 578.778 302.429 cv
578.081 303.449 577.259 304.33 576.643 305.027 cv
576.026 305.725 575.614 306.238 575.365 306.723 cv
575.115 307.207 575.027 307.662 574.896 308.389 cv
574.763 309.115 574.587 310.114 574.499 310.921 cv
574.411 311.729 574.411 312.346 574.646 313.028 cv
574.881 313.711 575.351 314.459 575.901 314.893 cv
576.451 315.325 577.083 315.443 577.751 315.2 cv
578.419 314.959 579.123 314.356 579.468 313.864 cv
579.813 313.373 579.799 312.991 579.696 312.154 cv
579.593 311.317 579.402 310.025 579.351 309.108 cv
579.3 308.19 579.388 307.647 579.718 307.067 cv
580.048 306.488 580.621 305.871 581.26 305.438 cv
581.898 305.005 582.603 304.756 583.109 304.293 cv
583.616 303.831 583.924 303.155 584.511 302.054 cv
585.099 300.953 585.965 299.427 586.515 298.553 cv
587.065 297.68 587.3 297.459 587.748 297.32 cv
588.196 297.181 588.856 297.122 589.261 297.202 cv
589.664 297.283 589.811 297.503 590.435 298.45 cv
591.059 299.397 592.159 301.07 592.835 301.894 cv
593.511 302.715 593.76 302.686 594.252 301.966 cv
594.743 301.247 595.478 299.838 596.014 298.92 cv
596.549 298.003 596.887 297.577 597.231 297.356 cv
597.577 297.137 597.93 297.122 598.369 297.239 cv
598.81 297.356 599.339 297.606 600.124 298.017 cv
600.909 298.429 601.951 299.001 602.788 299.353 cv
603.625 299.705 604.256 299.838 604.961 299.911 cv
605.665 299.984 606.443 299.999 607.009 300.329 cv
607.574 300.66 607.926 301.306 609.211 303.266 cv
610.495 305.226 612.712 308.499 613.82 310.319 cv
614.929 312.14 614.929 312.507 614.921 313.138 cv
614.914 313.77 614.899 314.665 614.921 315.369 cv
614.943 316.074 615.002 316.588 614.937 317.264 cv
614.87 317.938 614.679 318.775 614.121 320.757 cv
613.563 322.739 612.639 325.866 612.11 327.569 cv
611.581 329.271 611.449 329.551 611.053 329.977 cv
610.657 330.402 609.996 330.975 609.299 331.643 cv
608.602 332.312 607.868 333.074 607.134 333.677 cv
606.4 334.278 605.666 334.719 605.232 335.012 cv
604.8 335.306 604.668 335.453 604.212 336.305 cv
603.758 337.156 602.979 338.712 602.575 339.681 cv
602.172 340.649 602.143 341.031 602.349 342.463 cv
602.554 343.894 602.994 346.375 603.06 347.755 cv
603.126 349.135 602.818 349.414 601.974 350.016 cv
601.13 350.617 599.75 351.542 598.898 352.327 cv
598.047 353.112 597.725 353.759 597.284 354.404 cv
596.844 355.051 596.286 355.696 594.172 357.752 cv
592.058 359.807 588.388 363.271 586.391 364.959 cv
584.395 366.647 584.071 366.56 583.103 366.442 cv
582.134 366.325 580.519 366.178 579.447 366.207 cv
578.375 366.236 577.847 366.442 577.01 367.073 cv
576.174 367.705 575.028 368.762 573.854 369.628 cv
572.68 370.494 571.476 371.169 569.714 372.021 cv
567.952 372.872 565.633 373.9 563.644 374.788 cv
561.654 375.676 559.996 376.425 558.623 377.239 cv
557.25 378.055 556.164 378.936 555.319 379.633 cv
554.476 380.33 553.874 380.844 553.162 380.962 cv
552.45 381.079 551.628 380.8 550.783 380.653 cv
549.939 380.506 549.073 380.491 548.317 380.741 cv
547.562 380.99 546.915 381.505 546.255 382.063 cv
545.594 382.62 544.919 383.223 544.698 384.125 cv
544.479 385.028 544.713 386.231 544.882 387.465 cv
545.051 388.698 545.154 389.96 545.337 391.076 cv
545.521 392.191 545.785 393.16 545.785 393.997 cv
545.785 394.834 545.521 395.539 545.125 396.243 cv
544.729 396.948 544.2 397.652 543.51 398.343 cv
542.819 399.032 541.969 399.708 541.176 400.501 cv
540.383 401.293 539.648 402.203 538.958 403.23 cv
538.269 404.259 537.623 405.404 536.933 406.607 cv
536.243 407.812 535.509 409.074 534.995 410.087 cv
534.481 411.1 534.188 411.863 534.041 412.553 cv
533.895 413.243 533.895 413.86 533.865 414.976 cv
533.835 416.091 533.777 417.706 533.263 419.525 cv
532.749 421.347 531.78 423.372 531.075 425.691 cv
530.371 428.011 529.931 430.624 529.52 432.591 cv
529.108 434.559 528.727 435.88 528.624 437.23 cv
528.521 438.581 528.697 439.961 528.858 441.18 cv
529.021 442.398 529.167 443.455 529.52 443.572 cv
529.872 443.689 530.43 442.868 531.09 442.075 cv
531.751 441.282 532.515 440.519 532.853 439.623 cv
533.189 438.728 533.102 437.7 533.131 436.496 cv
533.16 435.293 533.307 433.912 533.601 432.181 cv
533.895 430.448 534.335 428.363 534.819 426.719 cv
535.304 425.075 535.832 423.871 536.39 423.078 cv
536.948 422.286 537.535 421.904 538.122 421.449 cv
538.71 420.994 539.297 420.465 539.723 419.761 cv
540.148 419.056 540.412 418.175 540.471 417.045 cv
540.53 415.914 540.383 414.534 540.691 413.404 cv
541 412.273 541.764 411.393 542.835 410.38 cv
543.906 409.367 545.286 408.222 546.578 406.681 cv
547.87 405.139 549.073 403.201 550.718 400.852 cv
552.362 398.504 554.446 395.743 555.93 393.864 cv
557.412 391.985 558.293 390.987 559.306 390.518 cv
560.319 390.048 561.464 390.106 562.228 389.9 cv
562.991 389.695 563.372 389.226 563.9 388.741 cv
564.43 388.257 565.104 387.757 566.396 387.522 cv
567.688 387.287 569.597 387.317 571.271 387.698 cv
572.944 388.08 574.383 388.814 575.425 389.651 cv
576.468 390.488 577.113 391.428 577.539 392.44 cv
577.965 393.453 578.171 394.539 578.199 395.729 cv
578.229 396.918 578.082 398.21 577.671 399.398 cv
577.26 400.588 576.585 401.674 576.218 402.569 cv
575.852 403.465 575.792 404.17 575.719 405.08 cv
575.646 405.99 575.558 407.106 575.646 408.397 cv
575.733 409.689 575.998 411.158 576.57 412.332 cv
577.143 413.507 578.023 414.388 578.978 415.194 cv
579.933 416.002 580.96 416.736 581.973 417.353 cv
582.985 417.969 583.983 418.468 585.129 419.011 cv
586.273 419.554 587.565 420.141 588.695 420.596 cv
589.826 421.051 590.795 421.374 591.72 421.653 cv
592.645 421.932 593.525 422.167 594.098 422.798 cv
594.67 423.429 594.935 424.457 594.597 425.293 cv
594.26 426.13 593.32 426.776 592.586 427.584 cv
591.852 428.391 591.323 429.36 590.956 430.71 cv
590.589 432.062 590.384 433.793 590.075 435.026 cv
589.768 436.26 589.356 436.994 588.021 437.89 cv
586.685 438.785 584.424 439.842 582.823 440.943 cv
581.223 442.044 580.283 443.189 579.917 444.275 cv
579.55 445.361 579.755 446.389 579.477 447.035 cv
579.197 447.682 578.434 447.945 577.538 448.136 cv
576.644 448.327 575.615 448.444 574.72 448.048 cv
573.824 447.652 573.061 446.741 572.063 445.641 cv
571.064 444.539 569.831 443.248 568.906 442.602 cv
567.981 441.956 567.365 441.956 566.777 441.633 cv
566.19 441.31 565.633 440.664 564.972 440.048 cv
564.312 439.431 563.548 438.844 562.814 438.065 cv
562.08 437.287 561.375 436.318 560.905 435.262 cv
560.436 434.204 560.201 433.06 560.01 431.974 cv
559.819 430.887 559.672 429.859 559.291 429.271 cv
558.909 428.685 558.292 428.538 557.455 428.244 cv
556.618 427.95 555.562 427.511 554.813 427.188 cv
554.064 426.864 553.624 426.659 553.081 426.864 cv
552.538 427.07 551.892 427.687 550.82 428.406 cv
549.749 429.125 548.251 429.947 547.326 430.402 cv
546.401 430.857 546.049 430.945 545.652 430.71 cv
545.256 430.476 544.816 429.918 544.39 429.815 cv
543.965 429.712 543.553 430.064 542.922 430.666 cv
542.291 431.269 541.439 432.12 541.058 433.06 cv
540.676 433.999 540.764 435.026 540.838 436.744 cv
540.911 438.462 540.97 440.869 540.97 442.514 cv
540.97 444.158 540.911 445.039 540.441 446.375 cv
539.972 447.711 539.091 449.502 538.664 450.646 cv
538.239 451.792 538.269 452.291 538.591 452.98 cv
538.914 453.671 539.531 454.552 539.883 455.271 cv
540.235 455.99 540.323 456.548 540.147 457.253 cv
539.971 457.958 539.531 458.81 538.899 459.719 cv
538.269 460.63 537.446 461.599 536.58 462.391 cv
535.714 463.184 534.804 463.801 533.967 464.314 cv
533.13 464.828 532.367 465.239 532.073 466.076 cv
531.779 466.912 531.956 468.175 531.794 468.762 cv
531.633 469.35 531.134 469.262 530.18 469.364 cv
529.226 469.467 527.815 469.761 526.465 470.055 cv
525.114 470.348 523.822 470.642 522.545 470.788 cv
521.269 470.935 520.006 470.935 518.758 471.022 cv
517.511 471.11 516.277 471.287 515.103 471.874 cv
513.929 472.461 512.813 473.46 511.785 474.517 cv
510.758 475.573 509.818 476.689 508.967 477.364 cv
508.115 478.04 507.352 478.275 506.559 478.29 cv
505.767 478.304 504.944 478.099 504.269 478.26 cv
503.594 478.422 503.064 478.95 502.521 479.669 cv
501.979 480.389 501.421 481.299 500.774 482.063 cv
500.129 482.826 499.396 483.442 498.793 484.074 cv
498.191 484.705 497.722 485.352 497.267 485.894 cv
496.812 486.438 496.371 486.878 496.238 487.626 cv
496.106 488.375 496.282 489.432 496.371 490.342 cv
496.459 491.252 496.459 492.016 495.989 492.735 cv
495.52 493.454 494.58 494.13 493.743 494.746 cv
492.906 495.363 492.172 495.921 491.482 496.038 cv
490.792 496.155 490.146 495.833 489.412 495.803 cv
488.678 495.774 487.856 496.038 487.269 496.523 cv
486.682 497.008 486.329 497.712 486.314 498.46 cv
486.3 499.209 486.623 500.002 486.55 500.56 cv
486.476 501.118 486.007 501.44 485.419 501.543 cv
484.832 501.646 484.127 501.528 483.29 501.47 cv
482.453 501.411 481.484 501.411 480.824 501.47 cv
480.163 501.528 479.812 501.646 479.209 502.087 cv
478.607 502.527 477.756 503.29 477.095 503.907 cv
476.435 504.523 475.965 504.993 475.378 505.096 cv
474.79 505.198 474.086 504.935 473.381 504.847 cv
472.677 504.759 471.972 504.847 471.032 505.463 cv
470.093 506.08 468.918 507.225 467.45 508.663 cv
465.981 510.102 464.221 511.835 463.039 512.936 cv
461.856 514.036 461.255 514.506 460.896 514.909 cv
460.536 515.313 460.418 515.651 460.315 516.305 cv
460.213 516.958 460.125 517.927 460.33 518.44 cv
460.536 518.954 461.035 519.013 461.916 519.021 cv
462.797 519.027 464.06 518.983 464.889 518.896 cv
465.718 518.808 466.114 518.675 466.694 518.059 cv
467.274 517.442 468.038 516.341 468.845 516.099 cv
469.653 515.856 470.505 516.473 470.798 517.192 cv
471.092 517.911 470.827 518.734 470.46 519.409 cv
470.093 520.085 469.623 520.613 469.153 521.164 cv
468.684 521.714 468.214 522.286 467.817 522.676 cv
467.421 523.064 467.099 523.271 466.078 523.63 cv
465.058 523.989 463.34 524.504 462.069 524.673 cv
460.8 524.841 459.978 524.665 459.325 524.584 cv
458.671 524.504 458.187 524.519 457.761 524.65 cv
457.335 524.782 456.969 525.032 456.656 525.373 cv
456.345 525.714 456.088 526.147 455.747 526.349 cv
455.406 526.551 454.98 526.521 454.481 526.514 cv
453.982 526.507 453.409 526.521 452.925 526.793 cv
452.44 527.064 452.044 527.593 451.604 528.019 cv
451.163 528.444 450.679 528.768 450.224 529.061 cv
449.769 529.354 449.343 529.619 448.808 529.986 cv
448.271 530.353 447.625 530.822 447.082 531.212 cv
446.539 531.601 446.099 531.909 445.57 532.063 cv
445.042 532.218 444.425 532.218 443.823 532.275 cv
443.221 532.335 442.634 532.452 442.201 532.665 cv
441.769 532.878 441.489 533.187 441.181 533.465 cv
440.872 533.744 440.535 533.994 440.285 534.573 cv
440.035 535.153 439.874 536.063 439.617 536.694 cv
439.36 537.326 439.008 537.679 438.567 537.972 cv
438.127 538.266 437.599 538.5 437.114 538.685 cv
436.63 538.867 436.189 539 435.801 539.315 cv
435.411 539.631 435.073 540.13 434.42 540.606 cv
433.767 541.082 432.798 541.534 431.946 541.498 cv
431.094 541.461 430.36 540.936 430.022 540.356 cv
429.686 539.777 429.744 539.146 429.994 538.515 cv
430.243 537.884 430.684 537.252 431.204 536.68 cv
431.726 536.107 432.327 535.594 432.819 535.16 cv
433.311 534.728 433.692 534.375 433.803 533.986 cv
433.913 533.597 433.751 533.171 433.598 532.319 cv
433.443 531.468 433.297 530.191 433.348 529.317 cv
433.399 528.444 433.649 527.975 434.061 527.417 cv
434.472 526.858 435.044 526.213 435.829 525.347 cv
436.614 524.48 437.613 523.394 438.354 522.638 cv
439.096 521.882 439.58 521.456 439.675 521.022 cv
439.771 520.59 439.477 520.149 439.242 519.68 cv
439.008 519.21 438.831 518.711 438.831 517.889 cv
438.831 517.066 439.008 515.922 439.103 514.813 cv
439.198 513.705 439.212 512.633 439.227 511.898 cv
439.241 511.165 439.256 510.769 439.007 509.586 cv
438.758 508.404 438.243 506.438 437.92 505.087 cv
437.598 503.736 437.466 503.002 437.399 502.231 cv
437.333 501.461 437.333 500.653 437.604 499.883 cv
437.876 499.112 438.42 498.378 438.978 497.886 cv
439.535 497.395 440.107 497.145 440.724 497.167 cv
441.341 497.188 442.001 497.482 442.809 497.842 cv
443.616 498.202 444.57 498.628 444.981 499.119 cv
445.393 499.611 445.261 500.169 445.282 500.639 cv
445.305 501.109 445.48 501.49 445.76 501.718 cv
446.039 501.945 446.42 502.019 447.631 502.122 cv
448.843 502.225 450.883 502.356 452.292 502.386 cv
453.702 502.415 454.479 502.342 454.84 501.813 cv
455.199 501.285 455.141 500.302 455.177 499.193 cv
455.214 498.085 455.346 496.852 455.28 495.743 cv
455.214 494.635 454.95 493.651 454.473 492.902 cv
453.995 492.153 453.306 491.64 452.256 490.935 cv
451.206 490.23 449.797 489.335 448.806 488.66 cv
447.815 487.984 447.242 487.529 446.766 487.323 cv
446.288 487.118 445.907 487.162 445.261 487.229 cv
444.615 487.295 443.705 487.383 443.125 487.104 cv
442.545 486.824 442.295 486.179 441.973 485.452 cv
441.649 484.726 441.253 483.918 440.739 483.484 cv
440.226 483.052 439.594 482.993 437.752 483.022 cv
435.909 483.052 432.855 483.169 430.074 483.228 cv
427.292 483.286 424.781 483.286 423.174 483.286 cv
421.566 483.286 420.861 483.286 420.297 483.059 cv
419.731 482.832 419.306 482.376 418.88 481.873 cv
418.454 481.371 418.028 480.82 417.541 480.523 cv
417.053 480.226 416.502 480.182 415.907 480.138 cv
415.313 480.094 414.675 480.05 414.212 480.067 cv
413.749 480.086 413.463 480.167 413.114 480.512 cv
412.766 480.857 412.354 481.467 411.958 482.054 cv
411.563 482.641 411.181 483.206 410.758 483.474 cv
410.336 483.742 409.873 483.713 409.437 483.698 cv
409 483.684 408.589 483.684 408.347 483.68 cv
408.104 483.676 408.031 483.669 407.958 483.599 cv
407.885 483.529 407.812 483.396 407.833 482.989 cv
407.855 482.582 407.973 481.899 407.958 481.374 cv
407.943 480.85 407.796 480.482 407.345 480.138 cv
406.894 479.793 406.138 479.47 405.492 479.209 cv
404.846 478.948 404.31 478.751 403.668 478.094 cv
403.026 477.437 402.277 476.321 401.888 475.484 cv
401.499 474.647 401.47 474.09 401.462 473.539 cv
401.455 472.989 401.47 472.445 401.338 471.932 cv
401.205 471.418 400.926 470.934 400.009 469.715 cv
399.092 468.497 397.535 466.544 396.441 465.245 cv
395.349 463.946 394.717 463.3 394.254 463.006 cv
393.792 462.713 393.498 462.771 392.64 462.859 cv
391.781 462.947 390.356 463.065 389.395 463.102 cv
388.434 463.139 387.935 463.095 387.354 462.617 cv
386.774 462.141 386.114 461.229 385.666 460.481 cv
385.219 459.732 384.983 459.146 384.991 458.551 cv
384.998 457.956 385.248 457.354 385.226 456.87 cv
385.204 456.386 384.91 456.019 384.286 455.644 cv
383.662 455.27 382.708 454.888 381.864 454.507 cv
381.02 454.125 380.286 453.743 379.39 453.581 cv
378.495 453.42 377.438 453.479 375.573 453.597 cv
373.709 453.714 371.037 453.89 369.173 453.992 cv
367.309 454.096 366.251 454.125 365.532 454.161 cv
364.813 454.198 364.431 454.242 364.152 454.595 cv
363.873 454.947 363.697 455.607 363.381 455.9 cv
363.065 456.194 362.611 456.121 362.031 456.077 cv
361.451 456.033 360.746 456.019 360.255 456.077 cv
359.763 456.136 359.483 456.269 359.322 456.701 cv
359.161 457.134 359.116 457.868 358.999 458.434 cv
358.882 458.998 358.691 459.396 358.155 459.806 cv
357.619 460.217 356.738 460.643 355.726 461.12 cv
354.713 461.597 353.567 462.126 352.378 462.771 cv
351.189 463.417 349.956 464.181 349.002 464.548 cv
348.048 464.915 347.372 464.885 345.919 464.915 cv
344.466 464.944 342.234 465.032 339.958 465.062 cv
337.683 465.091 335.364 465.062 333.808 464.9 cv
332.251 464.739 331.458 464.445 330.519 463.857 cv
329.58 463.271 328.493 462.39 327.363 462.053 cv
326.232 461.715 325.058 461.92 322.694 461.715 cv
320.331 461.509 316.778 460.893 314.092 460.54 cv
311.405 460.188 309.584 460.1 308.542 459.791 cv
307.5 459.483 307.236 458.955 306.649 458.396 cv
306.062 457.839 305.151 457.252 303.977 456.899 cv
302.802 456.547 301.364 456.43 299.808 456.327 cv
298.251 456.225 296.578 456.136 293.334 456.136 cv
290.089 456.136 285.274 456.224 276.613 456.092 cv
267.951 455.96 255.444 455.607 246.107 455.021 cv
236.771 454.433 230.604 453.61 222.619 452.407 cv
214.632 451.203 204.826 449.617 198.671 448.553 cv
192.516 447.488 190.012 446.945 185.414 446.027 cv
185.414 446.027 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
ef
2.9999 lw
1 lc
1 lj
22.9256 ml
[] 0 dsh
true sadj
20.2119 363.369 mo
21.856 363.956 24.6157 367.128 27.6401 370.387 cv
30.6641 373.646 33.9526 376.993 35.832 379.254 cv
37.7104 381.515 38.1807 382.689 38.4448 384.01 cv
38.709 385.331 38.7676 386.799 38.5327 388.15 cv
38.2979 389.5 37.7695 390.733 37.5933 391.702 cv
37.417 392.672 37.5933 393.376 38.3271 394.315 cv
39.0615 395.256 40.3535 396.43 41.4692 397.78 cv
42.585 399.131 43.5244 400.658 44.2583 402.097 cv
44.9922 403.535 45.5205 404.886 45.7266 406.031 cv
45.9316 407.176 45.8145 408.115 45.4619 408.908 cv
45.1099 409.701 44.5225 410.347 43.5537 410.875 cv
42.585 411.403 41.2344 411.815 40.1772 412.05 cv
39.1201 412.285 38.3564 412.344 37.7988 411.962 cv
37.2407 411.58 36.8887 410.758 36.8301 409.789 cv
36.771 408.82 37.0059 407.704 36.8008 406.971 cv
36.5952 406.236 35.9487 405.884 35.0098 404.915 cv
34.0703 403.946 32.8369 402.36 31.8677 400.775 cv
30.8989 399.189 30.1943 397.604 29.7246 395.96 cv
29.2549 394.315 29.02 392.613 28.6094 391.468 cv
28.1978 390.322 27.6104 389.735 26.73 389.09 cv
25.8486 388.443 24.6748 387.739 23.9995 387.122 cv
23.3237 386.506 23.1475 385.978 23.4121 385.097 cv
23.6763 384.216 24.3809 382.982 24.8799 381.866 cv
25.3789 380.751 25.6729 379.753 25.3496 378.637 cv
25.0269 377.521 24.0874 376.288 22.9717 374.938 cv
21.856 373.587 20.564 372.119 19.6245 370.738 cv
18.6851 369.358 18.0977 368.067 18.0684 366.423 cv
18.0386 364.778 18.5674 362.782 20.2119 363.369 cv
cp
9.68604 322.896 mo
9.64209 321.207 9.52441 319.856 9.71533 318.813 cv
9.90625 317.771 10.4058 317.038 10.8755 316.642 cv
11.3452 316.245 11.7856 316.187 12.3726 316.172 cv
12.96 316.157 13.6938 316.187 14.8389 315.335 cv
15.9839 314.483 17.54 312.751 18.3184 311.444 cv
19.0962 310.139 19.0962 309.257 18.8032 308.758 cv
18.5088 308.259 17.9219 308.142 17.2173 307.833 cv
16.5127 307.525 15.6904 307.025 14.9565 306.614 cv
14.2222 306.204 13.5762 305.881 12.7837 305.029 cv
11.9907 304.178 11.0513 302.798 10.3467 301.814 cv
9.64209 300.831 9.17236 300.243 8.68799 300.009 cv
8.20361 299.773 7.7041 299.892 6.97021 300.199 cv
6.23633 300.508 5.26709 301.007 4.70996 301.623 cv
4.15137 302.24 4.00488 302.974 4.06348 304.735 cv
4.12207 306.497 4.38672 309.287 4.38672 310.931 cv
4.38672 312.575 4.12207 313.074 3.5791 313.529 cv
3.03564 313.984 2.21387 314.396 1.81738 314.807 cv
1.4209 315.218 1.45068 315.629 1.61182 316.187 cv
1.77344 316.744 2.06738 317.449 2.50781 318.241 cv
2.94775 319.034 3.53516 319.915 3.88721 321.017 cv
4.23975 322.117 4.35693 323.438 4.31689 325.024 cv
4.27637 326.609 4.07861 328.459 4.03809 330.302 cv
3.99756 332.145 4.11523 333.979 5.04004 334.259 cv
5.96484 334.537 7.69727 333.26 8.604 332.063 cv
9.51025 330.867 9.59082 329.751 9.64551 328.181 cv
9.70068 326.609 9.72998 324.584 9.68604 322.896 cv
9.68604 322.896 li
cp
613.456 435.789 mo
612.59 435.877 611.327 436.229 610.432 436.758 cv
609.536 437.287 609.008 437.991 608.361 438.975 cv
607.716 439.959 606.952 441.221 606.248 442.41 cv
605.543 443.6 604.897 444.715 604.53 445.757 cv
604.163 446.8 604.075 447.769 604.178 449.148 cv
604.28 450.528 604.574 452.319 604.472 453.479 cv
604.369 454.639 603.869 455.168 603.238 455.593 cv
602.607 456.019 601.844 456.342 601.388 457.018 cv
600.934 457.692 600.786 458.72 600.463 459.439 cv
600.141 460.159 599.642 460.57 598.379 460.981 cv
597.116 461.393 595.091 461.803 593.77 461.847 cv
592.448 461.891 591.831 461.568 590.848 460.805 cv
589.864 460.041 588.514 458.838 587.794 457.766 cv
587.075 456.694 586.987 455.755 586.973 454.536 cv
586.958 453.318 587.017 451.82 587.266 450.353 cv
587.516 448.885 587.956 447.445 588.426 446.242 cv
588.896 445.038 589.395 444.069 590.011 443.13 cv
590.628 442.189 591.361 441.28 592.478 440.487 cv
593.593 439.694 595.091 439.019 596.734 438.152 cv
598.379 437.286 600.17 436.229 601.535 435.422 cv
602.9 434.614 603.84 434.057 604.251 433.264 cv
604.662 432.472 604.545 431.444 603.929 431.106 cv
603.312 430.769 602.195 431.121 601.139 431.591 cv
600.082 432.061 599.084 432.647 598.232 433.132 cv
597.381 433.617 596.676 433.998 596.162 433.998 cv
595.648 433.998 595.325 433.617 595.164 432.897 cv
595.003 432.178 595.003 431.121 595.517 429.902 cv
596.03 428.684 597.058 427.305 598.232 425.909 cv
599.406 424.515 600.728 423.105 602.063 422.166 cv
603.399 421.227 604.75 420.757 606.292 420.39 cv
607.833 420.022 609.565 419.758 610.799 419.405 cv
612.031 419.053 612.766 418.613 613.529 417.952 cv
614.293 417.292 615.085 416.411 615.907 416.381 cv
616.729 416.353 617.581 417.174 618.286 417.718 cv
618.99 418.261 619.548 418.525 620.12 418.363 cv
620.693 418.202 621.28 417.614 621.896 417.277 cv
622.514 416.939 623.159 416.852 624.172 416.852 cv
625.186 416.852 626.565 416.939 627.446 417.248 cv
628.327 417.556 628.709 418.085 628.855 418.613 cv
629.002 419.142 628.914 419.67 628.298 420.213 cv
627.681 420.756 626.536 421.313 625.597 421.887 cv
624.656 422.459 623.923 423.046 623.453 423.678 cv
622.983 424.309 622.778 424.984 622.484 425.85 cv
622.19 426.717 621.809 427.773 621.148 428.859 cv
620.487 429.946 619.548 431.062 618.755 432.045 cv
617.963 433.029 617.316 433.881 616.759 434.526 cv
616.201 435.173 615.731 435.612 615.261 435.745 cv
614.792 435.877 614.322 435.701 613.456 435.789 cv
613.456 435.789 li
cp
586.943 409.342 mo
586.459 409.761 586.635 410.421 586.906 411.214 cv
587.178 412.007 587.545 412.932 588.161 413.98 cv
588.778 415.031 589.644 416.205 590.415 416.91 cv
591.186 417.614 591.86 417.85 592.991 418.055 cv
594.121 418.261 595.707 418.437 597.557 418.378 cv
599.406 418.319 601.521 418.025 603.15 417.732 cv
604.78 417.438 605.925 417.145 607.069 416.528 cv
608.215 415.911 609.36 414.973 609.947 414.003 cv
610.534 413.034 610.563 412.036 610.446 411.199 cv
610.329 410.362 610.064 409.688 609.551 409.335 cv
609.037 408.982 608.273 408.953 607.716 409.254 cv
607.158 409.556 606.806 410.187 606.351 410.723 cv
605.896 411.258 605.338 411.698 604.222 411.992 cv
603.105 412.285 601.433 412.433 599.936 412.697 cv
598.438 412.961 597.116 413.343 596.133 413.27 cv
595.149 413.195 594.503 412.667 594.181 412.116 cv
593.857 411.566 593.857 410.994 593.167 410.399 cv
592.478 409.805 591.098 409.188 589.835 408.968 cv
588.572 408.748 587.428 408.924 586.943 409.342 cv
586.943 409.342 li
cp
618.329 393.656 mo
617.581 394.434 617.434 396.372 617.066 398.09 cv
616.7 399.807 616.112 401.305 615.775 402.802 cv
615.438 404.299 615.35 405.797 615.481 407.103 cv
615.613 408.41 615.966 409.525 617.052 410.245 cv
618.139 410.964 619.959 411.287 621.838 411.654 cv
623.717 412.021 625.655 412.433 626.829 412.301 cv
628.004 412.168 628.415 411.493 629.031 409.893 cv
629.647 408.292 630.47 405.768 630.661 404.05 cv
630.852 402.332 630.411 401.422 629.516 400.835 cv
628.62 400.248 627.27 399.983 626.462 399.777 cv
625.655 399.572 625.391 399.426 625.067 399.103 cv
624.744 398.779 624.363 398.28 624.04 397.796 cv
623.717 397.312 623.453 396.842 623.086 396.151 cv
622.719 395.462 622.249 394.552 621.339 393.905 cv
620.429 393.26 619.078 392.878 618.329 393.656 cv
618.329 393.656 li
cp
567.521 379.24 mo
567.843 378.609 568.343 377.846 569.399 377.038 cv
570.456 376.23 572.071 375.379 573.612 374.792 cv
575.154 374.205 576.622 373.882 578.12 373.867 cv
579.617 373.853 581.144 374.146 583.845 374.513 cv
586.546 374.881 590.422 375.32 592.683 375.938 cv
594.943 376.554 595.589 377.347 595.457 377.978 cv
595.325 378.609 594.415 379.079 592.756 379.593 cv
591.098 380.106 588.689 380.664 586.341 381.236 cv
583.992 381.81 581.701 382.396 580.321 382.22 cv
578.941 382.044 578.472 381.104 577.269 380.723 cv
576.064 380.341 574.126 380.518 572.276 380.635 cv
570.427 380.752 568.665 380.811 567.857 380.591 cv
567.051 380.371 567.197 379.871 567.521 379.24 cv
567.521 379.24 li
cp
616.61 352.038 mo
616.786 355.149 616.903 359.025 617.286 361.991 cv
617.667 364.957 618.313 367.012 618.842 370.036 cv
619.37 373.06 619.781 377.054 620.516 379.52 cv
621.249 381.986 622.307 382.926 623.804 383.277 cv
625.301 383.63 627.239 383.396 628.912 382.661 cv
630.586 381.927 631.995 380.693 633.287 379.226 cv
634.579 377.758 635.753 376.055 636.928 374.998 cv
638.103 373.941 639.276 373.53 640.628 373.383 cv
641.979 373.236 643.505 373.354 644.474 373.09 cv
645.442 372.825 645.854 372.18 646.235 371.475 cv
646.617 370.77 646.97 370.007 647.674 369.155 cv
648.379 368.304 649.436 367.364 650.463 366.307 cv
651.491 365.25 652.489 364.076 653.635 363.313 cv
654.779 362.549 656.071 362.196 656.981 362.344 cv
657.892 362.49 658.42 363.136 658.303 364.34 cv
658.186 365.544 657.422 367.306 656.806 368.715 cv
656.188 370.124 655.719 371.181 656.424 371.944 cv
657.128 372.708 659.008 373.178 660.299 372.913 cv
661.591 372.649 662.296 371.65 662.707 370.241 cv
663.118 368.832 663.235 367.012 662.912 364.868 cv
662.59 362.725 661.826 360.259 661.503 358.263 cv
661.181 356.266 661.298 354.739 662.091 354.298 cv
662.883 353.857 664.352 354.504 665.584 355.003 cv
666.817 355.502 667.815 355.854 668.227 356.999 cv
668.638 358.145 668.462 360.082 668.491 361.434 cv
668.521 362.783 668.755 363.547 669.372 364.047 cv
669.988 364.545 670.986 364.78 671.515 364.223 cv
672.044 363.664 672.103 362.314 672.748 361.727 cv
673.395 361.14 674.628 361.315 675.739 361.492 cv
676.851 361.668 677.841 361.844 678.336 361.374 cv
678.831 360.904 678.831 359.789 678.63 358.351 cv
678.428 356.911 678.025 355.15 677.324 354.093 cv
676.624 353.036 675.626 352.684 675.626 351.949 cv
675.626 351.216 676.624 350.1 676.918 349.014 cv
677.211 347.927 676.8 346.87 676.066 346.077 cv
675.332 345.285 674.275 344.756 673.746 345.285 cv
673.218 345.813 673.218 347.398 672.895 348.309 cv
672.572 349.219 671.926 349.454 671.427 348.955 cv
670.928 348.456 670.575 347.223 669.93 346.313 cv
669.284 345.402 668.345 344.815 667.64 344.785 cv
666.935 344.756 666.466 345.285 666.054 346.166 cv
665.643 347.047 665.291 348.28 664.615 348.573 cv
663.94 348.866 662.941 348.221 662.766 347.164 cv
662.589 346.106 663.235 344.639 664.233 343.229 cv
665.232 341.82 666.583 340.47 666.348 339.735 cv
666.113 339.001 664.292 338.884 662.707 339.03 cv
661.121 339.178 659.771 339.589 658.772 340.205 cv
657.774 340.822 657.128 341.644 656.6 341.468 cv
656.071 341.291 655.66 340.117 655.249 338.913 cv
654.838 337.71 654.427 336.477 654.397 335.185 cv
654.368 333.893 654.721 332.542 653.928 332.014 cv
653.136 331.485 651.197 331.778 649.788 332.189 cv
648.379 332.601 647.498 333.13 646.559 333.951 cv
645.619 334.773 644.62 335.89 643.975 336.741 cv
643.329 337.593 643.035 338.179 642.565 338.972 cv
642.096 339.765 641.449 340.763 640.539 341.468 cv
639.629 342.172 638.455 342.584 637.163 342.906 cv
635.871 343.229 634.462 343.464 634.345 342.877 cv
634.227 342.29 635.401 340.881 635.694 339.56 cv
635.988 338.238 635.401 337.005 633.934 336.153 cv
632.465 335.302 630.116 334.832 628.883 335.302 cv
627.65 335.771 627.532 337.181 627.269 338.238 cv
627.004 339.295 626.593 340 625.683 340.117 cv
624.772 340.234 623.363 339.765 622.453 339.061 cv
621.543 338.355 621.132 337.416 621.602 336.3 cv
622.071 335.185 623.422 333.893 624.127 332.014 cv
624.831 330.135 624.89 327.668 624.714 324.82 cv
624.538 321.973 624.127 318.742 623.275 317.656 cv
622.424 316.569 621.132 317.627 619.958 319.799 cv
618.783 321.972 617.727 325.261 616.845 328.255 cv
615.965 331.25 615.26 333.951 615.143 336.564 cv
615.025 339.178 615.494 341.703 615.847 344.14 cv
616.199 346.576 616.435 348.926 616.61 352.038 cv
616.61 352.038 li
cp
396.947 257.305 mo
396.169 257.173 395.171 257.055 394.393 257.217 cv
393.614 257.378 393.057 257.818 392.484 258.318 cv
391.912 258.817 391.324 259.375 391.222 260.094 cv
391.119 260.813 391.501 261.694 391.721 262.604 cv
391.941 263.515 392 264.454 392.044 265.247 cv
392.088 266.04 392.117 266.686 392.528 267.244 cv
392.939 267.801 393.732 268.271 394.687 268.711 cv
395.641 269.152 396.756 269.563 397.49 269.622 cv
398.225 269.681 398.576 269.387 399.002 268.653 cv
399.428 267.919 399.928 266.745 400.06 265.306 cv
400.191 263.867 399.957 262.164 399.692 260.857 cv
399.428 259.551 399.135 258.641 398.709 258.112 cv
398.283 257.584 397.726 257.437 396.947 257.305 cv
396.947 257.305 li
cp
398.753 239.424 mo
398.547 240.203 398.518 241.347 398.386 242.316 cv
398.254 243.285 398.019 244.078 398.562 244.812 cv
399.105 245.546 400.427 246.221 401.748 246.354 cv
403.069 246.485 404.39 246.074 405.373 245.326 cv
406.357 244.577 407.003 243.491 407.003 242.478 cv
407.003 241.465 406.357 240.525 405.521 240.026 cv
404.684 239.527 403.656 239.468 402.657 239.175 cv
401.659 238.881 400.69 238.353 400.016 238.294 cv
399.34 238.235 398.958 238.646 398.753 239.424 cv
398.753 239.424 li
cp
376.747 253.488 mo
375.382 254.061 373.943 254.882 372.093 255.602 cv
370.243 256.321 367.982 256.938 366.69 257.76 cv
365.398 258.582 365.076 259.609 365.091 261.019 cv
365.105 262.428 365.458 264.219 365.986 265.467 cv
366.515 266.715 367.219 267.419 368.188 268.051 cv
369.157 268.683 370.391 269.24 371.315 269.313 cv
372.24 269.387 372.856 268.976 373.679 268.168 cv
374.501 267.361 375.528 266.157 376.219 264.982 cv
376.908 263.808 377.261 262.663 378.039 262.076 cv
378.816 261.489 380.021 261.459 380.872 261.269 cv
381.724 261.078 382.223 260.726 382.663 259.962 cv
383.104 259.199 383.485 258.024 383.632 256.762 cv
383.778 255.5 383.69 254.148 383.162 253.385 cv
382.634 252.622 381.665 252.445 380.534 252.519 cv
379.404 252.593 378.112 252.916 376.747 253.488 cv
376.747 253.488 li
cp
349.771 249.679 mo
351.158 250.038 352.538 250.009 353.434 250.097 cv
354.329 250.185 354.741 250.39 354.8 250.904 cv
354.858 251.418 354.564 252.24 354.652 252.916 cv
354.741 253.591 355.21 254.12 356.193 254.369 cv
357.178 254.618 358.675 254.589 359.614 254.339 cv
360.554 254.09 360.936 253.62 361.772 252.548 cv
362.609 251.477 363.901 249.803 364.68 248.614 cv
365.457 247.425 365.722 246.72 365.824 245.839 cv
365.927 244.958 365.868 243.901 365.78 242.845 cv
365.692 241.788 365.575 240.731 365.824 240.1 cv
366.074 239.468 366.69 239.263 367.204 239.292 cv
367.718 239.321 368.13 239.585 368.569 240.202 cv
369.01 240.818 369.479 241.788 370.316 242.375 cv
371.153 242.962 372.357 243.167 373.811 243.505 cv
375.264 243.843 376.967 244.313 378.846 244.562 cv
380.726 244.812 382.78 244.841 384.014 244.694 cv
385.247 244.547 385.657 244.225 386.054 243.931 cv
386.45 243.637 386.832 243.373 386.994 242.83 cv
387.155 242.287 387.097 241.465 387.097 240.555 cv
387.097 239.645 387.155 238.646 386.994 238.044 cv
386.832 237.442 386.45 237.237 385.907 236.679 cv
385.364 236.121 384.659 235.211 384.072 234.844 cv
383.485 234.477 383.016 234.653 382.369 234.565 cv
381.724 234.477 380.901 234.125 379.551 232.979 cv
378.2 231.834 376.321 229.896 375.073 228.62 cv
373.825 227.342 373.209 226.726 372.65 226.351 cv
372.093 225.977 371.594 225.845 370.94 225.823 cv
370.288 225.801 369.48 225.889 368.87 225.882 cv
368.262 225.874 367.851 225.772 367.461 225.287 cv
367.072 224.803 366.705 223.937 366.17 223.54 cv
365.634 223.144 364.929 223.217 364.019 223.203 cv
363.108 223.188 361.993 223.085 360.716 223.048 cv
359.438 223.012 358 223.041 357.171 222.645 cv
356.341 222.248 356.121 221.426 355.666 220.45 cv
355.211 219.474 354.521 218.343 353.882 217.536 cv
353.243 216.728 352.656 216.244 352.12 215.914 cv
351.584 215.583 351.1 215.407 350.667 215.334 cv
350.234 215.26 349.853 215.29 349.713 215.671 cv
349.573 216.053 349.676 216.787 349.765 217.602 cv
349.853 218.417 349.926 219.312 349.778 220.677 cv
349.632 222.042 349.265 223.878 348.839 225.647 cv
348.414 227.416 347.929 229.12 347.701 230.235 cv
347.474 231.351 347.503 231.879 347.768 232.819 cv
348.031 233.759 348.531 235.109 348.751 236.298 cv
348.972 237.487 348.913 238.515 348.678 239.484 cv
348.442 240.453 348.031 241.363 347.474 242.479 cv
346.916 243.594 346.212 244.916 345.874 245.84 cv
345.536 246.765 345.565 247.294 346.277 247.932 cv
346.989 248.571 348.384 249.319 349.771 249.679 cv
349.771 249.679 li
cp
272.999 177.004 mo
273.145 176.535 273.409 176.109 273.887 175.756 cv
274.364 175.404 275.054 175.125 275.479 174.817 cv
275.905 174.509 276.066 174.171 276.324 173.43 cv
276.581 172.688 276.933 171.543 277.336 170.743 cv
277.74 169.943 278.195 169.488 278.907 168.739 cv
279.619 167.99 280.588 166.948 281.249 166.368 cv
281.909 165.789 282.262 165.671 283.128 165.729 cv
283.994 165.789 285.374 166.023 286.262 166.295 cv
287.15 166.566 287.547 166.875 287.833 167.19 cv
288.119 167.506 288.295 167.829 288.347 168.401 cv
288.398 168.974 288.325 169.796 288.267 170.391 cv
288.208 170.985 288.163 171.353 288.435 171.793 cv
288.707 172.233 289.293 172.747 289.639 173.099 cv
289.983 173.452 290.086 173.643 290.476 174.054 cv
290.865 174.465 291.54 175.096 292.039 175.676 cv
292.538 176.256 292.861 176.784 293.14 177.32 cv
293.419 177.856 293.654 178.399 293.713 179.177 cv
293.771 179.955 293.654 180.968 293.507 181.666 cv
293.36 182.363 293.184 182.745 292.648 182.773 cv
292.112 182.803 291.217 182.48 289.991 182.399 cv
288.765 182.318 287.209 182.48 285.954 182.561 cv
284.699 182.642 283.744 182.642 282.93 182.275 cv
282.115 181.908 281.44 181.174 280.771 180.667 cv
280.104 180.161 279.443 179.882 278.665 179.757 cv
277.887 179.632 276.991 179.662 276.066 179.72 cv
275.142 179.779 274.188 179.867 273.637 179.669 cv
273.086 179.471 272.939 178.986 272.881 178.487 cv
272.822 177.988 272.852 177.474 272.999 177.004 cv
272.999 177.004 li
cp
267.839 134.797 mo
269.335 136.552 270.158 137.58 270.965 138.49 cv
271.772 139.4 272.565 140.193 273.167 141.074 cv
273.769 141.955 274.18 142.924 274.679 143.966 cv
275.178 145.008 275.766 146.124 276.412 146.726 cv
277.057 147.328 277.762 147.416 278.746 147.401 cv
279.729 147.386 280.992 147.269 281.799 146.961 cv
282.607 146.652 282.959 146.153 283.223 145.551 cv
283.487 144.95 283.664 144.245 283.693 143.452 cv
283.722 142.659 283.605 141.778 283.781 141.309 cv
283.957 140.839 284.427 140.78 285 140.736 cv
285.572 140.692 286.247 140.663 286.658 140.413 cv
287.069 140.164 287.216 139.694 287.407 138.739 cv
287.598 137.785 287.833 136.347 287.892 134.556 cv
287.95 132.765 287.833 130.621 287.774 129.08 cv
287.715 127.538 287.715 126.599 287.539 125.924 cv
287.363 125.249 287.011 124.837 286.379 124.28 cv
285.748 123.722 284.838 123.017 284.397 122.488 cv
283.957 121.96 283.986 121.607 284.25 121.138 cv
284.515 120.668 285.014 120.081 285.513 119.479 cv
286.013 118.877 286.511 118.261 286.791 117.615 cv
287.07 116.968 287.128 116.293 287.084 115.647 cv
287.04 115.001 286.894 114.385 286.526 113.769 cv
286.159 113.152 285.572 112.535 285.001 112.101 cv
284.43 111.667 283.875 111.415 282.98 111.275 cv
282.086 111.134 280.853 111.104 279.649 111.031 cv
278.445 110.958 277.271 110.84 276.214 110.385 cv
275.157 109.93 274.217 109.137 273.439 108.609 cv
272.661 108.081 272.044 107.816 271.575 107.86 cv
271.105 107.904 270.782 108.257 270.547 108.727 cv
270.313 109.196 270.166 109.784 270.136 110.43 cv
270.107 111.075 270.195 111.78 270.342 112.514 cv
270.489 113.248 270.694 114.012 271.017 114.628 cv
271.34 115.245 271.78 115.714 272.397 116.125 cv
273.014 116.537 273.806 116.889 274.364 117.212 cv
274.922 117.535 275.245 117.828 275.406 118.239 cv
275.568 118.65 275.568 119.179 275.598 119.722 cv
275.627 120.265 275.686 120.823 275.436 121.396 cv
275.186 121.968 274.628 122.555 273.968 123.216 cv
273.308 123.876 272.544 124.611 271.957 124.669 cv
271.369 124.728 270.958 124.111 270.415 123.495 cv
269.872 122.878 269.197 122.262 268.565 121.954 cv
267.934 121.646 267.347 121.646 266.848 121.264 cv
266.349 120.882 265.938 120.118 265.629 119.546 cv
265.321 118.974 265.116 118.592 264.822 118.621 cv
264.528 118.65 264.146 119.091 263.633 119.575 cv
263.119 120.06 262.473 120.588 262.15 121.043 cv
261.827 121.498 261.827 121.88 261.813 122.82 cv
261.798 123.759 261.768 125.257 261.798 126.226 cv
261.827 127.194 261.915 127.635 263.044 129.097 cv
264.173 130.558 266.343 133.042 267.839 134.797 cv
267.839 134.797 li
cp
206.85 172.088 mo
207.612 172.705 208.449 173.204 209.059 173.593 cv
209.667 173.982 210.05 174.261 210.453 174.496 cv
210.857 174.73 211.283 174.921 211.877 175.017 cv
212.472 175.112 213.235 175.112 214.351 175.127 cv
215.467 175.142 216.935 175.171 218.219 175.2 cv
219.503 175.229 220.605 175.259 221.787 175.354 cv
222.968 175.45 224.231 175.611 225.208 175.817 cv
226.184 176.022 226.874 176.272 227.637 176.441 cv
228.4 176.61 229.237 176.698 229.655 176.617 cv
230.074 176.536 230.074 176.287 230.257 175.89 cv
230.441 175.494 230.808 174.951 231.249 174.437 cv
231.688 173.923 232.203 173.438 232.628 173.167 cv
233.054 172.896 233.392 172.837 234.28 172.814 cv
235.168 172.792 236.606 172.808 237.458 172.749 cv
238.31 172.69 238.574 172.558 238.897 172.33 cv
239.22 172.103 239.602 171.78 239.961 171.552 cv
240.321 171.325 240.658 171.192 241.011 171.119 cv
241.363 171.046 241.73 171.031 242.222 171.104 cv
242.714 171.178 243.331 171.339 243.961 171.589 cv
244.593 171.839 245.239 172.176 245.687 172.425 cv
246.134 172.675 246.384 172.837 246.633 173.204 cv
246.883 173.571 247.132 174.143 247.456 174.738 cv
247.779 175.333 248.175 175.95 248.608 176.302 cv
249.042 176.654 249.511 176.742 250.296 176.698 cv
251.082 176.654 252.183 176.478 253.093 176.42 cv
254.003 176.361 254.723 176.42 255.486 176.588 cv
256.25 176.757 257.057 177.036 257.762 177.131 cv
258.466 177.227 259.068 177.139 259.942 176.816 cv
260.815 176.493 261.96 175.936 262.738 175.51 cv
263.516 175.084 263.927 174.79 264.272 174.225 cv
264.617 173.66 264.896 172.823 264.896 172.449 cv
264.896 172.074 264.617 172.162 263.942 172.06 cv
263.267 171.957 262.195 171.663 261.167 171.495 cv
260.14 171.326 259.156 171.281 258.51 171.12 cv
257.864 170.958 257.556 170.68 257.152 170.423 cv
256.749 170.166 256.25 169.931 256.029 169.446 cv
255.809 168.962 255.868 168.228 255.927 167.611 cv
255.985 166.995 256.044 166.496 256.389 166.114 cv
256.734 165.732 257.365 165.468 258.106 165.167 cv
258.848 164.866 259.699 164.528 260.412 164.337 cv
261.123 164.147 261.696 164.103 262.43 164.205 cv
263.164 164.308 264.06 164.558 264.999 164.763 cv
265.938 164.969 266.922 165.13 267.546 165.167 cv
268.17 165.204 268.435 165.116 268.831 164.874 cv
269.227 164.631 269.756 164.235 270.101 163.993 cv
270.445 163.75 270.607 163.663 270.541 163.522 cv
270.475 163.383 270.181 163.192 269.785 162.693 cv
269.389 162.194 268.889 161.387 268.332 160.646 cv
267.774 159.904 267.158 159.229 265.8 158.128 cv
264.442 157.026 262.343 155.5 260.684 154.289 cv
259.025 153.078 257.806 152.182 257.036 151.478 cv
256.265 150.773 255.942 150.259 255.758 149.503 cv
255.575 148.747 255.531 147.749 255.516 146.56 cv
255.502 145.371 255.516 143.991 255.406 142.758 cv
255.296 141.525 255.062 140.438 254.958 138.81 cv
254.856 137.18 254.886 135.007 254.944 132.834 cv
255.003 130.662 255.091 128.489 254.988 126.713 cv
254.886 124.937 254.592 123.556 254.02 121.897 cv
253.447 120.238 252.595 118.301 251.686 117.053 cv
250.775 115.805 249.806 115.247 248.837 114.792 cv
247.868 114.337 246.899 113.985 246.077 113.75 cv
245.255 113.515 244.58 113.397 243.919 113.588 cv
243.259 113.779 242.613 114.278 242.26 114.851 cv
241.908 115.423 241.849 116.069 242.025 117.552 cv
242.201 119.034 242.613 121.354 242.891 123.145 cv
243.17 124.937 243.317 126.199 243.435 127.638 cv
243.552 129.076 243.64 130.691 243.699 131.91 cv
243.758 133.128 243.787 133.95 243.567 134.581 cv
243.347 135.212 242.877 135.653 242.422 135.976 cv
241.966 136.299 241.526 136.504 240.821 136.284 cv
240.117 136.064 239.148 135.418 238.664 134.611 cv
238.179 133.803 238.179 132.834 238.223 131.161 cv
238.267 129.487 238.355 127.109 238.355 125.23 cv
238.355 123.351 238.267 121.971 238.106 120.87 cv
237.944 119.769 237.709 118.946 237.372 118.697 cv
237.034 118.448 236.594 118.77 235.948 119.02 cv
235.302 119.27 234.45 119.446 233.745 119.828 cv
233.041 120.209 232.483 120.796 232.116 121.53 cv
231.749 122.264 231.573 123.145 230.883 123.652 cv
230.193 124.158 228.989 124.291 228.13 124.078 cv
227.271 123.865 226.757 123.307 226.596 122.5 cv
226.435 121.692 226.625 120.635 227.088 119.931 cv
227.55 119.226 228.284 118.874 228.666 118.389 cv
229.047 117.904 229.077 117.288 228.886 116.745 cv
228.695 116.202 228.284 115.732 227.624 115.218 cv
226.963 114.704 226.053 114.146 225.385 113.677 cv
224.717 113.206 224.291 112.825 223.976 112.208 cv
223.66 111.591 223.455 110.74 223.044 110.292 cv
222.632 109.845 222.016 109.8 221.458 109.999 cv
220.9 110.197 220.401 110.637 219.961 111.408 cv
219.52 112.179 219.138 113.28 218.742 113.911 cv
218.346 114.542 217.935 114.704 217.392 114.601 cv
216.848 114.498 216.173 114.131 215.71 113.412 cv
215.248 112.692 214.999 111.621 215.175 110.762 cv
215.351 109.903 215.953 109.257 216.768 108.795 cv
217.583 108.333 218.61 108.053 219.014 107.269 cv
219.417 106.483 219.197 105.191 218.316 104.758 cv
217.435 104.326 215.894 104.751 214.154 105.368 cv
212.415 105.984 210.477 106.792 208.928 107.445 cv
207.379 108.098 206.22 108.597 205.244 108.905 cv
204.268 109.214 203.475 109.331 202.594 109.771 cv
201.713 110.212 200.744 110.976 199.658 111.886 cv
198.571 112.796 197.367 113.853 196.472 114.983 cv
195.576 116.113 194.989 117.317 194.417 118.286 cv
193.844 119.255 193.287 119.989 193.081 120.65 cv
192.875 121.311 193.022 121.897 193.066 122.412 cv
193.11 122.925 193.052 123.365 192.831 123.879 cv
192.611 124.393 192.229 124.98 192.142 125.523 cv
192.053 126.066 192.259 126.566 192.67 127.124 cv
193.081 127.682 193.698 128.298 194.432 128.548 cv
195.166 128.797 196.017 128.68 197.602 128.65 cv
199.188 128.621 201.507 128.68 202.961 128.827 cv
204.414 128.974 205.001 129.208 205.266 129.664 cv
205.53 130.118 205.471 130.793 205.266 131.381 cv
205.06 131.968 204.708 132.467 204.179 132.717 cv
203.65 132.967 202.946 132.967 202.418 132.967 cv
201.889 132.967 201.537 132.967 200.729 132.893 cv
199.922 132.82 198.659 132.673 197.603 132.731 cv
196.545 132.791 195.694 133.055 194.887 133.466 cv
194.079 133.876 193.315 134.435 193.081 134.919 cv
192.846 135.404 193.139 135.814 193.741 136.417 cv
194.343 137.018 195.253 137.811 196.002 138.031 cv
196.75 138.251 197.338 137.899 197.999 137.87 cv
198.659 137.84 199.394 138.134 199.937 138.589 cv
200.479 139.044 200.832 139.661 201.551 139.984 cv
202.271 140.307 203.357 140.336 204.311 140.351 cv
205.266 140.366 206.087 140.366 207.071 140.792 cv
208.054 141.217 209.2 142.069 210.183 142.729 cv
211.167 143.39 211.989 143.859 212.973 144.08 cv
213.956 144.3 215.102 144.271 215.864 144.608 cv
216.628 144.946 217.01 145.65 217.7 146.708 cv
218.39 147.765 219.388 149.174 219.476 149.893 cv
219.564 150.613 218.742 150.642 217.538 150.906 cv
216.334 151.17 214.749 151.669 213.707 151.538 cv
212.664 151.405 212.165 150.642 211.534 149.967 cv
210.903 149.292 210.139 148.704 209.229 148.469 cv
208.319 148.234 207.262 148.352 206.411 148.308 cv
205.559 148.264 204.913 148.058 204.047 147.809 cv
203.181 147.559 202.094 147.266 201.037 147.222 cv
199.98 147.178 198.953 147.383 198.042 147.5 cv
197.132 147.618 196.34 147.647 195.723 147.897 cv
195.106 148.146 194.666 148.616 194.02 149.306 cv
193.374 149.996 192.522 150.906 192.229 151.897 cv
191.935 152.888 192.199 153.96 192.493 154.849 cv
192.786 155.736 193.109 156.441 193.593 157.014 cv
194.078 157.586 194.724 158.026 195.473 158.511 cv
196.221 158.995 197.073 159.524 197.924 159.979 cv
198.776 160.434 199.627 160.816 200.42 160.875 cv
201.213 160.933 201.947 160.669 202.387 160.875 cv
202.828 161.08 202.975 161.755 203.327 162.401 cv
203.679 163.047 204.237 163.664 204.53 164.178 cv
204.824 164.691 204.854 165.103 204.81 165.675 cv
204.765 166.247 204.648 166.981 204.619 167.73 cv
204.589 168.479 204.648 169.242 205.022 169.991 cv
205.396 170.739 206.086 171.472 206.85 172.088 cv
206.85 172.088 li
cp
170.311 106.749 mo
169.797 107.115 169.239 107.556 169.107 108.246 cv
168.975 108.936 169.269 109.875 169.4 110.947 cv
169.533 112.019 169.503 113.223 169.488 114.147 cv
169.474 115.072 169.474 115.718 169.841 116.599 cv
170.208 117.479 170.942 118.596 171.618 119.447 cv
172.293 120.299 172.909 120.885 173.996 121.076 cv
175.082 121.267 176.638 121.062 178.106 120.577 cv
179.574 120.093 180.954 119.33 182.29 118.449 cv
183.626 117.568 184.918 116.569 186.779 115.156 cv
188.64 113.743 191.07 111.914 194.149 109.873 cv
197.229 107.832 200.958 105.579 204.646 103.278 cv
208.334 100.978 211.982 98.6289 213.645 96.8384 cv
215.306 95.0483 214.983 93.8149 214.146 92.7432 cv
213.31 91.6714 211.959 90.7617 211.02 89.9395 cv
210.08 89.1172 209.552 88.3833 208.92 88.0015 cv
208.289 87.6201 207.555 87.5903 206.704 87.4727 cv
205.852 87.3555 204.883 87.1499 204.267 86.6802 cv
203.65 86.2104 203.386 85.4766 203.225 84.8013 cv
203.063 84.126 203.004 83.5093 202.358 82.9072 cv
201.712 82.3052 200.479 81.7183 199.51 81.4102 cv
198.542 81.1016 197.836 81.0723 196.882 81.1455 cv
195.928 81.2192 194.724 81.3955 193.447 81.4395 cv
192.17 81.4834 190.819 81.3955 189.88 81.542 cv
188.94 81.6885 188.412 82.0708 188.06 82.584 cv
187.707 83.0977 187.531 83.7441 187.354 84.3901 cv
187.179 85.0356 187.002 85.6821 186.929 86.3569 cv
186.856 87.0322 186.885 87.7368 186.812 88.5298 cv
186.738 89.3223 186.562 90.2031 185.945 91.436 cv
185.329 92.6694 184.272 94.2554 183.171 95.8701 cv
182.07 97.4844 180.925 99.1289 179.853 100.538 cv
178.782 101.947 177.783 103.122 176.902 103.988 cv
176.021 104.854 175.258 105.412 174.421 105.662 cv
173.584 105.911 172.674 105.853 171.984 105.97 cv
171.294 106.088 170.825 106.381 170.311 106.749 cv
170.311 106.749 li
cp
249.717 104.194 mo
249.218 104.209 248.63 104.297 248.396 104.987 cv
248.161 105.677 248.278 106.969 248.366 108.026 cv
248.454 109.083 248.513 109.904 248.939 110.462 cv
249.365 111.021 250.157 111.314 251.038 111.769 cv
251.919 112.224 252.888 112.841 253.725 113.443 cv
254.562 114.044 255.266 114.632 255.941 114.999 cv
256.617 115.366 257.263 115.513 257.806 115.263 cv
258.349 115.013 258.789 114.367 259.318 113.707 cv
259.846 113.046 260.463 112.371 260.771 111.622 cv
261.079 110.874 261.079 110.052 260.991 109.244 cv
260.903 108.437 260.727 107.644 260.213 106.998 cv
259.7 106.352 258.848 105.853 258.1 105.281 cv
257.351 104.708 256.705 104.062 255.971 103.93 cv
255.237 103.797 254.415 104.179 253.578 104.326 cv
252.741 104.473 251.89 104.385 251.258 104.312 cv
250.627 104.238 250.216 104.179 249.717 104.194 cv
249.717 104.194 li
cp
214.058 63.2944 mo
213.222 63.6318 212.311 63.6611 211.651 63.9697 cv
210.99 64.2778 210.579 64.8652 209.595 65.3496 cv
208.612 65.834 207.056 66.2158 205.852 65.9956 cv
204.648 65.7754 203.796 64.9531 203.165 64.2046 cv
202.534 63.4556 202.123 62.7803 201.932 62.0615 cv
201.741 61.3418 201.771 60.5781 201.786 59.8887 cv
201.8 59.1987 201.8 58.582 202.167 57.98 cv
202.534 57.3784 203.268 56.791 203.944 56.3506 cv
204.619 55.9102 205.235 55.6167 205.837 55.6606 cv
206.439 55.7046 207.026 56.0864 207.525 56.3359 cv
208.024 56.5854 208.436 56.7026 209.082 56.4531 cv
209.728 56.2036 210.608 55.5869 211.328 55.1025 cv
212.047 54.6182 212.604 54.2656 212.884 53.6641 cv
213.163 53.062 213.163 52.2109 213.618 51.5645 cv
214.073 50.9185 214.983 50.4785 215.981 49.8027 cv
216.979 49.1279 218.066 48.2178 218.83 47.8213 cv
219.593 47.4248 220.033 47.5425 220.914 47.4248 cv
221.795 47.3071 223.116 46.9551 224.525 46.7793 cv
225.935 46.603 227.432 46.603 228.24 46.7061 cv
229.047 46.8086 229.165 47.0137 229.252 47.3955 cv
229.34 47.7773 229.399 48.335 229.487 49.3481 cv
229.575 50.3613 229.693 51.8291 229.767 52.9595 cv
229.839 54.0898 229.869 54.8823 229.487 55.646 cv
229.105 56.4092 228.313 57.1431 227.594 57.833 cv
226.874 58.5229 226.228 59.1689 225.582 59.6392 cv
224.937 60.1084 224.291 60.4023 223.586 60.5493 cv
222.881 60.6958 222.118 60.6958 221.369 60.6519 cv
220.621 60.6079 219.887 60.52 219.226 60.6812 cv
218.565 60.8428 217.978 61.2539 217.523 61.4595 cv
217.067 61.665 216.745 61.665 216.202 61.9878 cv
215.658 62.3105 214.895 62.9565 214.058 63.2944 cv
214.058 63.2944 li
cp
213.911 73.395 mo
213.147 73.8506 212.208 73.9233 211.54 73.7769 cv
210.872 73.6299 210.476 73.2632 210.219 72.6172 cv
209.962 71.9712 209.845 71.0464 209.918 70.3047 cv
209.991 69.5635 210.255 69.0059 210.725 68.5435 cv
211.195 68.0806 211.87 67.7139 212.751 67.3467 cv
213.632 66.9795 214.718 66.6128 215.445 66.3486 cv
216.172 66.0845 216.539 65.9229 216.913 66.0332 cv
217.288 66.1431 217.669 66.5249 217.941 66.9136 cv
218.212 67.3027 218.374 67.6992 218.264 68.1104 cv
218.154 68.521 217.772 68.9473 217.324 69.4756 cv
216.877 70.0039 216.362 70.6348 215.812 71.3691 cv
215.262 72.103 214.674 72.9399 213.911 73.395 cv
213.911 73.395 li
cp
224.297 69.2334 mo
223.791 70.0479 223.189 70.7671 222.602 71.3545 cv
222.015 71.9419 221.442 72.397 220.745 72.8301 cv
220.047 73.2632 219.226 73.6743 218.616 74.0117 cv
218.007 74.3491 217.61 74.6133 217.273 74.9072 cv
216.935 75.2007 216.656 75.5239 216.443 75.9053 cv
216.23 76.2871 216.084 76.7271 216.047 77.2705 cv
216.01 77.814 216.084 78.46 216.216 79.0547 cv
216.348 79.6489 216.539 80.1919 216.781 80.6548 cv
217.023 81.1172 217.317 81.4985 217.853 81.7114 cv
218.389 81.9243 219.167 81.9688 219.878 81.9536 cv
220.591 81.939 221.237 81.8657 221.729 81.6382 cv
222.22 81.4106 222.558 81.0288 222.727 80.6177 cv
222.896 80.207 222.896 79.7666 223.057 79.6123 cv
223.219 79.458 223.542 79.5903 223.923 79.8765 cv
224.305 80.1626 224.745 80.603 225.318 81.124 cv
225.89 81.6455 226.595 82.2471 227.175 82.585 cv
227.754 82.9229 228.209 82.9956 229.45 82.8276 cv
230.691 82.6587 232.717 82.2471 234.031 82.042 cv
235.344 81.8364 235.946 81.8364 236.35 82.0127 cv
236.754 82.189 236.959 82.541 237.165 83.04 cv
237.371 83.5391 237.576 84.1851 237.657 84.6992 cv
237.737 85.2129 237.693 85.5947 237.363 85.9614 cv
237.033 86.3286 236.416 86.6807 235.763 86.8203 cv
235.109 86.96 234.419 86.8862 233.766 86.9082 cv
233.113 86.9302 232.496 87.0479 231.417 87.3418 cv
230.338 87.6348 228.797 88.1045 227.645 88.5889 cv
226.492 89.0737 225.729 89.5728 225.193 90.0791 cv
224.657 90.5859 224.349 91.0996 224.099 91.5918 cv
223.849 92.0835 223.659 92.5532 223.725 93.1992 cv
223.791 93.8452 224.113 94.667 224.495 95.1147 cv
224.877 95.5625 225.317 95.6357 226.073 95.6577 cv
226.83 95.6802 227.901 95.6504 228.833 95.6064 cv
229.766 95.5625 230.559 95.5039 231.072 95.3789 cv
231.586 95.2544 231.821 95.0635 232.423 94.4468 cv
233.025 93.8301 233.994 92.7881 234.713 92.2451 cv
235.432 91.7017 235.902 91.6572 238.611 91.3271 cv
241.319 90.9971 246.267 90.3799 248.946 89.9546 cv
251.625 89.5283 252.036 89.2939 252.616 88.7729 cv
253.196 88.2515 253.944 87.4443 254.59 86.769 cv
255.236 86.0938 255.78 85.5508 256.278 84.8979 cv
256.778 84.2446 257.233 83.481 257.526 82.6592 cv
257.82 81.8369 257.952 80.9561 258.04 80.1338 cv
258.128 79.312 258.172 78.5483 257.96 77.8071 cv
257.747 77.0659 257.277 76.3467 256.697 75.8989 cv
256.117 75.4507 255.427 75.2749 254.847 75.3555 cv
254.268 75.4365 253.798 75.7739 253.328 76.2729 cv
252.858 76.772 252.388 77.4326 251.882 77.9907 cv
251.375 78.5483 250.833 79.0034 250.37 78.9521 cv
249.907 78.9004 249.525 78.3428 249.306 77.3374 cv
249.085 76.3315 249.026 74.8784 248.953 73.4248 cv
248.88 71.9717 248.792 70.5181 248.594 69.4321 cv
248.396 68.3457 248.087 67.626 247.646 67.2593 cv
247.206 66.8921 246.634 66.8774 246.142 67.0024 cv
245.65 67.127 245.239 67.3916 244.784 67.8906 cv
244.329 68.3896 243.83 69.124 243.448 69.8945 cv
243.066 70.6655 242.802 71.4727 242.648 72.3091 cv
242.494 73.146 242.45 74.0122 242.567 74.812 cv
242.685 75.6123 242.964 76.3467 243.367 76.9561 cv
243.771 77.5649 244.3 78.0493 244.725 78.4165 cv
245.151 78.7837 245.474 79.0327 245.65 79.3853 cv
245.826 79.7378 245.855 80.1924 245.863 80.6621 cv
245.87 81.1323 245.855 81.6167 245.621 81.9541 cv
245.386 82.292 244.931 82.4829 244.336 82.5781 cv
243.741 82.6738 243.008 82.6738 242.442 82.417 cv
241.877 82.1597 241.48 81.646 241.018 80.9194 cv
240.556 80.1924 240.027 79.2534 239.499 78.6147 cv
238.971 77.9761 238.442 77.6382 238.09 77.2275 cv
237.737 76.8159 237.561 76.3315 237.341 75.5024 cv
237.121 74.6729 236.856 73.4985 236.724 72.4932 cv
236.592 71.4873 236.592 70.6504 235.888 69.3296 cv
235.183 68.0083 233.773 66.2026 232.555 65.0796 cv
231.336 63.9565 230.309 63.5161 229.333 63.2813 cv
228.356 63.0464 227.432 63.0171 226.705 63.2007 cv
225.978 63.3838 225.45 63.7803 225.303 64.3823 cv
225.155 64.9844 225.391 65.7915 225.303 66.6499 cv
225.214 67.5088 224.804 68.4189 224.297 69.2334 cv
224.297 69.2334 li
cp
259.617 89.0313 mo
259.581 90.1318 259.537 91.0713 259.603 91.8423 cv
259.669 92.6128 259.845 93.2148 260.161 93.6113 cv
260.476 94.0078 260.931 94.1982 261.511 94.1836 cv
262.091 94.1689 262.795 93.9487 263.214 93.3545 cv
263.632 92.7598 263.765 91.791 263.882 90.7412 cv
264 89.6914 264.102 88.561 264.154 87.6514 cv
264.205 86.7407 264.205 86.0508 264.007 85.3608 cv
263.809 84.6709 263.412 83.981 262.928 83.7021 cv
262.443 83.4229 261.871 83.5552 261.32 83.9072 cv
260.77 84.2598 260.241 84.8325 259.962 85.75 cv
259.683 86.6675 259.654 87.9297 259.617 89.0313 cv
259.617 89.0313 li
cp
233.912 41.7461 mo
233.347 42.2158 233.274 43.0674 233.54 43.9175 cv
233.807 44.7676 234.414 45.6172 234.688 46.3501 cv
234.962 47.083 234.903 47.6992 234.896 48.3013 cv
234.888 48.9033 234.933 49.4902 235.437 50.3208 cv
235.94 51.1514 236.904 52.2256 237.775 53.2837 cv
238.646 54.3418 239.425 55.3843 240.21 55.9565 cv
240.996 56.5293 241.788 56.6318 242.61 56.4409 cv
243.432 56.2505 244.284 55.7661 244.688 55.1494 cv
245.091 54.5327 245.047 53.7842 245.26 53.3579 cv
245.473 52.9326 245.942 52.8301 246.493 52.6758 cv
247.043 52.5215 247.675 52.3159 248.093 52.0669 cv
248.512 51.8169 248.717 51.5234 248.93 51.2148 cv
249.143 50.9063 249.363 50.5835 249.62 50.2388 cv
249.877 49.8936 250.171 49.5264 250.251 48.9614 cv
250.332 48.3965 250.2 47.6328 250.075 46.9136 cv
249.951 46.1943 249.833 45.519 249.525 45.1299 cv
249.216 44.7412 248.717 44.6382 247.976 44.4399 cv
247.234 44.2422 246.251 43.9482 245.465 43.7646 cv
244.68 43.5811 244.093 43.5078 243.667 43.5444 cv
243.241 43.5811 242.977 43.728 242.61 44.1025 cv
242.243 44.4766 241.773 45.0786 241.296 45.4531 cv
240.819 45.8271 240.335 45.9741 239.938 45.9521 cv
239.542 45.9302 239.234 45.7393 239.021 45.2324 cv
238.808 44.7261 238.69 43.9038 238.302 43.1631 cv
237.912 42.4214 237.251 41.7607 236.393 41.4746 cv
235.534 41.1885 234.478 41.2764 233.912 41.7461 cv
233.912 41.7461 li
cp
241.604 32.2993 mo
240.892 32.4092 240.481 32.791 240.217 33.2241 cv
239.952 33.6572 239.835 34.1416 239.945 34.6484 cv
240.055 35.1548 240.393 35.6831 240.811 36.2412 cv
241.229 36.7988 241.729 37.3857 242.338 37.9146 cv
242.947 38.4434 243.667 38.9131 244.342 39.2065 cv
245.017 39.5 245.648 39.6177 246.368 39.7422 cv
247.087 39.8672 247.895 39.9995 248.577 40.249 cv
249.26 40.4985 249.817 40.8652 250.324 41.2397 cv
250.831 41.6138 251.286 41.9956 251.741 42.0986 cv
252.196 42.2012 252.651 42.0249 253.128 41.6655 cv
253.605 41.3057 254.104 40.7627 254.442 39.9111 cv
254.78 39.0596 254.956 37.8999 254.596 36.8428 cv
254.236 35.7856 253.341 34.8315 252.636 34.3843 cv
251.932 33.936 251.418 33.9951 250.801 34.208 cv
250.185 34.4204 249.465 34.7876 248.834 35.0298 cv
248.203 35.272 247.66 35.3892 247.241 35.4336 cv
246.823 35.4775 246.529 35.4482 246.096 35.272 cv
245.663 35.0957 245.09 34.7729 244.753 34.4575 cv
244.415 34.1416 244.313 33.8335 244.283 33.5107 cv
244.254 33.1875 244.298 32.8496 243.813 32.6006 cv
243.329 32.3506 242.316 32.189 241.604 32.2993 cv
241.604 32.2993 li
cp
277.386 71.9443 mo
276.682 72.5903 275.859 73.4712 274.979 73.8525 cv
274.098 74.2344 273.158 74.1167 272.688 74.5571 cv
272.219 74.9976 272.219 75.9961 272.042 76.73 cv
271.866 77.4639 271.514 77.9341 271.088 78.3887 cv
270.663 78.8442 270.163 79.2842 269.415 79.71 cv
268.666 80.1357 267.667 80.5469 267.315 81.1929 cv
266.963 81.8389 267.256 82.7197 267.624 83.5713 cv
267.991 84.4229 268.431 85.2446 269.238 85.2886 cv
270.046 85.3325 271.22 84.5986 272.071 84.3784 cv
272.923 84.1582 273.452 84.4521 273.965 85.2153 cv
274.479 85.9785 274.979 87.2119 275.228 88.3716 cv
275.478 89.5313 275.478 90.6177 275.815 91.3369 cv
276.153 92.0566 276.828 92.4087 278.252 92.438 cv
279.676 92.4673 281.849 92.1738 283.273 91.748 cv
284.697 91.3223 285.372 90.7646 285.622 89.8838 cv
285.872 89.0029 285.695 87.7988 285.446 86.6538 cv
285.196 85.5088 284.873 84.4224 284.8 83.1895 cv
284.726 81.9561 284.902 80.5762 284.99 79.02 cv
285.079 77.4639 285.079 75.7314 284.873 74.3809 cv
284.667 73.0308 284.256 72.0615 283.713 71.4746 cv
283.17 70.8872 282.495 70.6816 281.731 70.5791 cv
280.968 70.4761 280.117 70.4761 279.397 70.6816 cv
278.678 70.8872 278.091 71.2983 277.386 71.9443 cv
277.386 71.9443 li
cp
265.472 74.2256 mo
264.407 73.8286 262.881 73.5205 261.934 73.4839 cv
260.987 73.4473 260.62 73.6821 260.796 74.3208 cv
260.973 74.9595 261.691 76.0015 262.47 76.6699 cv
263.248 77.3374 264.084 77.6313 264.804 77.6826 cv
265.523 77.7339 266.125 77.543 266.595 77.1543 cv
267.065 76.7651 267.402 76.1777 267.27 75.6421 cv
267.138 75.106 266.536 74.6216 265.472 74.2256 cv
265.472 74.2256 li
cp
262.507 71.8198 mo
261.913 71.4165 261.34 71.0347 261.017 70.2715 cv
260.694 69.5078 260.621 68.3628 261.318 67.6362 cv
262.015 66.9092 263.483 66.6011 264.973 66.6084 cv
266.463 66.6162 267.976 66.9385 269.055 67.6582 cv
270.133 68.3774 270.779 69.4932 270.823 70.4697 cv
270.868 71.4453 270.31 72.2822 269.605 72.9063 cv
268.9 73.5303 268.049 73.9414 267.146 73.9346 cv
266.243 73.9268 265.289 73.501 264.503 73.0752 cv
263.718 72.6494 263.102 72.2236 262.507 71.8198 cv
262.507 71.8198 li
cp
265.576 61.4277 mo
264.188 61.5078 262.368 61.4785 261.112 61.4126 cv
259.857 61.3467 259.167 61.2437 258.742 60.7886 cv
258.316 60.3335 258.154 59.5259 258.272 58.4326 cv
258.389 57.3389 258.786 55.9585 258.947 54.5493 cv
259.108 53.1401 259.035 51.7012 259.248 50.8721 cv
259.461 50.0425 259.96 49.8223 260.922 50.0645 cv
261.883 50.3066 263.307 51.0112 264.511 52.1934 cv
265.715 53.375 266.699 55.0337 267.389 56.5752 cv
268.079 58.1167 268.475 59.541 268.196 60.3486 cv
267.917 61.1558 266.963 61.3467 265.576 61.4277 cv
265.576 61.4277 li
cp
269.885 45.2139 mo
268.798 45.0522 267.932 45.3018 267.286 45.3677 cv
266.64 45.4336 266.214 45.3164 265.92 44.9712 cv
265.627 44.6265 265.465 44.0542 265.282 43.5771 cv
265.098 43.0996 264.893 42.7178 265.143 42.3657 cv
265.392 42.0132 266.097 41.6904 266.779 41.2573 cv
267.462 40.8242 268.123 40.2813 268.541 39.8555 cv
268.959 39.4292 269.136 39.1211 269.158 38.5269 cv
269.18 37.9321 269.047 37.0508 269.216 36.5005 cv
269.385 35.9502 269.855 35.73 270.685 35.6128 cv
271.514 35.4951 272.703 35.4805 273.841 35.5317 cv
274.979 35.583 276.065 35.7007 276.902 36.0015 cv
277.738 36.3022 278.326 36.7871 278.839 37.1685 cv
279.353 37.5508 279.793 37.8296 280.08 38.3799 cv
280.366 38.9307 280.499 39.7524 280.462 40.8608 cv
280.425 41.9692 280.22 43.3638 280.22 44.4795 cv
280.22 45.5957 280.425 46.4321 280.689 47.2324 cv
280.954 48.0322 281.276 48.7959 281.519 49.3682 cv
281.761 49.9409 281.922 50.3223 281.747 50.77 cv
281.57 51.2178 281.056 51.7319 280.374 52.1133 cv
279.691 52.4951 278.839 52.7446 278.193 52.6494 cv
277.547 52.5537 277.107 52.1133 276.96 51.519 cv
276.813 50.9243 276.96 50.1758 276.902 49.5371 cv
276.843 48.8984 276.579 48.3701 275.991 47.8857 cv
275.404 47.4009 274.494 46.9604 273.386 46.4541 cv
272.277 45.9473 270.971 45.375 269.885 45.2139 cv
269.885 45.2139 li
cp
283.559 42.1084 mo
283.493 42.9521 283.493 43.6572 283.779 44.7583 cv
284.065 45.8594 284.638 47.3569 284.938 48.1719 cv
285.24 48.9863 285.269 49.1187 285.372 49.5664 cv
285.475 50.0142 285.651 50.7773 285.988 51.4307 cv
286.326 52.084 286.825 52.627 287.376 53.3467 cv
287.926 54.0659 288.528 54.9609 289.196 55.5483 cv
289.864 56.1357 290.598 56.4146 291.171 56.3267 cv
291.743 56.2388 292.154 55.7837 292.352 55.3066 cv
292.55 54.8291 292.536 54.3301 292.874 53.8237 cv
293.211 53.3174 293.901 52.8032 294.745 52.2012 cv
295.589 51.5996 296.588 50.9097 297.307 50.271 cv
298.026 49.6323 298.466 49.0449 298.276 48.1201 cv
298.085 47.1953 297.263 45.9326 296.521 44.8247 cv
295.78 43.7163 295.12 42.7622 294.166 42.0352 cv
293.211 41.3086 291.963 40.8091 291.068 40.2954 cv
290.172 39.7817 289.629 39.2529 289.079 38.9888 cv
288.528 38.7246 287.97 38.7246 287.442 38.4971 cv
286.913 38.2695 286.414 37.8145 286.003 37.6309 cv
285.592 37.4478 285.269 37.5352 284.932 37.8584 cv
284.594 38.1816 284.241 38.7393 284 39.5098 cv
283.757 40.2808 283.625 41.2646 283.559 42.1084 cv
283.559 42.1084 li
cp
294.921 55.6079 mo
294.415 55.9014 294.018 56.2534 293.71 56.606 cv
293.401 56.958 293.182 57.3105 293.116 57.751 cv
293.049 58.1914 293.137 58.7197 293.233 59.3145 cv
293.329 59.9087 293.431 60.5693 293.651 60.8853 cv
293.872 61.2007 294.209 61.1714 295.134 61.0835 cv
296.059 60.9951 297.571 60.8486 298.738 60.415 cv
299.905 59.9824 300.727 59.2632 301.087 58.3091 cv
301.447 57.3545 301.344 56.165 301.036 55.4092 cv
300.728 54.6528 300.213 54.3306 299.45 54.3081 cv
298.687 54.2861 297.674 54.5649 296.859 54.8223 cv
296.044 55.0791 295.428 55.314 294.921 55.6079 cv
294.921 55.6079 li
cp
310.916 55.7324 mo
310.123 55.2109 308.787 54.6973 307.789 54.5508 cv
306.791 54.4038 306.13 54.624 305.792 55.042 cv
305.455 55.4604 305.44 56.0771 305.433 56.7012 cv
305.425 57.3247 305.425 57.9565 305.536 58.4409 cv
305.646 58.9253 305.866 59.2632 306.306 59.689 cv
306.747 60.1143 307.407 60.6284 307.987 61.0098 cv
308.567 61.3916 309.066 61.6411 309.719 61.6782 cv
310.373 61.7144 311.18 61.5386 311.716 61.2007 cv
312.251 60.8633 312.516 60.3643 312.553 59.689 cv
312.589 59.0137 312.398 58.1621 312.178 57.4722 cv
311.958 56.7817 311.708 56.2534 310.916 55.7324 cv
310.916 55.7324 li
cp
313.043 45.9043 mo
312.559 46.4478 311.589 46.4185 310.694 46.3447 cv
309.799 46.2715 308.977 46.1543 308.154 46.1396 cv
307.332 46.1245 306.51 46.2124 305.747 46.4185 cv
304.983 46.624 304.279 46.9468 303.604 46.9912 cv
302.928 47.0352 302.282 46.7998 301.856 46.3447 cv
301.431 45.8896 301.225 45.2144 301.167 44.4658 cv
301.108 43.7168 301.196 42.895 301.387 42.1172 cv
301.578 41.3389 301.871 40.605 301.739 40.062 cv
301.607 39.5186 301.049 39.166 300.491 38.8433 cv
299.933 38.52 299.375 38.2266 299.126 37.4487 cv
298.876 36.6704 298.935 35.4077 298.964 34.4243 cv
298.994 33.4409 298.994 32.7363 298.642 32.2373 cv
298.289 31.7378 297.585 31.4443 296.982 30.9453 cv
296.381 30.4458 295.881 29.7412 295.662 28.582 cv
295.441 27.4219 295.5 25.8071 295.529 24.6182 cv
295.559 23.4287 295.559 22.6655 296.102 22.4307 cv
296.645 22.1953 297.731 22.4893 298.656 22.8271 cv
299.581 23.1641 300.345 23.5464 300.771 24.207 cv
301.196 24.8672 301.284 25.8071 301.769 26.3359 cv
302.253 26.8643 303.134 26.9814 304.117 27.0845 cv
305.101 27.187 306.188 27.2749 307.142 27.7012 cv
308.096 28.1265 308.917 28.8901 309.71 29.9175 cv
310.503 30.9453 311.267 32.2368 311.898 33.4111 cv
312.529 34.5859 313.028 35.6426 313.351 36.6118 cv
313.674 37.5806 313.821 38.4614 313.821 39.5332 cv
313.821 40.605 313.674 41.8672 313.601 43.0566 cv
313.527 44.2456 313.527 45.3613 313.043 45.9043 cv
313.043 45.9043 li
cp
322.276 35.437 mo
323.127 35.1436 323.92 34.9966 324.698 35.041 cv
325.476 35.085 326.24 35.3198 326.768 35.7749 cv
327.297 36.23 327.59 36.9053 328.06 37.5659 cv
328.53 38.2261 329.176 38.8726 329.763 39.1221 cv
330.35 39.3716 330.879 39.2251 331.069 38.6084 cv
331.26 37.9917 331.113 36.9053 331.055 35.8926 cv
330.996 34.8794 331.025 33.9395 330.174 32.604 cv
329.322 31.2681 327.59 29.5356 326.43 28.4639 cv
325.271 27.3926 324.684 26.9814 324.155 27.231 cv
323.626 27.4805 323.157 28.3906 322.775 29.2568 cv
322.394 30.123 322.1 30.9448 321.527 31.2974 cv
320.955 31.6494 320.104 31.5322 319.061 31.415 cv
318.019 31.2974 316.786 31.1797 315.772 30.6514 cv
314.76 30.123 313.967 29.1836 313.13 28.2148 cv
312.293 27.2456 311.413 26.2471 311.133 25.4399 cv
310.854 24.6323 311.177 24.0161 311.794 23.605 cv
312.411 23.1938 313.321 22.9883 313.82 22.5332 cv
314.319 22.0781 314.407 21.3735 314.407 20.6538 cv
314.407 19.9346 314.319 19.2007 314.892 18.2026 cv
315.464 17.2041 316.698 15.9419 318.004 14.6797 cv
319.311 13.4165 320.69 12.1543 321.821 11.2588 cv
322.951 10.3633 323.832 9.83447 324.61 9.61426 cv
325.388 9.39404 326.063 9.48193 327.002 9.2915 cv
327.942 9.10059 329.146 8.63086 330.115 8.05859 cv
331.083 7.48584 331.818 6.81055 332.479 6.31152 cv
333.139 5.8125 333.726 5.48926 334.607 5.40137 cv
335.488 5.31348 336.662 5.45996 337.705 5.15186 cv
338.747 4.84375 339.657 4.08008 340.479 3.39551 cv
341.302 2.71143 342.035 2.10596 343.137 1.80322 cv
344.237 1.5 345.706 1.5 347.35 1.5 cv
348.994 1.5 350.814 1.5 352.019 1.6709 cv
353.222 1.84131 353.809 2.18262 354.396 2.79395 cv
354.983 3.40479 355.57 4.28564 355.938 5.22559 cv
356.305 6.16455 356.451 7.16309 355.996 8.14648 cv
355.541 9.12988 354.484 10.0991 353.691 10.9653 cv
352.898 11.8311 352.37 12.5947 352.18 13.3877 cv
351.988 14.1802 352.136 15.002 352.62 15.5454 cv
353.104 16.0884 353.927 16.353 354.572 16.0005 cv
355.219 15.6484 355.688 14.6797 356.202 13.96 cv
356.716 13.2407 357.273 12.771 357.861 12.7417 cv
358.448 12.7119 359.064 13.123 359.329 13.9893 cv
359.593 14.8555 359.505 16.1768 359.094 18.4375 cv
358.683 20.6982 357.949 23.8984 357.317 26.5117 cv
356.687 29.125 356.158 31.1509 355.497 32.457 cv
354.837 33.7637 354.044 34.3511 353.119 34.9526 cv
352.194 35.5547 351.138 36.1714 350.418 36.7881 cv
349.698 37.4043 349.316 38.021 349.596 38.7993 cv
349.874 39.5771 350.814 40.5166 351.387 41.2651 cv
351.959 42.0142 352.165 42.5723 351.71 43.3799 cv
351.255 44.1865 350.139 45.2432 349.405 45.9189 cv
348.671 46.5942 348.319 46.8877 348.055 47.6074 cv
347.79 48.3267 347.614 49.4717 347.306 50.4697 cv
346.997 51.4678 346.558 52.3193 346.014 53.1563 cv
345.471 53.9932 344.824 54.8149 344.252 55.3438 cv
343.68 55.8721 343.181 56.1069 342.461 56.019 cv
341.742 55.9307 340.803 55.52 340.039 55.52 cv
339.275 55.52 338.688 55.9307 338.438 56.4741 cv
338.189 57.0176 338.277 57.6924 338.732 58.6025 cv
339.188 59.5127 340.009 60.6577 340.993 60.9077 cv
341.977 61.1572 343.122 60.5112 344.678 59.9678 cv
346.234 59.4248 348.201 58.9844 349.596 58.8818 cv
350.99 58.7788 351.813 59.0137 352.238 59.6304 cv
352.664 60.2471 352.693 61.2451 352.355 62.4346 cv
352.019 63.623 351.313 65.0034 350.652 66.0459 cv
349.992 67.0879 349.376 67.793 347.878 68.791 cv
346.381 69.7891 344.003 71.0811 342.52 71.5806 cv
341.037 72.0796 340.45 71.7856 339.599 70.7729 cv
338.747 69.7598 337.631 68.0273 336.721 66.7798 cv
335.811 65.5322 335.106 64.7686 334.49 64.3867 cv
333.874 64.0049 333.345 64.0049 332.845 64.4312 cv
332.346 64.8564 331.876 65.708 331.245 66.9561 cv
330.614 68.2036 329.821 69.8477 329.131 70.7729 cv
328.441 71.6978 327.854 71.9033 327.458 71.7856 cv
327.062 71.6685 326.856 71.228 326.489 70.4497 cv
326.122 69.6719 325.593 68.5557 324.991 68.0864 cv
324.39 67.6167 323.714 67.793 323.024 68.1304 cv
322.334 68.4678 321.629 68.9673 320.617 69.2168 cv
319.604 69.4663 318.282 69.4663 317.328 69.5986 cv
316.374 69.7305 315.787 69.9951 315.229 70.0684 cv
314.671 70.1416 314.143 70.0244 313.658 69.6719 cv
313.173 69.3193 312.733 68.7319 312.733 67.8223 cv
312.733 66.9121 313.173 65.6787 313.79 64.666 cv
314.407 63.6528 315.2 62.8599 315.669 62.3022 cv
316.139 61.7441 316.286 61.4219 316.345 60.7314 cv
316.404 60.0415 316.374 58.9844 316.242 58.2065 cv
316.11 57.4282 315.875 56.9292 315.625 56.3569 cv
315.376 55.7842 315.111 55.1382 315.361 54.1689 cv
315.61 53.2002 316.374 51.9087 317.123 51.1309 cv
317.871 50.3525 318.605 50.0879 319.09 50.3525 cv
319.575 50.6167 319.809 51.4092 319.927 52.4663 cv
320.044 53.5234 320.044 54.8447 320.382 55.9165 cv
320.719 56.9878 321.395 57.8101 322.54 58.353 cv
323.685 58.8965 325.3 59.1606 326.973 58.8965 cv
328.646 58.6318 330.379 57.8394 331.495 56.7676 cv
332.61 55.6963 333.109 54.3452 333.036 53.4941 cv
332.963 52.6426 332.317 52.29 331.568 52.4077 cv
330.819 52.5249 329.968 53.1123 329.234 53.6846 cv
328.5 54.2573 327.884 54.8149 326.9 54.9917 cv
325.917 55.1675 324.566 54.9619 323.861 54.4775 cv
323.156 53.9932 323.098 53.2295 323.743 52.0552 cv
324.39 50.8809 325.74 49.2954 326.356 48.0479 cv
326.973 46.7998 326.856 45.8896 326.444 45.0527 cv
326.034 44.2163 325.329 43.4526 324.536 43.2471 cv
323.744 43.0415 322.863 43.3936 322.084 44.1865 cv
321.307 44.979 320.631 46.2124 319.868 46.8145 cv
319.104 47.416 318.253 47.3872 317.783 46.9321 cv
317.313 46.4766 317.226 45.5957 317.181 44.4658 cv
317.137 43.3354 317.137 41.9551 317.548 40.6045 cv
317.959 39.2539 318.782 37.9331 319.647 37.0522 cv
320.514 36.1709 321.424 35.731 322.276 35.437 cv
322.276 35.437 li
cp
292.78 84.873 mo
292.135 85.3945 291.136 86.084 290.534 86.7964 cv
289.932 87.5083 289.727 88.2422 289.396 89.1895 cv
289.066 90.1362 288.611 91.2954 288.318 92.1182 cv
288.024 92.9399 287.892 93.4243 287.907 93.8574 cv
287.921 94.2905 288.083 94.6724 288.384 95.2378 cv
288.685 95.8027 289.125 96.5513 289.617 97.0435 cv
290.108 97.5352 290.652 97.77 291.195 97.8506 cv
291.738 97.9312 292.281 97.8579 292.692 97.9609 cv
293.104 98.0635 293.382 98.3428 293.617 98.6509 cv
293.852 98.959 294.043 99.2969 294.608 99.4585 cv
295.173 99.6196 296.113 99.605 297.229 99.5977 cv
298.344 99.5903 299.636 99.5903 300.437 99.4434 cv
301.237 99.2969 301.545 99.0029 301.779 98.5039 cv
302.015 98.0049 302.176 97.3003 302.051 95.5605 cv
301.926 93.8208 301.515 91.0464 301.229 89.417 cv
300.942 87.7876 300.781 87.3032 300.333 86.9805 cv
299.886 86.6572 299.152 86.4956 298.66 86.0479 cv
298.168 85.6001 297.918 84.8657 297.794 84.2422 cv
297.669 83.6182 297.669 83.104 297.346 82.8472 cv
297.023 82.5903 296.377 82.5903 295.768 82.7666 cv
295.159 82.9429 294.586 83.2949 294.153 83.6475 cv
293.72 84 293.427 84.3521 292.78 84.873 cv
292.78 84.873 li
cp
292.294 74.4722 mo
293.41 74.6187 294.878 74.5313 295.964 74.5161 cv
297.051 74.502 297.756 74.5601 298.901 74.8247 cv
300.046 75.0889 301.631 75.5586 302.717 76.2632 cv
303.804 76.9678 304.391 77.9077 304.655 79.3906 cv
304.919 80.873 304.861 82.8989 304.861 85.1743 cv
304.861 87.4497 304.919 89.9746 305.184 91.6191 cv
305.448 93.2632 305.918 94.0264 306.491 94.6577 cv
307.063 95.2891 307.738 95.7881 308.561 96.0522 cv
309.382 96.3164 310.352 96.3462 311.717 96.4053 cv
313.083 96.4634 314.844 96.5513 316.223 96.7573 cv
317.604 96.9624 318.602 97.2856 319.307 98.0635 cv
320.011 98.8413 320.422 100.075 320.936 100.691 cv
321.45 101.308 322.066 101.308 322.874 101.25 cv
323.681 101.19 324.68 101.073 325.267 100.589 cv
325.854 100.104 326.03 99.2529 326.72 98.6655 cv
327.41 98.0786 328.614 97.7554 330.39 97.5059 cv
332.167 97.2559 334.515 97.0801 336.732 96.9038 cv
338.949 96.7275 341.033 96.5513 342.751 96.1553 cv
344.469 95.7588 345.819 95.1421 346.95 94.8491 cv
348.08 94.5547 348.99 94.5845 349.856 94.6284 cv
350.723 94.6724 351.545 94.731 351.985 94.0562 cv
352.426 93.3804 352.484 91.9712 352.572 90.0776 cv
352.66 88.1836 352.778 85.8057 352.514 83.8682 cv
352.249 81.9297 351.604 80.4326 350.972 79.2876 cv
350.341 78.1421 349.725 77.3496 349.182 76.8945 cv
348.638 76.4395 348.168 76.3218 347.449 76.1016 cv
346.729 75.8813 345.761 75.5586 345.1 75.3975 cv
344.439 75.2358 344.087 75.2358 343.617 75.2207 cv
343.147 75.2065 342.561 75.1768 341.855 75.5288 cv
341.151 75.8813 340.329 76.6157 339.698 77.1147 cv
339.066 77.6138 338.626 77.8779 337.774 78.0249 cv
336.923 78.1719 335.661 78.2012 334.662 78.4946 cv
333.664 78.7881 332.93 79.3462 331.667 80.1978 cv
330.405 81.0488 328.614 82.1938 327.322 83.2363 cv
326.03 84.2788 325.237 85.2183 324.225 85.4385 cv
323.211 85.6587 321.978 85.1597 320.261 84.7046 cv
318.543 84.2495 316.341 83.8384 314.711 83.5303 cv
313.082 83.2217 312.025 83.0166 311.085 82.312 cv
310.146 81.6069 309.324 80.4033 309.368 79.4053 cv
309.412 78.4067 310.322 77.6138 311.306 77.1294 cv
312.29 76.645 313.346 76.4688 313.875 76.2339 cv
314.403 75.999 314.403 75.7056 314.183 75.1328 cv
313.963 74.5601 313.522 73.709 312.818 73.019 cv
312.113 72.3291 311.144 71.8003 310.087 71.5361 cv
309.03 71.272 307.885 71.272 306.857 70.9492 cv
305.83 70.626 304.919 69.98 304.186 69.1284 cv
303.452 68.2773 302.894 67.2202 302.219 66.8242 cv
301.543 66.4277 300.75 66.6919 300.002 66.9854 cv
299.253 67.2788 298.548 67.6016 297.712 67.3374 cv
296.875 67.0732 295.906 66.2217 294.834 65.6348 cv
293.763 65.0474 292.588 64.7246 291.531 64.6514 cv
290.474 64.5776 289.535 64.7539 288.683 65.2969 cv
287.832 65.8403 287.068 66.75 287.245 68.189 cv
287.42 69.6274 288.537 71.5952 289.476 72.7695 cv
290.416 73.9434 291.179 74.3252 292.294 74.4722 cv
292.294 74.4722 li
cp
319.094 121.571 mo
318.482 124.62 317.807 127.85 317.234 130.507 cv
316.661 133.164 316.192 135.249 315.957 136.659 cv
315.722 138.067 315.722 138.801 316.016 139.506 cv
316.309 140.211 316.896 140.886 318.981 141.987 cv
321.065 143.088 324.647 144.615 326.542 145.511 cv
328.436 146.406 328.641 146.67 328.655 147.023 cv
328.67 147.375 328.494 147.815 327.628 148.08 cv
326.761 148.344 325.206 148.432 323.84 148.491 cv
322.475 148.549 321.3 148.579 320.654 148.902 cv
320.008 149.225 319.891 149.841 320.067 150.942 cv
320.243 152.043 320.713 153.628 321.447 154.744 cv
322.181 155.86 323.18 156.506 324.471 157.123 cv
325.763 157.739 327.349 158.327 328.553 158.532 cv
329.756 158.738 330.579 158.562 331.416 157.989 cv
332.252 157.417 333.104 156.448 333.661 156.037 cv
334.219 155.625 334.483 155.772 334.719 156.448 cv
334.954 157.123 335.159 158.327 335.687 159.031 cv
336.216 159.736 337.067 159.941 337.684 159.736 cv
338.3 159.53 338.682 158.914 339.21 158.268 cv
339.739 157.622 340.415 156.947 340.899 156.8 cv
341.384 156.653 341.677 157.035 342.073 157.563 cv
342.47 158.092 342.969 158.768 343.446 159.237 cv
343.923 159.707 344.378 159.971 345.053 160.125 cv
345.729 160.28 346.624 160.324 347.255 160.155 cv
347.887 159.986 348.254 159.604 348.407 159.127 cv
348.562 158.65 348.503 158.078 348.841 157.769 cv
349.179 157.461 349.912 157.417 350.926 157.563 cv
351.938 157.71 353.23 158.048 354.126 158.202 cv
355.021 158.356 355.521 158.327 356.02 157.989 cv
356.519 157.652 357.019 157.006 357.425 156.525 cv
357.833 156.044 358.148 155.729 358.578 155.571 cv
359.007 155.413 359.551 155.413 359.977 155.538 cv
360.402 155.663 360.71 155.912 361.063 156.213 cv
361.415 156.514 361.812 156.866 362.509 157.043 cv
363.206 157.219 364.204 157.219 365.012 157.064 cv
365.819 156.91 366.436 156.602 367.037 156.558 cv
367.64 156.514 368.227 156.734 368.813 156.962 cv
369.401 157.189 369.988 157.424 370.568 157.498 cv
371.148 157.571 371.721 157.483 372.308 157.219 cv
372.896 156.954 373.497 156.514 373.725 155.897 cv
373.952 155.281 373.806 154.488 373.688 153.931 cv
373.57 153.373 373.482 153.05 372.631 152.426 cv
371.779 151.802 370.165 150.877 369.041 150.216 cv
367.918 149.556 367.287 149.159 366.692 148.514 cv
366.098 147.868 365.539 146.972 365.701 146.172 cv
365.862 145.372 366.743 144.667 367.528 144.477 cv
368.313 144.285 369.004 144.608 369.598 145.093 cv
370.192 145.578 370.692 146.223 371.133 146.693 cv
371.573 147.163 371.955 147.457 372.696 147.64 cv
373.438 147.824 374.538 147.897 375.617 147.912 cv
376.696 147.926 377.753 147.882 378.392 147.941 cv
379.03 148 379.251 148.161 379.31 148.69 cv
379.368 149.218 379.266 150.113 379.28 150.671 cv
379.295 151.229 379.427 151.449 379.786 151.75 cv
380.146 152.051 380.733 152.433 381.24 152.727 cv
381.746 153.021 382.172 153.226 382.591 153.651 cv
383.009 154.078 383.42 154.724 383.948 155.325 cv
384.478 155.927 385.123 156.485 385.732 157.006 cv
386.341 157.527 386.913 158.012 387.516 158.46 cv
388.117 158.907 388.749 159.318 389.027 159.825 cv
389.307 160.332 389.233 160.933 388.946 161.646 cv
388.66 162.357 388.161 163.179 387.846 163.884 cv
387.529 164.588 387.397 165.176 387.802 165.653 cv
388.205 166.13 389.145 166.497 389.761 166.681 cv
390.378 166.864 390.671 166.864 391.273 166.299 cv
391.875 165.734 392.785 164.603 393.607 163.7 cv
394.43 162.798 395.164 162.123 395.81 161.733 cv
396.456 161.344 397.014 161.241 397.49 161.447 cv
397.968 161.652 398.364 162.167 398.694 162.849 cv
399.024 163.532 399.289 164.383 399.84 165.015 cv
400.39 165.646 401.227 166.057 401.99 166.446 cv
402.754 166.835 403.443 167.202 404.148 167.591 cv
404.853 167.98 405.572 168.391 406.336 168.596 cv
407.1 168.802 407.906 168.802 408.435 168.816 cv
408.964 168.831 409.213 168.86 409.595 169.359 cv
409.977 169.859 410.49 170.828 410.916 171.65 cv
411.342 172.472 411.68 173.147 412.156 173.507 cv
412.634 173.866 413.25 173.911 414.308 173.903 cv
415.364 173.896 416.862 173.837 418.014 173.962 cv
419.167 174.086 419.974 174.395 420.437 174.857 cv
420.899 175.32 421.017 175.936 421.002 176.523 cv
420.987 177.111 420.84 177.668 420.326 177.918 cv
419.813 178.167 418.932 178.109 418.212 178.124 cv
417.493 178.138 416.935 178.227 416.318 178.667 cv
415.701 179.107 415.026 179.9 414.675 180.678 cv
414.322 181.456 414.292 182.219 414.645 183.056 cv
414.997 183.893 415.731 184.803 416.832 185.214 cv
417.934 185.625 419.401 185.538 420.605 185.244 cv
421.81 184.95 422.748 184.451 423.247 183.731 cv
423.746 183.012 423.806 182.073 424.069 181.456 cv
424.334 180.839 424.804 180.546 425.626 180.341 cv
426.448 180.135 427.622 180.018 428.826 180.047 cv
430.03 180.076 431.264 180.252 432.511 180.986 cv
433.759 181.72 435.021 183.012 435.858 183.952 cv
436.695 184.892 437.105 185.479 436.915 186.242 cv
436.724 187.005 435.932 187.945 435.241 188.738 cv
434.552 189.53 433.964 190.176 433.348 190.793 cv
432.731 191.409 432.085 191.997 431.277 191.967 cv
430.471 191.938 429.501 191.292 428.562 190.631 cv
427.622 189.971 426.712 189.295 425.816 188.855 cv
424.921 188.415 424.04 188.209 423.174 188.106 cv
422.309 188.003 421.456 188.003 420.723 188.195 cv
419.988 188.385 419.372 188.767 418.932 189.222 cv
418.491 189.677 418.227 190.206 417.742 190.338 cv
417.258 190.47 416.554 190.206 416.069 190.059 cv
415.585 189.912 415.32 189.883 414.982 190.22 cv
414.645 190.558 414.233 191.263 413.97 191.835 cv
413.705 192.408 413.588 192.848 413.471 193.714 cv
413.353 194.581 413.235 195.873 413.367 196.827 cv
413.5 197.781 413.882 198.398 414.483 199.103 cv
415.085 199.807 415.907 200.6 416.538 201.363 cv
417.17 202.127 417.61 202.861 417.815 203.536 cv
418.021 204.212 417.992 204.828 417.728 205.459 cv
417.464 206.091 416.965 206.737 415.761 207.544 cv
414.557 208.352 412.648 209.32 411.459 209.952 cv
410.271 210.583 409.801 210.876 409.125 210.921 cv
408.45 210.965 407.569 210.759 406.762 210.833 cv
405.954 210.906 405.221 211.258 403.62 212.022 cv
402.02 212.785 399.554 213.959 397.924 214.796 cv
396.294 215.633 395.502 216.132 395.12 217.41 cv
394.738 218.687 394.768 220.742 394.797 222.239 cv
394.826 223.737 394.855 224.676 395.208 225.322 cv
395.561 225.968 396.235 226.32 397.381 226.658 cv
398.526 226.996 400.141 227.318 402.122 227.597 cv
404.104 227.876 406.453 228.111 407.818 227.847 cv
409.184 227.583 409.565 226.819 410.006 226.041 cv
410.446 225.263 410.945 224.47 411.738 223.957 cv
412.531 223.443 413.617 223.208 414.41 222.929 cv
415.203 222.65 415.702 222.327 415.746 221.637 cv
415.79 220.947 415.379 219.89 415.276 219.156 cv
415.174 218.422 415.379 218.011 416.157 217.806 cv
416.936 217.6 418.286 217.6 419.533 217.835 cv
420.781 218.07 421.927 218.54 422.939 219.215 cv
423.952 219.89 424.833 220.771 425.611 221.314 cv
426.39 221.857 427.064 222.063 428.034 222.107 cv
429.003 222.151 430.265 222.033 431.234 222.18 cv
432.203 222.327 432.878 222.738 433.362 223.428 cv
433.847 224.118 434.141 225.087 434.464 225.807 cv
434.786 226.525 435.139 226.996 435.623 227.26 cv
436.108 227.524 436.725 227.583 437.473 227.847 cv
438.222 228.111 439.103 228.581 439.895 229.33 cv
440.688 230.079 441.392 231.106 442.097 231.812 cv
442.802 232.516 443.506 232.897 444.137 233.323 cv
444.769 233.749 445.326 234.219 446.192 234.307 cv
447.059 234.395 448.233 234.102 449.599 233.705 cv
450.964 233.309 452.52 232.81 453.797 232.78 cv
455.074 232.75 456.072 233.191 457.394 233.866 cv
458.715 234.542 460.358 235.452 461.621 236.156 cv
462.884 236.861 463.765 237.36 465.145 237.39 cv
466.524 237.419 468.403 236.979 470.694 236.538 cv
472.984 236.098 475.686 235.657 478.24 235.173 cv
480.794 234.688 483.201 234.16 483.833 233.543 cv
484.465 232.927 483.319 232.222 482.115 231.694 cv
480.911 231.166 479.649 230.813 478.695 230.108 cv
477.74 229.403 477.095 228.347 475.686 227.319 cv
474.276 226.292 472.104 225.293 470.576 224.604 cv
469.05 223.913 468.169 223.531 466.495 223.238 cv
464.822 222.944 462.355 222.739 460.594 222.563 cv
458.832 222.386 457.775 222.239 456.719 221.74 cv
455.661 221.241 454.604 220.39 454.135 219.685 cv
453.665 218.98 453.782 218.423 454.824 217.923 cv
455.867 217.424 457.834 216.984 459.464 217.146 cv
461.093 217.307 462.385 218.07 463.368 218.672 cv
464.352 219.274 465.027 219.714 466.055 219.905 cv
467.083 220.096 468.463 220.037 469.461 220.302 cv
470.459 220.566 471.076 221.153 472.177 221.579 cv
473.277 222.004 474.863 222.269 477.124 222.196 cv
479.385 222.122 482.321 221.711 484.083 221.461 cv
485.845 221.212 486.432 221.124 486.549 220.713 cv
486.666 220.302 486.314 219.567 485.58 218.085 cv
484.846 216.603 483.73 214.371 482.894 213.064 cv
482.057 211.758 481.499 211.375 480.662 211.126 cv
479.825 210.877 478.71 210.759 477.917 210.657 cv
477.124 210.554 476.654 210.466 476.111 209.923 cv
475.567 209.379 474.951 208.381 474.203 207.603 cv
473.454 206.825 472.573 206.267 472.133 205.592 cv
471.692 204.917 471.692 204.124 471.517 203.258 cv
471.34 202.392 470.988 201.452 470.474 200.659 cv
469.96 199.867 469.285 199.221 468.609 198.868 cv
467.935 198.516 467.259 198.457 466.613 198.428 cv
465.967 198.398 465.351 198.398 464.528 197.929 cv
463.706 197.459 462.679 196.52 462.062 195.683 cv
461.445 194.846 461.24 194.112 460.976 193.554 cv
460.712 192.996 460.389 192.614 460.007 192.585 cv
459.625 192.556 459.185 192.878 458.392 193.202 cv
457.599 193.525 456.454 193.848 455.456 194.2 cv
454.458 194.552 453.606 194.934 452.916 194.978 cv
452.227 195.022 451.697 194.729 451.316 194.112 cv
450.935 193.496 450.699 192.556 450.288 191.896 cv
449.877 191.235 449.29 190.853 448.614 190.53 cv
447.939 190.207 447.176 189.943 446.574 189.679 cv
445.973 189.414 445.532 189.15 445.737 188.813 cv
445.942 188.475 446.795 188.063 447.411 187.491 cv
448.027 186.918 448.409 186.185 448.482 185.671 cv
448.556 185.157 448.321 184.863 447.969 184.731 cv
447.616 184.599 447.146 184.628 446.691 184.408 cv
446.236 184.188 445.797 183.718 445.414 182.896 cv
445.033 182.074 444.71 180.899 444.666 180.033 cv
444.622 179.167 444.856 178.61 445.502 178.067 cv
446.148 177.523 447.205 176.995 448.174 176.922 cv
449.143 176.848 450.024 177.23 450.611 177.876 cv
451.198 178.522 451.492 179.432 451.918 179.946 cv
452.344 180.46 452.901 180.577 453.812 180.43 cv
454.722 180.284 455.984 179.872 456.895 179.417 cv
457.805 178.962 458.362 178.463 458.832 178.448 cv
459.302 178.434 459.684 178.903 459.859 179.447 cv
460.036 179.99 460.007 180.606 459.934 181.34 cv
459.86 182.074 459.742 182.926 460.007 183.866 cv
460.271 184.805 460.917 185.833 461.445 186.552 cv
461.974 187.271 462.385 187.683 463.839 187.961 cv
465.292 188.24 467.787 188.387 469.931 188.534 cv
472.074 188.681 473.865 188.827 474.613 188.548 cv
475.362 188.27 475.069 187.565 474.805 186.846 cv
474.541 186.126 474.306 185.392 473.542 184.747 cv
472.778 184.1 471.487 183.542 470.356 182.926 cv
469.227 182.309 468.257 181.634 467.979 181.208 cv
467.699 180.783 468.11 180.606 468.565 180.357 cv
469.021 180.107 469.52 179.785 469.96 179.652 cv
470.4 179.52 470.782 179.579 471.546 179.388 cv
472.309 179.197 473.454 178.757 474.32 178.258 cv
475.187 177.758 475.773 177.2 476.375 176.613 cv
476.978 176.026 477.594 175.41 477.696 174.969 cv
477.8 174.529 477.389 174.264 476.596 173.795 cv
475.803 173.325 474.629 172.65 473.719 171.857 cv
472.809 171.064 472.162 170.155 472.368 169.362 cv
472.573 168.569 473.631 167.894 474.525 167.424 cv
475.422 166.954 476.155 166.69 476.479 166.162 cv
476.802 165.633 476.713 164.84 476.493 164.106 cv
476.272 163.372 475.921 162.697 475.407 162.037 cv
474.894 161.375 474.218 160.729 473.499 160.363 cv
472.779 159.996 472.016 159.908 470.151 159.893 cv
468.287 159.878 465.321 159.937 463.589 159.849 cv
461.856 159.761 461.357 159.526 460.785 158.983 cv
460.213 158.439 459.566 157.588 458.495 157.016 cv
457.423 156.443 455.926 156.149 454.84 155.958 cv
453.753 155.768 453.078 155.68 452.183 155.885 cv
451.287 156.091 450.172 156.59 449.275 157.089 cv
448.38 157.588 447.705 158.087 446.971 158.175 cv
446.237 158.263 445.444 157.941 444.534 157.574 cv
443.624 157.206 442.596 156.795 441.539 156.458 cv
440.482 156.12 439.396 155.856 438.471 155.753 cv
437.546 155.65 436.783 155.709 436.431 156.047 cv
436.078 156.384 436.137 157.001 436.255 157.809 cv
436.372 158.616 436.548 159.614 436.445 160.392 cv
436.343 161.17 435.961 161.728 435.388 162.125 cv
434.815 162.521 434.052 162.756 433.392 162.653 cv
432.731 162.55 432.173 162.109 432.056 161.581 cv
431.938 161.053 432.261 160.436 432.555 159.893 cv
432.849 159.35 433.113 158.88 433.172 158.205 cv
433.23 157.529 433.083 156.648 432.819 156.105 cv
432.555 155.562 432.173 155.356 431.601 155.254 cv
431.028 155.151 430.265 155.151 429.678 155.151 cv
429.091 155.151 428.679 155.151 427.931 154.813 cv
427.182 154.476 426.096 153.8 425.464 153.213 cv
424.833 152.626 424.657 152.127 424.642 151.275 cv
424.627 150.424 424.774 149.22 425.142 148.413 cv
425.509 147.605 426.096 147.194 426.859 146.93 cv
427.622 146.666 428.562 146.548 429.398 146.475 cv
430.235 146.402 430.969 146.372 431.63 146.093 cv
432.291 145.814 432.878 145.286 433.127 144.493 cv
433.377 143.7 433.288 142.643 432.745 141.909 cv
432.202 141.175 431.203 140.764 430.484 140.559 cv
429.765 140.353 429.324 140.353 428.811 140.353 cv
428.297 140.353 427.709 140.353 427.298 139.634 cv
426.887 138.915 426.652 137.476 426.109 136.287 cv
425.565 135.098 424.714 134.158 423.951 133.629 cv
423.188 133.101 422.513 132.983 422.028 133.277 cv
421.544 133.571 421.25 134.276 420.56 135.347 cv
419.87 136.419 418.783 137.857 417.902 138.885 cv
417.021 139.913 416.347 140.529 415.48 140.691 cv
414.614 140.853 413.558 140.559 412.956 139.883 cv
412.354 139.208 412.207 138.151 412.926 137.358 cv
413.646 136.566 415.231 136.037 416.053 135.156 cv
416.875 134.276 416.934 133.042 416.831 131.868 cv
416.729 130.693 416.464 129.578 415.612 128.961 cv
414.761 128.345 413.322 128.228 412.427 128.433 cv
411.531 128.638 411.179 129.167 410.782 130.121 cv
410.387 131.075 409.946 132.455 409.462 133.233 cv
408.978 134.012 408.448 134.188 408.185 133.835 cv
407.92 133.483 407.92 132.602 407.905 131.81 cv
407.891 131.017 407.861 130.312 407.317 129.916 cv
406.775 129.519 405.718 129.431 404.926 129.769 cv
404.133 130.106 403.604 130.87 403.192 131.531 cv
402.782 132.191 402.488 132.749 402.165 132.969 cv
401.842 133.189 401.49 133.072 401.05 132.764 cv
400.609 132.455 400.08 131.956 400.036 131.046 cv
399.992 130.135 400.433 128.814 400.976 127.376 cv
401.52 125.938 402.165 124.381 401.211 123.089 cv
400.257 121.797 397.702 120.77 396.146 120.506 cv
394.59 120.242 394.032 120.741 393.899 121.387 cv
393.768 122.033 394.062 122.825 393.591 123.647 cv
393.122 124.47 391.889 125.321 390.948 126.216 cv
390.01 127.112 389.363 128.051 388.908 128.096 cv
388.453 128.14 388.189 127.288 387.896 126.07 cv
387.602 124.851 387.278 123.266 386.574 122.811 cv
385.869 122.355 384.783 123.031 383.8 123.457 cv
382.816 123.882 381.935 124.059 381.289 123.867 cv
380.644 123.677 380.231 123.119 379.88 122.561 cv
379.527 122.003 379.233 121.445 379.366 120.755 cv
379.498 120.065 380.056 119.243 380.203 118.23 cv
380.35 117.217 380.085 116.013 379.821 115.294 cv
379.557 114.575 379.293 114.34 378.617 114.296 cv
377.942 114.252 376.855 114.399 375.931 114.825 cv
375.006 115.25 374.242 115.955 373.259 116.234 cv
372.275 116.514 371.071 116.366 370.117 116.366 cv
369.163 116.366 368.459 116.514 368.106 117.086 cv
367.754 117.658 367.754 118.657 367.886 119.992 cv
368.018 121.329 368.282 123.002 368.018 123.927 cv
367.754 124.852 366.961 125.028 366.08 124.984 cv
365.199 124.939 364.23 124.676 363.232 124.911 cv
362.234 125.146 361.206 125.879 360.458 126.423 cv
359.709 126.966 359.239 127.318 358.535 127.157 cv
357.83 126.995 356.891 126.32 356.332 125.63 cv
355.774 124.939 355.599 124.235 355.862 123.251 cv
356.127 122.268 356.832 121.005 357.14 119.919 cv
357.448 118.833 357.36 117.923 356.759 116.719 cv
356.156 115.515 355.041 114.017 353.837 112.858 cv
352.633 111.698 351.341 110.876 350.637 109.922 cv
349.932 108.968 349.814 107.881 349.036 107.221 cv
348.258 106.56 346.819 106.325 345.646 106.414 cv
344.471 106.501 343.561 106.912 342.533 107.925 cv
341.505 108.938 340.36 110.553 339.567 112.594 cv
338.774 114.634 338.334 117.101 337.938 119.42 cv
337.542 121.739 337.189 123.912 337.262 125.645 cv
337.336 127.377 337.835 128.669 338.408 129.711 cv
338.98 130.753 339.626 131.546 340.301 132.735 cv
340.977 133.924 341.682 135.51 342.415 137.448 cv
343.149 139.385 343.913 141.675 344.221 143.202 cv
344.529 144.729 344.383 145.492 343.795 146.036 cv
343.208 146.579 342.181 146.902 341.505 146.535 cv
340.83 146.167 340.507 145.111 339.714 143.481 cv
338.921 141.852 337.659 139.649 336.558 137.874 cv
335.457 136.097 334.518 134.747 333.578 133.411 cv
332.638 132.075 331.699 130.753 331.317 129.432 cv
330.936 128.111 331.111 126.79 331.39 125.248 cv
331.669 123.707 332.051 121.945 332.447 119.816 cv
332.844 117.688 333.255 115.192 333.93 113.151 cv
334.605 111.111 335.544 109.525 335.677 108.381 cv
335.809 107.235 335.134 106.531 334.121 106.134 cv
333.108 105.738 331.757 105.65 330.524 105.708 cv
329.291 105.767 328.175 105.973 327.104 106.34 cv
326.032 106.707 325.004 107.235 324.167 107.881 cv
323.331 108.527 322.685 109.291 322.156 110.127 cv
321.628 110.964 321.217 111.875 320.736 113.764 cv
320.256 115.653 319.707 118.522 319.094 121.571 cv
319.094 121.571 li
cp
358.533 104.417 mo
357.564 104.329 356.185 104.505 355.494 104.975 cv
354.805 105.444 354.805 106.208 355.23 107.104 cv
355.656 107.999 356.507 109.026 357.594 110.583 cv
358.68 112.139 360.001 114.224 360.984 115.075 cv
361.969 115.926 362.614 115.545 363.378 114.987 cv
364.141 114.429 365.022 113.695 366.196 113.284 cv
367.371 112.873 368.839 112.785 370.013 112.653 cv
371.188 112.521 372.068 112.344 372.626 111.596 cv
373.185 110.847 373.419 109.526 373.419 108.484 cv
373.419 107.441 373.185 106.678 372.259 105.958 cv
371.335 105.239 369.72 104.563 368.398 103.727 cv
367.077 102.89 366.05 101.892 365.315 101.481 cv
364.581 101.07 364.142 101.246 363.76 101.863 cv
363.378 102.479 363.055 103.536 362.541 104.167 cv
362.027 104.799 361.322 105.004 360.691 104.931 cv
360.06 104.857 359.502 104.505 358.533 104.417 cv
358.533 104.417 li
cp
400.607 171.858 mo
399.99 172.446 399.99 173.444 400.255 174.376 cv
400.52 175.308 401.048 176.174 401.958 176.989 cv
402.868 177.804 404.16 178.567 405.393 178.913 cv
406.626 179.257 407.801 179.184 408.344 178.707 cv
408.887 178.23 408.799 177.349 408.3 176.38 cv
407.801 175.411 406.891 174.354 406.054 173.43 cv
405.217 172.504 404.453 171.712 403.455 171.403 cv
402.457 171.095 401.224 171.271 400.607 171.858 cv
400.607 171.858 li
cp
388.422 175.059 mo
387.923 176.116 387.747 176.732 387.688 177.569 cv
387.63 178.406 387.688 179.463 387.614 180.667 cv
387.542 181.87 387.336 183.221 387.512 184.19 cv
387.688 185.159 388.246 185.746 388.892 186.686 cv
389.538 187.625 390.272 188.917 390.83 189.592 cv
391.388 190.268 391.77 190.326 392.371 190.312 cv
392.974 190.297 393.796 190.209 394.324 189.856 cv
394.853 189.504 395.087 188.887 395.675 188.212 cv
396.262 187.537 397.201 186.803 397.656 186.025 cv
398.111 185.247 398.082 184.425 398.053 183.191 cv
398.023 181.958 397.994 180.314 397.817 179.096 cv
397.642 177.877 397.318 177.085 396.614 176.16 cv
395.909 175.235 394.823 174.178 393.751 173.297 cv
392.68 172.416 391.623 171.712 390.684 172.108 cv
389.743 172.504 388.922 174.002 388.422 175.059 cv
388.422 175.059 li
cp
185.414 446.027 mo
180.814 445.109 174.121 443.817 166.869 442.262 cv
159.616 440.705 151.806 438.886 143.556 436.742 cv
135.306 434.599 126.615 432.132 118.423 429.343 cv
110.231 426.554 102.539 423.441 94.2007 420.124 cv
85.8623 416.806 76.8779 413.283 70.125 410.729 cv
63.3721 408.174 58.8506 406.589 56.3843 405.297 cv
53.918 404.005 53.5068 403.007 52.9492 402.126 cv
52.3911 401.245 51.6865 400.481 51.4517 399.513 cv
51.2168 398.544 51.4517 397.369 50.9819 396.253 cv
50.5117 395.138 49.3379 394.081 47.7817 392.231 cv
46.2251 390.382 44.2871 387.739 43.3774 385.331 cv
42.4673 382.924 42.5845 380.751 42.291 378.96 cv
41.9971 377.169 41.293 375.76 40.0894 373.998 cv
38.8853 372.236 37.1821 370.122 35.2441 368.654 cv
33.3066 367.187 31.1338 366.364 30.1064 365.542 cv
29.0786 364.72 29.1958 363.897 29.46 362.43 cv
29.7241 360.962 30.1357 358.848 30.0181 357.145 cv
29.9004 355.441 29.2544 354.15 29.3428 353.269 cv
29.4312 352.389 30.2529 351.919 31.5156 351.185 cv
32.7778 350.451 34.481 349.452 34.8628 348.249 cv
35.2441 347.045 34.3052 345.636 33.7729 344.183 cv
33.2407 342.729 33.1157 341.231 33.1123 339.749 cv
33.1084 338.267 33.2261 336.798 33.2114 335.756 cv
33.1968 334.714 33.0498 334.097 32.0811 333.26 cv
31.1123 332.423 29.3213 331.366 28.3374 330.53 cv
27.354 329.693 27.1777 329.076 26.7373 327.417 cv
26.2969 325.759 25.5923 323.057 25.3135 321.34 cv
25.0347 319.622 25.1816 318.889 25.5337 317.934 cv
25.8862 316.979 26.4438 315.806 27.3687 314.19 cv
28.2935 312.576 29.5854 310.521 30.6426 308.759 cv
31.6997 306.997 32.522 305.528 33.7847 304.236 cv
35.0469 302.944 36.75 301.829 37.6895 301.021 cv
38.6289 300.214 38.8052 299.715 39.231 298.145 cv
39.6567 296.573 40.332 293.931 40.6553 292.037 cv
40.978 290.144 40.9482 288.998 40.9341 287.647 cv
40.9189 286.297 40.9189 284.741 40.4644 283.405 cv
40.0093 282.069 39.0986 280.953 38.2329 279.749 cv
37.3667 278.546 36.5444 277.254 36.1772 276.212 cv
35.8105 275.169 35.8984 274.377 36.104 273.334 cv
36.3096 272.292 36.6323 271 36.9116 269.958 cv
37.1904 268.916 37.4258 268.124 37.5435 267.125 cv
37.6611 266.127 37.6611 264.923 37.4995 262.677 cv
37.3379 260.431 37.0151 257.142 36.7217 254.324 cv
36.4277 251.505 36.1636 249.156 36.0903 247.542 cv
36.0171 245.927 36.1338 245.046 36.3105 243.916 cv
36.4863 242.785 36.7212 241.405 37.1768 240.377 cv
37.6313 239.35 38.3066 238.675 38.6885 237.72 cv
39.0708 236.766 39.1592 235.533 38.9097 233.831 cv
38.6602 232.127 38.0728 229.955 37.2363 228.501 cv
36.3994 227.048 35.313 226.314 34.4175 226.006 cv
33.522 225.697 32.8174 225.815 31.5698 226.241 cv
30.3218 226.667 28.5308 227.4 26.9893 227.988 cv
25.4478 228.575 24.1558 229.015 23.4219 228.927 cv
22.688 228.839 22.5117 228.222 22.1157 227.562 cv
21.7192 226.901 21.1025 226.197 20.9702 225.448 cv
20.8384 224.699 21.1904 223.907 21.1611 223.041 cv
21.1318 222.174 20.7207 221.234 20.1484 220.295 cv
19.5757 219.355 18.8418 218.416 18.3428 217.697 cv
17.8433 216.978 17.5791 216.478 17.6528 215.715 cv
17.7256 214.951 18.1372 213.924 18.2251 212.764 cv
18.313 211.604 18.0781 210.313 18.1953 209.593 cv
18.313 208.874 18.7827 208.727 19.2085 208.448 cv
19.6343 208.169 20.0161 207.758 20.1484 206.804 cv
20.2803 205.85 20.1631 204.352 19.9722 203.295 cv
19.7813 202.238 19.5171 201.622 19.312 201.159 cv
19.1064 200.696 18.9595 200.388 18.4312 200.263 cv
17.9023 200.138 16.9927 200.197 16.1411 200.234 cv
15.2896 200.271 14.4966 200.286 14.0049 199.999 cv
13.5127 199.713 13.3228 199.125 13.0581 198.546 cv
12.7939 197.966 12.4561 197.394 12.2949 196.77 cv
12.1333 196.146 12.1479 195.47 12.6836 194.487 cv
13.2197 193.503 14.2764 192.211 18.0933 187 cv
21.9102 181.788 28.4868 172.657 33.3022 166.271 cv
38.1172 159.885 41.1709 156.244 46.7202 149.667 cv
52.2695 143.091 60.314 133.578 66.9492 125.885 cv
73.585 118.193 78.8115 112.321 82.2466 108.372 cv
85.6821 104.423 87.3257 102.396 88.5151 100.987 cv
89.7041 99.5776 90.438 98.7847 91.1577 98.4326 cv
91.877 98.0801 92.5811 98.168 93.0952 98.3447 cv
93.6089 98.5205 93.9316 98.7847 94.167 99.416 cv
94.4014 100.047 94.5488 101.046 95.2241 102.367 cv
95.8989 103.688 97.103 105.332 97.749 106.448 cv
98.395 107.563 98.4829 108.151 98.5122 109.149 cv
98.5415 110.147 98.5122 111.557 98.7617 112.526 cv
99.0117 113.495 99.54 114.023 100.523 114.684 cv
101.507 115.344 102.946 116.137 104.062 116.783 cv
105.177 117.429 105.97 117.928 106.293 118.442 cv
106.616 118.956 106.469 119.484 106.425 120.263 cv
106.381 121.041 106.44 122.068 106.631 122.758 cv
106.821 123.448 107.145 123.8 107.409 124.417 cv
107.673 125.033 107.878 125.914 108.216 126.281 cv
108.554 126.648 109.023 126.501 109.611 126.252 cv
110.198 126.002 110.903 125.65 111.255 125.224 cv
111.607 124.799 111.607 124.299 111.798 123.536 cv
111.989 122.772 112.371 121.745 112.752 121.172 cv
113.134 120.6 113.516 120.482 114.309 120.086 cv
115.102 119.689 116.305 119.015 117.274 118.779 cv
118.243 118.545 118.977 118.75 120.709 119 cv
122.441 119.25 125.172 119.543 126.655 119.602 cv
128.138 119.66 128.373 119.484 128.607 119.176 cv
128.842 118.867 129.077 118.427 129.43 118.237 cv
129.782 118.045 130.251 118.104 131.25 118.281 cv
132.248 118.457 133.775 118.75 135.14 119.103 cv
136.505 119.455 137.709 119.866 138.752 120.468 cv
139.794 121.07 140.675 121.863 140.587 122.318 cv
140.499 122.773 139.442 122.89 137.343 123.052 cv
135.244 123.213 132.102 123.419 130.34 123.566 cv
128.579 123.712 128.197 123.801 127.037 124.065 cv
125.877 124.33 123.939 124.77 123.059 125.459 cv
122.178 126.149 122.354 127.089 122.677 127.955 cv
123 128.821 123.47 129.614 124.688 129.673 cv
125.906 129.731 127.874 129.056 129.856 128.602 cv
131.837 128.146 133.834 127.911 135.288 128.058 cv
136.741 128.205 137.651 128.733 138.532 129.012 cv
139.413 129.291 140.264 129.321 141.307 128.763 cv
142.349 128.205 143.582 127.06 144.83 125.577 cv
146.078 124.094 147.34 122.274 148.25 121.599 cv
149.161 120.923 149.718 121.393 150.188 122.905 cv
150.658 124.417 151.04 126.972 151.216 129.746 cv
151.392 132.521 151.363 135.516 151.641 137.16 cv
151.92 138.804 152.507 139.098 153.447 138.701 cv
154.386 138.305 155.678 137.219 156.823 136.03 cv
157.968 134.84 158.967 133.549 159.701 133.196 cv
160.435 132.844 160.904 133.431 161.125 133.842 cv
161.345 134.253 161.315 134.488 161.051 135.883 cv
160.787 137.277 160.288 139.832 160.053 141.843 cv
159.818 143.854 159.848 145.322 160.332 146.188 cv
160.816 147.055 161.756 147.319 162.622 146.879 cv
163.488 146.438 164.281 145.293 164.927 144.412 cv
165.573 143.532 166.072 142.915 166.718 142.885 cv
167.364 142.856 168.157 143.414 169.125 143.928 cv
170.095 144.441 171.239 144.911 171.944 145.558 cv
172.649 146.203 172.913 147.025 173.045 147.598 cv
173.177 148.17 173.177 148.493 173.368 149.198 cv
173.559 149.902 173.94 150.989 174.411 151.796 cv
174.88 152.604 175.438 153.132 176.701 154.292 cv
177.963 155.452 179.931 157.243 181.354 158.3 cv
182.778 159.357 183.659 159.68 184.628 159.797 cv
185.597 159.915 186.654 159.827 188.063 160.135 cv
189.473 160.443 191.234 161.148 192.248 161.604 cv
193.26 162.059 193.524 162.264 193.877 162.587 cv
194.229 162.91 194.669 163.35 195.095 164.025 cv
195.521 164.701 195.932 165.611 196.417 166.918 cv
196.901 168.224 197.459 169.927 197.723 171.087 cv
197.987 172.247 197.958 172.863 197.444 173.612 cv
196.931 174.36 195.932 175.241 195.271 175.99 cv
194.611 176.739 194.288 177.355 194.435 178.236 cv
194.582 179.117 195.198 180.262 195.844 181.333 cv
196.49 182.405 197.165 183.404 198.883 184.094 cv
200.601 184.784 203.36 185.166 205.753 185.547 cv
208.146 185.929 210.172 186.311 212.257 186.59 cv
214.341 186.869 216.484 187.044 217.982 187.044 cv
219.479 187.044 220.331 186.869 220.712 187.147 cv
221.094 187.426 221.006 188.16 220.918 188.982 cv
220.83 189.804 220.742 190.715 221.021 191.596 cv
221.3 192.477 221.946 193.328 222.592 194.297 cv
223.238 195.266 223.884 196.352 224.5 197.086 cv
225.117 197.82 225.704 198.202 226.673 198.393 cv
227.642 198.583 228.992 198.583 230.152 198.393 cv
231.312 198.202 232.281 197.82 232.765 197.159 cv
233.25 196.499 233.25 195.559 232.985 194.708 cv
232.721 193.856 232.192 193.093 231.723 192.33 cv
231.253 191.566 230.842 190.803 230.725 189.702 cv
230.607 188.601 230.783 187.162 231.121 186.296 cv
231.458 185.43 231.958 185.136 232.633 185.151 cv
233.309 185.166 234.16 185.488 234.982 185.444 cv
235.804 185.4 236.597 184.989 237.39 184.535 cv
238.182 184.079 238.975 183.58 239.738 182.67 cv
240.502 181.76 241.236 180.438 241.823 179.631 cv
242.41 178.824 242.851 178.53 243.364 178.78 cv
243.878 179.029 244.465 179.822 244.745 180.894 cv
245.023 181.965 244.994 183.315 244.979 184.123 cv
244.965 184.931 244.965 185.195 245.067 185.518 cv
245.17 185.841 245.375 186.222 246.374 186.957 cv
247.372 187.69 249.163 188.777 250.345 189.459 cv
251.527 190.142 252.1 190.421 253.171 190.604 cv
254.243 190.788 255.813 190.876 257.524 190.715 cv
259.234 190.553 261.084 190.142 262.082 190.201 cv
263.08 190.26 263.228 190.788 263.455 191.419 cv
263.682 192.051 263.991 192.785 264.218 193.232 cv
264.445 193.68 264.593 193.842 264.989 194.055 cv
265.385 194.267 266.031 194.532 267.103 194.693 cv
268.175 194.854 269.672 194.914 271.184 194.928 cv
272.696 194.943 274.223 194.913 275.684 194.898 cv
277.145 194.884 278.539 194.884 279.552 194.855 cv
280.565 194.825 281.196 194.767 281.321 194.282 cv
281.446 193.798 281.064 192.887 280.661 192.087 cv
280.257 191.288 279.831 190.597 279.729 189.856 cv
279.625 189.115 279.846 188.322 280.8 187.735 cv
281.754 187.147 283.442 186.766 284.418 186.523 cv
285.395 186.281 285.659 186.179 286.158 186.392 cv
286.657 186.604 287.391 187.133 288.383 187.867 cv
289.374 188.601 290.621 189.54 291.208 190.172 cv
291.796 190.803 291.722 191.125 291.502 191.698 cv
291.282 192.271 290.915 193.093 290.687 193.776 cv
290.459 194.458 290.372 195.002 290.32 196.022 cv
290.269 197.042 290.254 198.539 290.423 199.582 cv
290.592 200.624 290.944 201.211 291.165 201.579 cv
291.385 201.945 291.473 202.092 291.884 202.225 cv
292.295 202.356 293.029 202.474 293.8 202.357 cv
294.57 202.239 295.377 201.887 295.678 201.366 cv
295.979 200.845 295.774 200.155 295.627 199.406 cv
295.48 198.657 295.393 197.85 295.209 197.101 cv
295.025 196.352 294.747 195.663 294.769 194.921 cv
294.791 194.179 295.113 193.387 295.921 192.748 cv
296.729 192.109 298.02 191.625 298.747 191.185 cv
299.474 190.744 299.635 190.348 299.774 189.731 cv
299.914 189.115 300.031 188.278 300.442 187.625 cv
300.854 186.971 301.558 186.501 302.226 186.083 cv
302.894 185.665 303.525 185.298 303.841 184.916 cv
304.157 184.535 304.157 184.138 304.142 183.558 cv
304.127 182.979 304.098 182.215 303.709 181.76 cv
303.32 181.305 302.571 181.158 301.815 180.945 cv
301.06 180.733 300.296 180.454 299.914 179.991 cv
299.532 179.529 299.532 178.883 299.613 178.34 cv
299.694 177.796 299.855 177.356 300.325 176.798 cv
300.795 176.24 301.573 175.565 302.197 174.934 cv
302.821 174.302 303.291 173.715 303.489 173.194 cv
303.687 172.673 303.614 172.218 303.43 171.932 cv
303.247 171.646 302.953 171.528 302.131 171.403 cv
301.309 171.278 299.958 171.146 298.938 171.028 cv
297.917 170.911 297.228 170.809 296.655 170.471 cv
296.083 170.133 295.627 169.561 294.527 168.372 cv
293.426 167.183 291.679 165.377 290.615 164.269 cv
289.551 163.161 289.169 162.75 289.162 162.177 cv
289.154 161.605 289.521 160.871 289.779 160.115 cv
290.035 159.358 290.182 158.58 290.131 157.949 cv
290.079 157.318 289.83 156.833 289.478 156.305 cv
289.125 155.776 288.67 155.204 288.42 154.506 cv
288.171 153.809 288.127 152.987 288.09 152.246 cv
288.054 151.504 288.024 150.844 288.273 150.337 cv
288.523 149.831 289.052 149.479 289.573 149.046 cv
290.094 148.613 290.608 148.099 291.071 147.894 cv
291.533 147.688 291.944 147.791 292.473 147.85 cv
293.001 147.909 293.647 147.923 293.721 147.563 cv
293.794 147.204 293.295 146.47 292.942 145.853 cv
292.59 145.237 292.385 144.738 292.348 143.857 cv
292.312 142.976 292.443 141.713 292.73 141.119 cv
293.016 140.524 293.457 140.598 294.014 140.605 cv
294.572 140.612 295.247 140.554 295.395 139.937 cv
295.541 139.32 295.159 138.146 294.47 136.077 cv
293.779 134.007 292.781 131.042 292.275 129.162 cv
291.769 127.283 291.753 126.491 291.753 125.192 cv
291.753 123.892 291.769 122.087 291.747 120.017 cv
291.725 117.947 291.666 115.612 291.718 114.152 cv
291.77 112.691 291.931 112.104 292.775 110.805 cv
293.619 109.505 295.146 107.494 296.079 106.364 cv
297.01 105.233 297.348 104.984 298.582 104.896 cv
299.814 104.808 301.943 104.881 303.859 105.064 cv
305.774 105.248 307.478 105.542 308.982 105.77 cv
310.487 105.997 311.793 106.158 312.535 106.459 cv
313.276 106.76 313.453 107.201 313.68 107.707 cv
313.908 108.214 314.187 108.786 314.047 109.814 cv
313.908 110.841 313.35 112.324 312.711 114.24 cv
312.073 116.156 311.354 118.504 310.869 120.229 cv
310.385 121.955 310.135 123.055 309.856 123.789 cv
309.577 124.523 309.269 124.891 308.909 125.309 cv
308.549 125.727 308.139 126.197 307.676 126.498 cv
307.214 126.799 306.7 126.931 306.076 127.071 cv
305.452 127.21 304.718 127.356 304.307 127.092 cv
303.896 126.828 303.808 126.153 303.646 125.639 cv
303.485 125.125 303.25 124.773 302.854 124.685 cv
302.457 124.597 301.899 124.773 301.547 125.074 cv
301.195 125.375 301.047 125.801 300.901 126.41 cv
300.754 127.019 300.607 127.812 300.563 128.678 cv
300.519 129.544 300.578 130.483 300.644 131.409 cv
300.71 132.333 300.783 133.244 300.835 133.86 cv
300.886 134.477 300.916 134.8 300.71 135.409 cv
300.505 136.018 300.064 136.914 300.021 137.523 cv
299.977 138.132 300.329 138.455 301.122 139.042 cv
301.914 139.629 303.147 140.481 304.006 141.142 cv
304.865 141.803 305.349 142.272 305.746 143.116 cv
306.142 143.96 306.45 145.179 306.531 146.346 cv
306.612 147.513 306.465 148.629 306.34 149.583 cv
306.216 150.538 306.113 151.33 306.246 151.903 cv
306.377 152.476 306.744 152.828 307.479 153.261 cv
308.212 153.694 309.313 154.208 309.967 154.692 cv
310.62 155.177 310.825 155.632 311.185 156.314 cv
311.545 156.997 312.059 157.907 312.33 158.436 cv
312.602 158.964 312.631 159.111 312.764 159.515 cv
312.896 159.919 313.13 160.579 313.079 161.174 cv
313.028 161.769 312.69 162.297 312.228 163.082 cv
311.765 163.868 311.178 164.91 310.818 165.739 cv
310.458 166.569 310.326 167.186 310.385 167.626 cv
310.443 168.066 310.693 168.331 311.339 168.411 cv
311.985 168.492 313.027 168.389 313.938 168.337 cv
314.848 168.286 315.626 168.286 316.154 168.573 cv
316.683 168.859 316.962 169.431 317.263 170.026 cv
317.564 170.62 317.887 171.237 318.063 171.751 cv
318.239 172.265 318.268 172.676 318.217 173.469 cv
318.166 174.261 318.034 175.436 318.048 176.309 cv
318.063 177.183 318.224 177.755 318.635 178.812 cv
319.047 179.869 319.707 181.41 320.125 182.394 cv
320.544 183.378 320.72 183.803 321.109 183.914 cv
321.498 184.024 322.1 183.818 322.459 183.532 cv
322.819 183.246 322.937 182.879 322.974 181.183 cv
323.01 179.487 322.966 176.463 322.922 174.782 cv
322.878 173.101 322.834 172.764 323.091 172.595 cv
323.348 172.426 323.906 172.426 324.339 172.456 cv
324.772 172.485 325.08 172.544 325.411 172.867 cv
325.741 173.189 326.093 173.777 326.6 174.489 cv
327.106 175.201 327.767 176.038 328.295 176.823 cv
328.824 177.608 329.22 178.342 329.506 178.937 cv
329.792 179.531 329.969 179.987 330.204 181.161 cv
330.438 182.336 330.732 184.229 330.981 186.042 cv
331.231 187.855 331.437 189.588 331.937 190.938 cv
332.436 192.289 333.228 193.258 334.241 194.535 cv
335.254 195.813 336.487 197.398 337.354 198.191 cv
338.22 198.983 338.719 198.983 339.306 198.792 cv
339.893 198.602 340.568 198.22 340.892 197.662 cv
341.215 197.104 341.185 196.37 341.111 195.298 cv
341.038 194.227 340.921 192.817 340.936 191.834 cv
340.95 190.851 341.097 190.293 341.86 188.223 cv
342.624 186.152 344.004 182.571 344.929 180.207 cv
345.854 177.844 346.323 176.698 346.206 175.612 cv
346.088 174.526 345.384 173.498 344.685 172.566 cv
343.986 171.633 343.293 170.795 342.88 169.474 cv
342.468 168.152 342.335 166.346 342.379 165.223 cv
342.424 164.1 342.644 163.66 343.788 163.455 cv
344.934 163.249 347.004 163.278 349.699 163.169 cv
352.395 163.059 355.716 162.811 357.641 163.039 cv
359.565 163.267 360.094 163.971 359.932 164.778 cv
359.771 165.586 358.919 166.496 358.537 167.186 cv
358.156 167.876 358.244 168.346 358.831 168.493 cv
359.418 168.64 360.505 168.463 361.385 168.096 cv
362.267 167.729 362.941 167.171 363.455 167.539 cv
363.97 167.906 364.321 169.197 364.483 170.813 cv
364.645 172.427 364.615 174.365 364.688 175.789 cv
364.762 177.213 364.938 178.123 364.454 178.549 cv
363.97 178.975 362.824 178.916 362.178 179.327 cv
361.532 179.738 361.385 180.619 361.635 181.5 cv
361.885 182.38 362.53 183.261 363.323 183.834 cv
364.116 184.406 365.056 184.671 365.643 185.375 cv
366.229 186.08 366.464 187.225 366.743 188.165 cv
367.022 189.104 367.346 189.838 368.05 190.616 cv
368.755 191.394 369.841 192.216 370.442 193.2 cv
371.045 194.183 371.162 195.329 371.045 196.768 cv
370.927 198.206 370.575 199.938 369.181 201.612 cv
367.786 203.285 365.349 204.9 363.91 206.163 cv
362.471 207.425 362.031 208.335 361.547 208.379 cv
361.062 208.423 360.533 207.602 359.961 207.103 cv
359.389 206.603 358.771 206.427 358.331 206.324 cv
357.892 206.222 357.627 206.192 357.392 206.632 cv
357.157 207.073 356.951 207.983 356.951 208.791 cv
356.951 209.598 357.157 210.303 357.523 211.609 cv
357.892 212.916 358.42 214.824 357.965 215.206 cv
357.51 215.587 356.071 214.442 354.603 213.429 cv
353.135 212.417 351.638 211.535 350.36 210.993 cv
349.083 210.449 348.026 210.244 346.983 210.567 cv
345.941 210.89 344.914 211.741 344.121 212.578 cv
343.328 213.415 342.771 214.237 342.976 215.191 cv
343.182 216.146 344.15 217.231 344.782 217.966 cv
345.413 218.7 345.706 219.081 345.28 219.771 cv
344.854 220.461 343.71 221.459 342.594 222.311 cv
341.478 223.163 340.392 223.867 339.026 224.131 cv
337.661 224.396 336.017 224.22 334.549 223.764 cv
333.081 223.309 331.789 222.575 330.6 221.988 cv
329.411 221.401 328.324 220.96 327.635 220.696 cv
326.945 220.432 326.651 220.344 326.078 220.549 cv
325.506 220.755 324.655 221.254 324.082 221.958 cv
323.51 222.663 323.216 223.574 323.612 224.234 cv
324.008 224.895 325.095 225.306 326.24 225.966 cv
327.385 226.627 328.589 227.537 329.587 227.919 cv
330.585 228.301 331.378 228.154 332.846 228.11 cv
334.314 228.066 336.458 228.125 337.94 228.345 cv
339.423 228.565 340.245 228.947 340.936 229.27 cv
341.625 229.592 342.183 229.857 342.521 230.488 cv
342.858 231.119 342.976 232.118 343.122 233.41 cv
343.27 234.701 343.445 236.287 343.063 237.623 cv
342.682 238.958 341.742 240.045 341.097 240.896 cv
340.451 241.748 340.098 242.364 339.613 242.628 cv
339.129 242.893 338.512 242.805 336.927 243.04 cv
335.341 243.274 332.787 243.832 331.172 244.258 cv
329.557 244.684 328.882 244.978 328.47 245.462 cv
328.06 245.946 327.913 246.622 327.898 247.312 cv
327.884 248.001 328.001 248.706 327.986 249.47 cv
327.972 250.233 327.825 251.055 327.561 251.833 cv
327.296 252.611 326.915 253.345 326.416 253.624 cv
325.916 253.903 325.3 253.727 324.507 253.551 cv
323.714 253.375 322.745 253.198 322.422 253.521 cv
322.1 253.844 322.422 254.666 322.892 255.914 cv
323.362 257.162 323.979 258.836 324.052 259.834 cv
324.125 260.833 323.655 261.155 322.687 261.801 cv
321.718 262.447 320.25 263.416 319.236 264.429 cv
318.224 265.442 317.666 266.499 317.167 267.277 cv
316.668 268.055 316.228 268.555 315.244 269.112 cv
314.26 269.67 312.734 270.287 311.75 270.992 cv
310.767 271.696 310.326 272.489 309.65 273.648 cv
308.976 274.809 308.065 276.335 307.64 277.656 cv
307.214 278.978 307.272 280.093 307.346 281.048 cv
307.419 282.002 307.507 282.794 307.404 283.309 cv
307.302 283.822 307.008 284.057 306.479 284.424 cv
305.951 284.791 305.188 285.29 304.659 286.244 cv
304.131 287.198 303.837 288.607 302.927 292.909 cv
302.017 297.211 300.49 304.404 299.712 308.206 cv
298.934 312.009 298.904 312.42 299.124 313.667 cv
299.344 314.915 299.814 317 300.123 318.123 cv
300.431 319.246 300.578 319.407 301.056 319.568 cv
301.533 319.729 302.34 319.892 303.566 320.06 cv
304.792 320.229 306.436 320.405 307.331 320.669 cv
308.227 320.934 308.374 321.286 308.696 322.108 cv
309.02 322.93 309.519 324.222 310.208 324.927 cv
310.898 325.631 311.779 325.749 312.726 325.925 cv
313.673 326.101 314.686 326.336 315.156 326.703 cv
315.625 327.069 315.552 327.569 315.53 328.259 cv
315.508 328.949 315.538 329.83 315.53 331.717 cv
315.523 333.603 315.479 336.495 315.457 338.043 cv
315.435 339.593 315.435 339.798 315.89 340.422 cv
316.345 341.046 317.254 342.088 317.915 342.858 cv
318.576 343.629 318.987 344.129 319.339 344.327 cv
319.691 344.525 319.985 344.422 321.211 344.033 cv
322.437 343.645 324.595 342.969 325.901 342.646 cv
327.208 342.323 327.663 342.353 329.292 342.367 cv
330.922 342.382 333.726 342.382 335.282 342.455 cv
336.839 342.528 337.146 342.676 338.85 342.998 cv
340.553 343.321 343.65 343.82 345.31 344.158 cv
346.968 344.496 347.188 344.672 348.105 345.237 cv
349.023 345.803 350.638 346.757 351.549 347.321 cv
352.459 347.887 352.664 348.063 353.911 349.377 cv
355.16 350.69 357.45 353.143 358.749 354.647 cv
360.048 356.152 360.356 356.71 360.643 357.025 cv
360.929 357.342 361.193 357.414 362.016 357.745 cv
362.838 358.075 364.218 358.662 365.068 358.912 cv
365.921 359.161 366.243 359.073 367.345 358.883 cv
368.445 358.691 370.324 358.398 371.396 358.295 cv
372.468 358.192 372.732 358.28 373.37 358.493 cv
374.01 358.707 375.022 359.044 375.653 359.301 cv
376.285 359.558 376.534 359.734 376.784 360.233 cv
377.033 360.732 377.283 361.555 377.562 362.024 cv
377.841 362.494 378.149 362.611 379.235 362.655 cv
380.322 362.699 382.187 362.67 383.544 362.685 cv
384.902 362.699 385.754 362.758 386.568 362.897 cv
387.383 363.037 388.16 363.257 388.989 363.514 cv
389.819 363.771 390.7 364.064 391.684 364.035 cv
392.667 364.006 393.753 363.653 395.258 363.286 cv
396.763 362.919 398.686 362.537 399.75 362.412 cv
400.814 362.288 401.021 362.42 401.438 362.904 cv
401.857 363.389 402.488 364.226 402.907 364.843 cv
403.325 365.459 403.53 365.855 403.553 367.382 cv
403.574 368.909 403.413 371.565 403.252 373.834 cv
403.09 376.102 402.929 377.98 402.95 379.147 cv
402.973 380.314 403.178 380.77 403.875 381.768 cv
404.572 382.766 405.762 384.308 406.716 385.533 cv
407.67 386.759 408.39 387.669 408.926 388.381 cv
409.461 389.094 409.813 389.607 409.96 390.261 cv
410.106 390.913 410.049 391.706 409.887 392.785 cv
409.726 393.864 409.461 395.229 409.593 396.103 cv
409.726 396.977 410.254 397.358 410.863 397.776 cv
411.473 398.195 412.162 398.65 413.16 398.738 cv
414.159 398.826 415.466 398.548 416.295 398.599 cv
417.124 398.65 417.477 399.032 417.638 399.486 cv
417.8 399.942 417.771 400.471 417.433 401.036 cv
417.095 401.601 416.449 402.203 416.222 402.694 cv
415.994 403.187 416.185 403.568 417.021 403.612 cv
417.858 403.656 419.341 403.362 420.317 403.604 cv
421.293 403.847 421.763 404.625 422.468 405.623 cv
423.173 406.622 424.112 407.84 425.228 408.537 cv
426.344 409.234 427.636 409.411 429.104 409.521 cv
430.572 409.631 432.216 409.675 433.251 409.447 cv
434.286 409.22 434.712 408.721 434.925 408.28 cv
435.137 407.84 435.137 407.458 434.954 406.276 cv
434.771 405.095 434.403 403.113 434.506 401.997 cv
434.608 400.882 435.181 400.632 436.011 400.258 cv
436.84 399.884 437.926 399.384 438.514 398.899 cv
439.101 398.415 439.188 397.945 439.232 396.947 cv
439.277 395.949 439.277 394.422 439.145 393.512 cv
439.013 392.602 438.748 392.309 438.176 391.897 cv
437.604 391.486 436.723 390.958 436.341 390.399 cv
435.959 389.842 436.076 389.255 436.076 388.065 cv
436.076 386.876 435.959 385.085 435.444 383.441 cv
434.932 381.797 434.021 380.3 433.419 379.36 cv
432.817 378.421 432.523 378.039 431.408 377.041 cv
430.292 376.042 428.354 374.428 427.444 373.355 cv
426.534 372.284 426.651 371.756 426.843 370.874 cv
427.033 369.993 427.298 368.76 426.916 367.747 cv
426.534 366.734 425.507 365.941 424.449 365.223 cv
423.393 364.503 422.307 363.856 421.763 363.152 cv
421.22 362.447 421.22 361.685 421.733 360.716 cv
422.248 359.746 423.275 358.572 424.127 357.955 cv
424.979 357.339 425.653 357.28 426.388 357.354 cv
427.121 357.427 427.914 357.633 428.751 357.456 cv
429.588 357.28 430.469 356.723 431.247 356.047 cv
432.024 355.372 432.7 354.579 433.346 353.903 cv
433.992 353.229 434.608 352.671 434.813 351.863 cv
435.02 351.056 434.814 349.999 434.594 349.037 cv
434.374 348.076 434.139 347.209 434.197 346.651 cv
434.256 346.094 434.608 345.844 435.122 345.382 cv
435.636 344.919 436.312 344.244 436.862 343.635 cv
437.412 343.025 437.838 342.482 438.132 342.02 cv
438.425 341.558 438.587 341.176 438.675 340.09 cv
438.763 339.003 438.778 337.212 438.646 335.567 cv
438.514 333.924 438.234 332.426 437.771 330.562 cv
437.31 328.697 436.663 326.466 435.959 324.587 cv
435.254 322.708 434.49 321.181 433.375 319.508 cv
432.26 317.834 430.791 316.014 429.235 314.369 cv
427.679 312.726 426.035 311.257 424.61 309.994 cv
423.187 308.731 421.982 307.675 420.603 306.839 cv
419.223 306.002 417.667 305.385 416.713 304.827 cv
415.758 304.27 415.406 303.771 415.641 302.537 cv
415.876 301.304 416.697 299.337 417.388 297.531 cv
418.078 295.726 418.636 294.081 419.149 292.818 cv
419.663 291.556 420.133 290.675 420.265 288.928 cv
420.397 287.181 420.192 284.568 419.884 283.144 cv
419.575 281.72 419.164 281.484 418.563 281.353 cv
417.961 281.221 417.168 281.191 416.596 280.736 cv
416.022 280.281 415.67 279.4 415.361 278.74 cv
415.054 278.079 414.789 277.639 414.144 277.154 cv
413.498 276.67 412.47 276.142 411.545 275.51 cv
410.62 274.879 409.798 274.145 409.593 273.602 cv
409.387 273.059 409.798 272.706 410.224 271.869 cv
410.649 271.032 411.09 269.711 411.28 268.831 cv
411.472 267.95 411.413 267.509 411.104 266.746 cv
410.797 265.982 410.238 264.896 409.313 263.729 cv
408.389 262.562 407.098 261.314 406.466 260.272 cv
405.834 259.229 405.864 258.393 405.923 257.292 cv
405.981 256.19 406.069 254.825 406.444 253.724 cv
406.818 252.623 407.479 251.787 408.11 251.207 cv
408.741 250.626 409.344 250.304 410.269 250.23 cv
411.193 250.157 412.441 250.333 413.527 250.318 cv
414.613 250.304 415.538 250.099 416.809 249.636 cv
418.078 249.173 419.693 248.454 421 248.109 cv
422.307 247.764 423.305 247.793 424.449 247.815 cv
425.595 247.837 426.886 247.853 427.752 247.684 cv
428.618 247.516 429.058 247.163 429.579 246.737 cv
430.101 246.312 430.702 245.813 431.671 245.563 cv
432.64 245.313 433.977 245.313 434.931 245.343 cv
435.885 245.372 436.457 245.431 437.33 245.776 cv
438.204 246.121 439.379 246.752 441.242 247.64 cv
443.107 248.529 445.662 249.673 446.821 250.43 cv
447.981 251.186 447.746 251.553 447.57 252.257 cv
447.394 252.962 447.276 254.004 447.255 254.68 cv
447.232 255.354 447.306 255.663 447.665 255.957 cv
448.025 256.25 448.671 256.529 449.178 256.742 cv
449.685 256.955 450.051 257.102 450.514 257.183 cv
450.977 257.263 451.534 257.278 452.121 257.263 cv
452.708 257.249 453.325 257.204 454.022 256.757 cv
454.72 256.309 455.497 255.458 456.092 255.01 cv
456.687 254.562 457.098 254.518 457.949 254.467 cv
458.801 254.415 460.093 254.356 461.34 254.334 cv
462.588 254.313 463.792 254.327 464.497 254.562 cv
465.201 254.797 465.407 255.252 465.825 256.037 cv
466.243 256.823 466.875 257.939 467.132 258.871 cv
467.389 259.803 467.271 260.552 467.205 261.514 cv
467.139 262.475 467.124 263.649 467.103 264.42 cv
467.08 265.191 467.051 265.558 467.308 266.057 cv
467.564 266.556 468.107 267.188 469.392 268.56 cv
470.677 269.933 472.702 272.047 473.929 273.368 cv
475.154 274.689 475.58 275.218 475.771 276.194 cv
475.962 277.17 475.918 278.595 476.104 279.442 cv
476.292 280.29 476.71 280.562 477.18 280.727 cv
477.649 280.892 478.171 280.95 480.075 280.976 cv
481.98 281.001 485.269 280.994 487.452 281.002 cv
489.637 281.009 490.715 281.031 491.416 281.021 cv
492.117 281.009 492.439 280.965 492.781 280.697 cv
493.122 280.429 493.482 279.938 494.105 279.009 cv
494.729 278.08 495.618 276.715 496.125 275.926 cv
496.631 275.137 496.756 274.924 496.818 274.568 cv
496.881 274.212 496.881 273.713 496.858 272.99 cv
496.836 272.268 496.792 271.321 496.821 270.612 cv
496.851 269.904 496.953 269.435 497.188 268.407 cv
497.423 267.379 497.79 265.793 497.988 264.685 cv
498.187 263.577 498.216 262.945 497.995 261.925 cv
497.775 260.905 497.306 259.496 496.968 257.917 cv
496.63 256.339 496.425 254.592 496.388 253.374 cv
496.351 252.155 496.483 251.466 496.571 250.681 cv
496.659 249.895 496.703 249.014 496.872 248.435 cv
497.041 247.855 497.335 247.576 498.187 247.605 cv
499.038 247.635 500.446 247.972 501.673 248.42 cv
502.898 248.868 503.94 249.425 504.77 250.306 cv
505.6 251.187 506.216 252.391 506.854 253.719 cv
507.493 255.048 508.154 256.501 508.624 257.463 cv
509.094 258.424 509.373 258.895 510.063 259.166 cv
510.752 259.438 511.854 259.511 512.918 259.569 cv
513.982 259.628 515.01 259.672 515.671 259.738 cv
516.331 259.804 516.625 259.893 516.911 260.146 cv
517.197 260.399 517.477 260.817 517.909 261.25 cv
518.343 261.683 518.93 262.131 519.157 262.545 cv
519.385 262.96 519.253 263.342 519.201 264.153 cv
519.149 264.964 519.179 266.205 519.22 266.976 cv
519.26 267.747 519.312 268.047 519.469 268.242 cv
519.627 268.437 519.892 268.524 520.725 268.572 cv
521.558 268.62 522.959 268.627 524.188 268.635 cv
525.419 268.642 526.476 268.649 527.165 268.697 cv
527.855 268.745 528.179 268.833 528.505 269.057 cv
528.832 269.28 529.162 269.64 529.639 270.381 cv
530.116 271.123 530.739 272.246 531.293 273.263 cv
531.848 274.279 532.332 275.189 532.786 275.71 cv
533.242 276.231 533.668 276.363 534.416 276.547 cv
535.165 276.73 536.236 276.966 536.831 277.215 cv
537.426 277.465 537.543 277.729 537.58 278.903 cv
537.617 280.078 537.572 282.163 537.536 283.689 cv
537.499 285.216 537.47 286.185 537.521 286.827 cv
537.572 287.47 537.704 287.785 538.009 288.189 cv
538.313 288.593 538.791 289.084 539.176 289.36 cv
539.562 289.635 539.855 289.694 540.651 289.687 cv
541.448 289.679 542.747 289.605 543.529 289.632 cv
544.311 289.657 544.575 289.782 545.276 290.226 cv
545.977 290.67 547.115 291.434 547.826 291.819 cv
548.539 292.204 548.825 292.211 549.178 292.039 cv
549.529 291.866 549.948 291.515 550.454 291.074 cv
550.961 290.634 551.556 290.104 552.113 289.848 cv
552.671 289.591 553.192 289.605 553.85 289.613 cv
554.507 289.62 555.299 289.62 555.853 289.628 cv
556.407 289.635 556.723 289.65 557.211 290.105 cv
557.698 290.561 558.359 291.456 558.909 292.197 cv
559.46 292.938 559.9 293.525 560.095 293.937 cv
560.29 294.348 560.238 294.583 560.08 294.95 cv
559.923 295.316 559.658 295.816 559.431 296.213 cv
559.203 296.609 559.013 296.902 559.067 297.064 cv
559.122 297.226 559.424 297.255 559.948 297.244 cv
560.473 297.233 561.222 297.182 561.904 296.892 cv
562.587 296.603 563.204 296.073 563.992 295.424 cv
564.782 294.774 565.743 294.004 566.407 293.475 cv
567.072 292.946 567.439 292.66 567.821 292.491 cv
568.202 292.322 568.6 292.271 569.153 292.278 cv
569.707 292.286 570.419 292.352 571.321 292.281 cv
572.225 292.212 573.317 292.007 574.313 291.838 cv
575.308 291.669 576.202 291.537 577.047 291.592 cv
577.891 291.647 578.684 291.889 579.521 292.054 cv
580.357 292.22 581.237 292.307 581.935 292.461 cv
582.632 292.615 583.146 292.835 583.271 293.313 cv
583.396 293.789 583.131 294.523 582.624 295.529 cv
582.118 296.535 581.37 297.812 580.709 299.03 cv
580.048 300.249 579.476 301.408 578.778 302.429 cv
578.081 303.449 577.259 304.33 576.643 305.027 cv
576.026 305.725 575.614 306.238 575.365 306.723 cv
575.115 307.207 575.027 307.662 574.896 308.389 cv
574.763 309.115 574.587 310.114 574.499 310.921 cv
574.411 311.729 574.411 312.346 574.646 313.028 cv
574.881 313.711 575.351 314.459 575.901 314.893 cv
576.451 315.325 577.083 315.443 577.751 315.2 cv
578.419 314.959 579.123 314.356 579.468 313.864 cv
579.813 313.373 579.799 312.991 579.696 312.154 cv
579.593 311.317 579.402 310.025 579.351 309.108 cv
579.3 308.19 579.388 307.647 579.718 307.067 cv
580.048 306.488 580.621 305.871 581.26 305.438 cv
581.898 305.005 582.603 304.756 583.109 304.293 cv
583.616 303.831 583.924 303.155 584.511 302.054 cv
585.099 300.953 585.965 299.427 586.515 298.553 cv
587.065 297.68 587.3 297.459 587.748 297.32 cv
588.196 297.181 588.856 297.122 589.261 297.202 cv
589.664 297.283 589.811 297.503 590.435 298.45 cv
591.059 299.397 592.159 301.07 592.835 301.894 cv
593.511 302.715 593.76 302.686 594.252 301.966 cv
594.743 301.247 595.478 299.838 596.014 298.92 cv
596.549 298.003 596.887 297.577 597.231 297.356 cv
597.577 297.137 597.93 297.122 598.369 297.239 cv
598.81 297.356 599.339 297.606 600.124 298.017 cv
600.909 298.429 601.951 299.001 602.788 299.353 cv
603.625 299.705 604.256 299.838 604.961 299.911 cv
605.665 299.984 606.443 299.999 607.009 300.329 cv
607.574 300.66 607.926 301.306 609.211 303.266 cv
610.495 305.226 612.712 308.499 613.82 310.319 cv
614.929 312.14 614.929 312.507 614.921 313.138 cv
614.914 313.77 614.899 314.665 614.921 315.369 cv
614.943 316.074 615.002 316.588 614.937 317.264 cv
614.87 317.938 614.679 318.775 614.121 320.757 cv
613.563 322.739 612.639 325.866 612.11 327.569 cv
611.581 329.271 611.449 329.551 611.053 329.977 cv
610.657 330.402 609.996 330.975 609.299 331.643 cv
608.602 332.312 607.868 333.074 607.134 333.677 cv
606.4 334.278 605.666 334.719 605.232 335.012 cv
604.8 335.306 604.668 335.453 604.212 336.305 cv
603.758 337.156 602.979 338.712 602.575 339.681 cv
602.172 340.649 602.143 341.031 602.349 342.463 cv
602.554 343.894 602.994 346.375 603.06 347.755 cv
603.126 349.135 602.818 349.414 601.974 350.016 cv
601.13 350.617 599.75 351.542 598.898 352.327 cv
598.047 353.112 597.725 353.759 597.284 354.404 cv
596.844 355.051 596.286 355.696 594.172 357.752 cv
592.058 359.807 588.388 363.271 586.391 364.959 cv
584.395 366.647 584.071 366.56 583.103 366.442 cv
582.134 366.325 580.519 366.178 579.447 366.207 cv
578.375 366.236 577.847 366.442 577.01 367.073 cv
576.174 367.705 575.028 368.762 573.854 369.628 cv
572.68 370.494 571.476 371.169 569.714 372.021 cv
567.952 372.872 565.633 373.9 563.644 374.788 cv
561.654 375.676 559.996 376.425 558.623 377.239 cv
557.25 378.055 556.164 378.936 555.319 379.633 cv
554.476 380.33 553.874 380.844 553.162 380.962 cv
552.45 381.079 551.628 380.8 550.783 380.653 cv
549.939 380.506 549.073 380.491 548.317 380.741 cv
547.562 380.99 546.915 381.505 546.255 382.063 cv
545.594 382.62 544.919 383.223 544.698 384.125 cv
544.479 385.028 544.713 386.231 544.882 387.465 cv
545.051 388.698 545.154 389.96 545.337 391.076 cv
545.521 392.191 545.785 393.16 545.785 393.997 cv
545.785 394.834 545.521 395.539 545.125 396.243 cv
544.729 396.948 544.2 397.652 543.51 398.343 cv
542.819 399.032 541.969 399.708 541.176 400.501 cv
540.383 401.293 539.648 402.203 538.958 403.23 cv
538.269 404.259 537.623 405.404 536.933 406.607 cv
536.243 407.812 535.509 409.074 534.995 410.087 cv
534.481 411.1 534.188 411.863 534.041 412.553 cv
533.895 413.243 533.895 413.86 533.865 414.976 cv
533.835 416.091 533.777 417.706 533.263 419.525 cv
532.749 421.347 531.78 423.372 531.075 425.691 cv
530.371 428.011 529.931 430.624 529.52 432.591 cv
529.108 434.559 528.727 435.88 528.624 437.23 cv
528.521 438.581 528.697 439.961 528.858 441.18 cv
529.021 442.398 529.167 443.455 529.52 443.572 cv
529.872 443.689 530.43 442.868 531.09 442.075 cv
531.751 441.282 532.515 440.519 532.853 439.623 cv
533.189 438.728 533.102 437.7 533.131 436.496 cv
533.16 435.293 533.307 433.912 533.601 432.181 cv
533.895 430.448 534.335 428.363 534.819 426.719 cv
535.304 425.075 535.832 423.871 536.39 423.078 cv
536.948 422.286 537.535 421.904 538.122 421.449 cv
538.71 420.994 539.297 420.465 539.723 419.761 cv
540.148 419.056 540.412 418.175 540.471 417.045 cv
540.53 415.914 540.383 414.534 540.691 413.404 cv
541 412.273 541.764 411.393 542.835 410.38 cv
543.906 409.367 545.286 408.222 546.578 406.681 cv
547.87 405.139 549.073 403.201 550.718 400.852 cv
552.362 398.504 554.446 395.743 555.93 393.864 cv
557.412 391.985 558.293 390.987 559.306 390.518 cv
560.319 390.048 561.464 390.106 562.228 389.9 cv
562.991 389.695 563.372 389.226 563.9 388.741 cv
564.43 388.257 565.104 387.757 566.396 387.522 cv
567.688 387.287 569.597 387.317 571.271 387.698 cv
572.944 388.08 574.383 388.814 575.425 389.651 cv
576.468 390.488 577.113 391.428 577.539 392.44 cv
577.965 393.453 578.171 394.539 578.199 395.729 cv
578.229 396.918 578.082 398.21 577.671 399.398 cv
577.26 400.588 576.585 401.674 576.218 402.569 cv
575.852 403.465 575.792 404.17 575.719 405.08 cv
575.646 405.99 575.558 407.106 575.646 408.397 cv
575.733 409.689 575.998 411.158 576.57 412.332 cv
577.143 413.507 578.023 414.388 578.978 415.194 cv
579.933 416.002 580.96 416.736 581.973 417.353 cv
582.985 417.969 583.983 418.468 585.129 419.011 cv
586.273 419.554 587.565 420.141 588.695 420.596 cv
589.826 421.051 590.795 421.374 591.72 421.653 cv
592.645 421.932 593.525 422.167 594.098 422.798 cv
594.67 423.429 594.935 424.457 594.597 425.293 cv
594.26 426.13 593.32 426.776 592.586 427.584 cv
591.852 428.391 591.323 429.36 590.956 430.71 cv
590.589 432.062 590.384 433.793 590.075 435.026 cv
589.768 436.26 589.356 436.994 588.021 437.89 cv
586.685 438.785 584.424 439.842 582.823 440.943 cv
581.223 442.044 580.283 443.189 579.917 444.275 cv
579.55 445.361 579.755 446.389 579.477 447.035 cv
579.197 447.682 578.434 447.945 577.538 448.136 cv
576.644 448.327 575.615 448.444 574.72 448.048 cv
573.824 447.652 573.061 446.741 572.063 445.641 cv
571.064 444.539 569.831 443.248 568.906 442.602 cv
567.981 441.956 567.365 441.956 566.777 441.633 cv
566.19 441.31 565.633 440.664 564.972 440.048 cv
564.312 439.431 563.548 438.844 562.814 438.065 cv
562.08 437.287 561.375 436.318 560.905 435.262 cv
560.436 434.204 560.201 433.06 560.01 431.974 cv
559.819 430.887 559.672 429.859 559.291 429.271 cv
558.909 428.685 558.292 428.538 557.455 428.244 cv
556.618 427.95 555.562 427.511 554.813 427.188 cv
554.064 426.864 553.624 426.659 553.081 426.864 cv
552.538 427.07 551.892 427.687 550.82 428.406 cv
549.749 429.125 548.251 429.947 547.326 430.402 cv
546.401 430.857 546.049 430.945 545.652 430.71 cv
545.256 430.476 544.816 429.918 544.39 429.815 cv
543.965 429.712 543.553 430.064 542.922 430.666 cv
542.291 431.269 541.439 432.12 541.058 433.06 cv
540.676 433.999 540.764 435.026 540.838 436.744 cv
540.911 438.462 540.97 440.869 540.97 442.514 cv
540.97 444.158 540.911 445.039 540.441 446.375 cv
539.972 447.711 539.091 449.502 538.664 450.646 cv
538.239 451.792 538.269 452.291 538.591 452.98 cv
538.914 453.671 539.531 454.552 539.883 455.271 cv
540.235 455.99 540.323 456.548 540.147 457.253 cv
539.971 457.958 539.531 458.81 538.899 459.719 cv
538.269 460.63 537.446 461.599 536.58 462.391 cv
535.714 463.184 534.804 463.801 533.967 464.314 cv
533.13 464.828 532.367 465.239 532.073 466.076 cv
531.779 466.912 531.956 468.175 531.794 468.762 cv
531.633 469.35 531.134 469.262 530.18 469.364 cv
529.226 469.467 527.815 469.761 526.465 470.055 cv
525.114 470.348 523.822 470.642 522.545 470.788 cv
521.269 470.935 520.006 470.935 518.758 471.022 cv
517.511 471.11 516.277 471.287 515.103 471.874 cv
513.929 472.461 512.813 473.46 511.785 474.517 cv
510.758 475.573 509.818 476.689 508.967 477.364 cv
508.115 478.04 507.352 478.275 506.559 478.29 cv
505.767 478.304 504.944 478.099 504.269 478.26 cv
503.594 478.422 503.064 478.95 502.521 479.669 cv
501.979 480.389 501.421 481.299 500.774 482.063 cv
500.129 482.826 499.396 483.442 498.793 484.074 cv
498.191 484.705 497.722 485.352 497.267 485.894 cv
496.812 486.438 496.371 486.878 496.238 487.626 cv
496.106 488.375 496.282 489.432 496.371 490.342 cv
496.459 491.252 496.459 492.016 495.989 492.735 cv
495.52 493.454 494.58 494.13 493.743 494.746 cv
492.906 495.363 492.172 495.921 491.482 496.038 cv
490.792 496.155 490.146 495.833 489.412 495.803 cv
488.678 495.774 487.856 496.038 487.269 496.523 cv
486.682 497.008 486.329 497.712 486.314 498.46 cv
486.3 499.209 486.623 500.002 486.55 500.56 cv
486.476 501.118 486.007 501.44 485.419 501.543 cv
484.832 501.646 484.127 501.528 483.29 501.47 cv
482.453 501.411 481.484 501.411 480.824 501.47 cv
480.163 501.528 479.812 501.646 479.209 502.087 cv
478.607 502.527 477.756 503.29 477.095 503.907 cv
476.435 504.523 475.965 504.993 475.378 505.096 cv
474.79 505.198 474.086 504.935 473.381 504.847 cv
472.677 504.759 471.972 504.847 471.032 505.463 cv
470.093 506.08 468.918 507.225 467.45 508.663 cv
465.981 510.102 464.221 511.835 463.039 512.936 cv
461.856 514.036 461.255 514.506 460.896 514.909 cv
460.536 515.313 460.418 515.651 460.315 516.305 cv
460.213 516.958 460.125 517.927 460.33 518.44 cv
460.536 518.954 461.035 519.013 461.916 519.021 cv
462.797 519.027 464.06 518.983 464.889 518.896 cv
465.718 518.808 466.114 518.675 466.694 518.059 cv
467.274 517.442 468.038 516.341 468.845 516.099 cv
469.653 515.856 470.505 516.473 470.798 517.192 cv
471.092 517.911 470.827 518.734 470.46 519.409 cv
470.093 520.085 469.623 520.613 469.153 521.164 cv
468.684 521.714 468.214 522.286 467.817 522.676 cv
467.421 523.064 467.099 523.271 466.078 523.63 cv
465.058 523.989 463.34 524.504 462.069 524.673 cv
460.8 524.841 459.978 524.665 459.325 524.584 cv
458.671 524.504 458.187 524.519 457.761 524.65 cv
457.335 524.782 456.969 525.032 456.656 525.373 cv
456.345 525.714 456.088 526.147 455.747 526.349 cv
455.406 526.551 454.98 526.521 454.481 526.514 cv
453.982 526.507 453.409 526.521 452.925 526.793 cv
452.44 527.064 452.044 527.593 451.604 528.019 cv
451.163 528.444 450.679 528.768 450.224 529.061 cv
449.769 529.354 449.343 529.619 448.808 529.986 cv
448.271 530.353 447.625 530.822 447.082 531.212 cv
446.539 531.601 446.099 531.909 445.57 532.063 cv
445.042 532.218 444.425 532.218 443.823 532.275 cv
443.221 532.335 442.634 532.452 442.201 532.665 cv
441.769 532.878 441.489 533.187 441.181 533.465 cv
440.872 533.744 440.535 533.994 440.285 534.573 cv
440.035 535.153 439.874 536.063 439.617 536.694 cv
439.36 537.326 439.008 537.679 438.567 537.972 cv
438.127 538.266 437.599 538.5 437.114 538.685 cv
436.63 538.867 436.189 539 435.801 539.315 cv
435.411 539.631 435.073 540.13 434.42 540.606 cv
433.767 541.082 432.798 541.534 431.946 541.498 cv
431.094 541.461 430.36 540.936 430.022 540.356 cv
429.686 539.777 429.744 539.146 429.994 538.515 cv
430.243 537.884 430.684 537.252 431.204 536.68 cv
431.726 536.107 432.327 535.594 432.819 535.16 cv
433.311 534.728 433.692 534.375 433.803 533.986 cv
433.913 533.597 433.751 533.171 433.598 532.319 cv
433.443 531.468 433.297 530.191 433.348 529.317 cv
433.399 528.444 433.649 527.975 434.061 527.417 cv
434.472 526.858 435.044 526.213 435.829 525.347 cv
436.614 524.48 437.613 523.394 438.354 522.638 cv
439.096 521.882 439.58 521.456 439.675 521.022 cv
439.771 520.59 439.477 520.149 439.242 519.68 cv
439.008 519.21 438.831 518.711 438.831 517.889 cv
438.831 517.066 439.008 515.922 439.103 514.813 cv
439.198 513.705 439.212 512.633 439.227 511.898 cv
439.241 511.165 439.256 510.769 439.007 509.586 cv
438.758 508.404 438.243 506.438 437.92 505.087 cv
437.598 503.736 437.466 503.002 437.399 502.231 cv
437.333 501.461 437.333 500.653 437.604 499.883 cv
437.876 499.112 438.42 498.378 438.978 497.886 cv
439.535 497.395 440.107 497.145 440.724 497.167 cv
441.341 497.188 442.001 497.482 442.809 497.842 cv
443.616 498.202 444.57 498.628 444.981 499.119 cv
445.393 499.611 445.261 500.169 445.282 500.639 cv
445.305 501.109 445.48 501.49 445.76 501.718 cv
446.039 501.945 446.42 502.019 447.631 502.122 cv
448.843 502.225 450.883 502.356 452.292 502.386 cv
453.702 502.415 454.479 502.342 454.84 501.813 cv
455.199 501.285 455.141 500.302 455.177 499.193 cv
455.214 498.085 455.346 496.852 455.28 495.743 cv
455.214 494.635 454.95 493.651 454.473 492.902 cv
453.995 492.153 453.306 491.64 452.256 490.935 cv
451.206 490.23 449.797 489.335 448.806 488.66 cv
447.815 487.984 447.242 487.529 446.766 487.323 cv
446.288 487.118 445.907 487.162 445.261 487.229 cv
444.615 487.295 443.705 487.383 443.125 487.104 cv
442.545 486.824 442.295 486.179 441.973 485.452 cv
441.649 484.726 441.253 483.918 440.739 483.484 cv
440.226 483.052 439.594 482.993 437.752 483.022 cv
435.909 483.052 432.855 483.169 430.074 483.228 cv
427.292 483.286 424.781 483.286 423.174 483.286 cv
421.566 483.286 420.861 483.286 420.297 483.059 cv
419.731 482.832 419.306 482.376 418.88 481.873 cv
418.454 481.371 418.028 480.82 417.541 480.523 cv
417.053 480.226 416.502 480.182 415.907 480.138 cv
415.313 480.094 414.675 480.05 414.212 480.067 cv
413.749 480.086 413.463 480.167 413.114 480.512 cv
412.766 480.857 412.354 481.467 411.958 482.054 cv
411.563 482.641 411.181 483.206 410.758 483.474 cv
410.336 483.742 409.873 483.713 409.437 483.698 cv
409 483.684 408.589 483.684 408.347 483.68 cv
408.104 483.676 408.031 483.669 407.958 483.599 cv
407.885 483.529 407.812 483.396 407.833 482.989 cv
407.855 482.582 407.973 481.899 407.958 481.374 cv
407.943 480.85 407.796 480.482 407.345 480.138 cv
406.894 479.793 406.138 479.47 405.492 479.209 cv
404.846 478.948 404.31 478.751 403.668 478.094 cv
403.026 477.437 402.277 476.321 401.888 475.484 cv
401.499 474.647 401.47 474.09 401.462 473.539 cv
401.455 472.989 401.47 472.445 401.338 471.932 cv
401.205 471.418 400.926 470.934 400.009 469.715 cv
399.092 468.497 397.535 466.544 396.441 465.245 cv
395.349 463.946 394.717 463.3 394.254 463.006 cv
393.792 462.713 393.498 462.771 392.64 462.859 cv
391.781 462.947 390.356 463.065 389.395 463.102 cv
388.434 463.139 387.935 463.095 387.354 462.617 cv
386.774 462.141 386.114 461.229 385.666 460.481 cv
385.219 459.732 384.983 459.146 384.991 458.551 cv
384.998 457.956 385.248 457.354 385.226 456.87 cv
385.204 456.386 384.91 456.019 384.286 455.644 cv
383.662 455.27 382.708 454.888 381.864 454.507 cv
381.02 454.125 380.286 453.743 379.39 453.581 cv
378.495 453.42 377.438 453.479 375.573 453.597 cv
373.709 453.714 371.037 453.89 369.173 453.992 cv
367.309 454.096 366.251 454.125 365.532 454.161 cv
364.813 454.198 364.431 454.242 364.152 454.595 cv
363.873 454.947 363.697 455.607 363.381 455.9 cv
363.065 456.194 362.611 456.121 362.031 456.077 cv
361.451 456.033 360.746 456.019 360.255 456.077 cv
359.763 456.136 359.483 456.269 359.322 456.701 cv
359.161 457.134 359.116 457.868 358.999 458.434 cv
358.882 458.998 358.691 459.396 358.155 459.806 cv
357.619 460.217 356.738 460.643 355.726 461.12 cv
354.713 461.597 353.567 462.126 352.378 462.771 cv
351.189 463.417 349.956 464.181 349.002 464.548 cv
348.048 464.915 347.372 464.885 345.919 464.915 cv
344.466 464.944 342.234 465.032 339.958 465.062 cv
337.683 465.091 335.364 465.062 333.808 464.9 cv
332.251 464.739 331.458 464.445 330.519 463.857 cv
329.58 463.271 328.493 462.39 327.363 462.053 cv
326.232 461.715 325.058 461.92 322.694 461.715 cv
320.331 461.509 316.778 460.893 314.092 460.54 cv
311.405 460.188 309.584 460.1 308.542 459.791 cv
307.5 459.483 307.236 458.955 306.649 458.396 cv
306.062 457.839 305.151 457.252 303.977 456.899 cv
302.802 456.547 301.364 456.43 299.808 456.327 cv
298.251 456.225 296.578 456.136 293.334 456.136 cv
290.089 456.136 285.274 456.224 276.613 456.092 cv
267.951 455.96 255.444 455.607 246.107 455.021 cv
236.771 454.433 230.604 453.61 222.619 452.407 cv
214.632 451.203 204.826 449.617 198.671 448.553 cv
192.516 447.488 190.012 446.945 185.414 446.027 cv
185.414 446.027 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (M) ()
%%Title: (canada-silhouette.eps)
%%CreationDate: 9/24/2015 7:11 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&CNF+.ETam9'qt*c6u7+#g9mSPf5luMWnAtKBTj'1UhibM*"6r`6P:.Q5QGIioV\>ZrA3b%&,H>mp?X>Cg/bPBW2`d_XLr2s
%hu(`s=)Ta!T3m'Al.'-i]k_Idl>A6GY0G/9J+bgNo3]dm^V>2paiQ=$AF3-\[Ho7ic`8pq:Dt6[>ePI\Aq,+#jiu>VrU'"DX,F$J
%gL'E@s*/^tqr6s(qp!g^^[<a-Y5Z*2o]#5fT<-AFce:=Uk84$EX.)%\GIr;Z$!=o=k<Ia*0,oFk#Q1pO<u5d^n%Z7/qq%IRZ/=I(
%2tK!)iN)q5S^#a"R[DLo0E19%*ma!#]BNjDP:^3(l1<VqU45isBD]_1V-\A<r6+R'hjrZ]h43;l?X<Zs0,Wm*BAI4mec,EhIpl]i
%O4aJ\@_^^3fRJ8Ap>XAq\i[:)J):-5`t89smW[8JDUkfV-?ZbR`;fX/C"WLHs*gC2s$O-es2DbEY3`0<kK>Mcn;ZcDqR!<JI\!6$
%HLCr$51(Y/i32lnXtS)gp,_]Kp0F*_q!Vm*#Gtk3o>sn]`TENP8aX.(QBTgr]USM/5=b;I>3p_uhuEN(]Do0$HbI1NdslO^pXT)S
%gF:HahY!*8r;3r>qjTfTT&84Mq*;!Q^_^(UpD8:kdJ`^sMuu<$(&].)^-91)DLZ;tI!+tF"8MP,RE"]EqtA:tB0Yg&DT@:n2nuu]
%?[dFr:R^K#>KXg)6Z<U5pN`+&H/?eog#]A4[Fm_KqA`6e#%o4$)./akShCOEIs5u5h>-09`t[]Trr2'Xo`9-s]Nb:e/`UA%qVO@5
%(ULNWhqdZQa7N=0k4ogKOf%C(Mm)+Z?[r+Lc-+;:F7q6@cr8cbQ@EYjIei!im`[k"gM2N8QeeQ(hW\3<p88W(m[_,EQ+rqU+4*p\
%D^kUm'Rj8Ds7Z(ah7[%]1pc$(r(XNSC"E1GknnMJBsXtL=m_9]Y:IlKQ"KrP^M3E>3R+-[VsEs;r9!frg74c*gXFX.ec#-)#,eBU
%aX?ISp)3ZbrO6kh^G!R;o,jF+0)h^clPchshm"U/V@AICDlnG(LNd?9r68"gMSC%O2p6tg;>dQ(o+/X<Mm)uKq@%&WdeK:iVl.>M
%.;A@ee%V0_<W)5iIJ(;ST>&Xs^TYb?UDcl)&'\3$Il!<2Up&R'(C.uFBZ:t28c.(`B@b/]r58XW&,845%u@u7`Z"[-&(AqF2qM]X
%2[:sKncP)qdJ4K)mqLpR2tk6mmgIM'I;8am++"us2]7*Y_ZC('Z9WR,Q2@af,Ce1dELeu`^3F;iV@<p?mK:YQ:%I]CD`FU)F<3t/
%n4o0kP]<K9QXlVgn%R,opYN[OS#=AhK,O"Hl-jHrhhUq,r:g1<-LVc$1#(%22opb6eK7<C_sR1^epZ?1_`\s.Fgq[:l/N6n0N$X:
%fJILFiO$X3+&7GKNU9^>_j68GN[^#BqnV&GV+H13Dii*UIrb6i*WGASCA"20s7JV-]ep$8rp,'rfmc3`fDdC[s1Bo;f9c:(m$[n=
%n6c4el)4OPiP5B4]"`LKTYl9XcYn9m59KmjJ#;U/d!<ou^\rQYkOFc9QSmq%]XH9*ChCk95$daWCcQnu0;k`>Mj@.G9^Qp6A-QL-
%>8uLAf)bEBBoOIm#C3bViPK!#0D`8f3ZS;(B9MsaRaQjd%=Ce.QE>f=FfI`pM7V7m^V8ptRc:'FT:SM^Ic>;Gb1,GbS^n5:D7'#(
%=P&FrX\5b*\'n7tB`+0M0t3RmqfI2sVX@0,F*[jJ^DO3NL!>0oYQN:$CQR^]?1YIMG<-]ZUm[g#pQj@c2i-q&oD!@Ma+kS(q(eN>
%^ITI3aG([aa/<[)<+!2>>9?teBk[&<dP$"Q$l3X.`]`&\oUYM1Z1C/><]ppGn4u\JrbnA"kuc`.VnUIOcf.IsgM3g>3adQCp=XIG
%Rlp$&@k?N^,@kLPLs=gsh=5P*:cn-XlNa4\cb39U9lu82*kH:1bKg!\%N@6JiA?R8$oQ=>H>scsPLh6u1fc43Ndm+*6OU`2GGT^n
%p%8cdR<IN@=MO;mgp?c]SA9\\Ggg<K5Ti;e"7"ArNi`('RQc^:WA/\#7/-J$(Btob1=t"Bnr2BbRQTUKdIM;Sl%T4KQcDqKHndde
%bd_N(D>-O*lG#JeirRi9N.!Q(Lu8;BFD.RB4+HNPE@`\\IU%NC(D#-X5U88;e`;Y^aJmF*h`aP6X_T'!dD/8ZDd/=EL&X4-s7tnE
%QP\a^Vh-?,9'_tFG)%U.2f0P*^2Z3T@j(&THkmWBo`7r.P]e#T#VekJF<*d7BQ11>VB7m,!j>KYM)uf(^QF>>e%j(-]5NmW[@t1X
%,]0IF]<foDGmsAi-U5,b[Uu)5R]Z`798dZZhjeFA0*:<bWX"8es*D+Zj>_(U`I;g5o00a`:QHjr@N52d>U."VK=93Kd"0$/?4=un
%f.te'$cCtD3?;B0003@mH:0BU&>)!\*%5?qD8Uc?VfI)Ec=%`X=$,jbjV[.kHu,QG:2N`:\-\D'5P'NMP@NJNV[jT2!utEfb]AA1
%%,u>S["*/foeje0(YSW=Mk']XKTg]J1/f7GoQW*N-:c9jqa?r9HTic>^?P[KZJq&.1>7b:n];#A=-lX%i[`&^InZf3BaADnf^]kV
%hcjPOFlLI.fr%#eL;VUF[mOWZ.%Ge[QsBL(K"ceY=naq;%3#HA+CiY8&R.R+o-LPl6,+87?h;i[co\/-C*@a<LIR1E(S'gDA%S6a
%%Ut5QMpm/1QDioY.)-W9Fp[$b<,D-INcQW7@5pdHT_bPkOgmG8*ufK-q\\O"lpR7s&>cKjLq2Q;kD^H%o,^VP*Fb_gBcLB=FZt_o
%/:ljOo/;"+FV#e5q*'7L<"5Q64IhFa/c1d'-MjPW,-d&<0@8%P=Y]l[/)0en#JK^Z'jN(>DAbs/6gZ<#YU@cVKUc]rmJMN]5<BLA
%#+`m70\!nK,H4Q]r7mndLu8jKI$&2\?opiRXo"c77pJeVN$Iur1kSM`EMV1%%=op&HP#?pMnfZO,f_TM,F-B]b4>]Qg@uLAD/1a>
%(#?Rr!UH%=F!2k\K5!BQm'2BrN\u+J<'q8h-:8Yq[cpCnM*><PdhI.lg&Z&NY/mpmB`s\]i]UdHD(r4+:6).((BY[FB2Y)Sr^./4
%JpZ+cl!)KS8HqC>F:5sMSf]usRl]B>^1"\:O90"BV]2(`,s?;h)0u`]`B'6t'\"J-9mT_CU$1_AFk*p;@c;!L)WS.4?b;U9)@_=G
%>Gq&!fL2Ke%PdD'rJlNJ&,"Bh`cbcL.W[YRL'o7o%8##.Xu7tP4c"ebm.[EI'Y/X1gjOjP:^gN8hi!Ig9J;DpOI44hJINdCQJZKu
%<Zg+Aguri&PR"5NHgXd+9aB/PWAcl!BQDJ`%as.[4ksS-g'4$i"s#Z<'Q6?7kIZ9lRm%Kh>hc=bI`EJLLAZ:g=L>a2\bRB,$L=_5
%d1l4(%HV)e4uSPu(tZf(dJZUVdnN$'l0S)1%9GN6mHI+'@mfO0cB^B&\#KDOm5,&>VoRcOA#6/Z1_V^s`O;Ir&#DgP=>rR[Ob3/L
%b)c286%][>^CCE0VH_mhOR@+Q6,8MIU^LDM@)(r6V:fB@2hJ;gc=s]2VnTEg=Db"bg3,45dj#0J;p2Rs6adO(4](,\qJC7q&?RYa
%[6a?JJ]jRD?e.q9Md$oI'D;tW*L"CH8\:HQ0WZHQ;.n'97H)14\l#0;&bt15g.32$r'ao6!GS1F6ACRS;Ds5234ank*9d4_ZQjJB
%e\cs\VdWRj1g5[Ki3uFM2)r]uHpR%FA.fkeAt\MK-%knSgF,=8m[LgkDji=8cmFIn.uSW@>2T3@+0LZRrm]>/kW2'^%&2B]gnXM>
%cSeL`<c^J:1>m55K=c%sZ!XkX2$WXBmC=;KfpB\3Q\,k1^j/)/BhlS(I,AQ"B':Jo`?56RZctQ,@X^M.;WtQZo\]T/nho:Qpuh7L
%2n6G;2p^cU2cgesho0LE5Nm;umI/n<s4j0a!dsUo/*h/'M>R#05PqS_DY`G<MmrE'^V@=*Hi;XZ[oYfofdG*P?bP7`:+sn1p,i<A
%06WuO8,Mbar:f:=r;%4joRF.Gp?Leb@/u)^k44<+`RXY/^`2A$o(DFCcYfnX1AI1PB:!6i48iV-qt'D$lo/Rc_SbRBfTV'GhqVQ,
%?eq]Fg:[$6#9"T\l7&A%qW@.0*Q7Ai0E99X=oSKS^HT9>GcM+4X.,=O?hTOUqX!YIh5;(dbLa5X4T3<E[_[MjRG:k.^3P!HEIRds
%)t4]MrVK/j8dN8XjmOgMRQ#/'^YaHfF`h]V;K!,]3hX[@SbMs%Ht7$jTb#d/J%C7s5J+Ebs6f%9qYTkc*ub.]^Y_6IOhOW.U0$(A
%%t4!IYI9M*hrCX)*B*cKo?5b:jf>lRGPf;'?+mcqL2H\8pLi*.BmG$Snh=tY`b>!!%K>HB+/R9_OZoiGNl\-1+"rGWq:.]9?N'[t
%5OEo:X8/*<-i;M&m!eW^ZT%d;hccMQcJMl6m'fI5mW\SO*'O#91EaHA^E/ATo59&*7Y_Qgp;\9Nko]8!s(8K"n'\T?@eVPU3pg8R
%gjWtTl5QpD.Sdk\mcQghrQ8`p5I;urMPEU'^,o\n?0psCI2QD+I/:M5NR?2br:/[t\T`]#^3jMlqt)S3m@/U]+an6\hE.,!Qg@HG
%K/eu?s.rY3LAF+=g]i*AqQV]lUdr@/#U\I,C&l$gIQW,!p70t:(k=i"nbI+,?LL,LlbD2&ns;9OQe()]Ft%@T?bX5.)^G5a21B^i
%F7qh@R/]HZ3GS<Rqt#`t2uCd3Q$:">bdM9`21OH\#jp!B5P`&HDnl,,m,n$1luIPd?SE)N?J?RI0&CK*q8M_k)ID.BNcm.Hg\X57
%0>CMR=-rf^m*`l'X$>uY5A?TVe%biQ/F_c3U8-19(25a<')umXRO9ZY\G?.qV"i8S8pY_\T!fBsB.kq3:V%E>3U-S$&`Ko@$GZT!
%l"#@R57N9YSZb`]\U*i\+FjE`U?Je!c]GWoTlps=NiE%7mZ"LZITl@=hs2cLIf&<#!.Or$5fmptc<pP=6cM:*WU,*,qu,3e6c]25
%,QET3D5D#2[\P";[%ndn,"lZ.T+KBJkd%q[T7?V6PDJ>OoI$oZ^.]ob[H5d>rqZKbh=j]K?aT`&/C+UJVcQq1Xm>*!SI$1+n%ZR-
%FK$W>nbl3I)0nQ%nuJh#2m;qtWVgH9'ZT<b'(^@S^H6dZP1KY`afPO,ao%d7_d)aXS3(Kac3KqhQI9Y,]u\s7MhJeBc0icErU'T%
%GGO.k1%PqKqu#gO]=2G1m<;oD?/s/=IuDfD"5`s[hgN3<bMDSFYKu[_?CkMohu3>q.6[QEh4<BW]t?D<H+ePn:??09b>Pc<@fk!&
%/q5jm,tE$<VUeB:kZGI(H[48eQ>9ejhDQIbI<=86:%+_B/USPRmSB0NYPrY:p29VqH[HlLH[^<1R]B.j0,=K5g'KAfpgSaMrU0Dm
%[s._=o7-L^hEr@K4+rXfG;j0$\(>8IMm%T:3Lmk@h&a#ldB0pf]Yc"Dp\+%/QLr6T*Zb3kS,IM!*o6)@`^fp8m]Om=%<ZU8hn6W^
%48Sf#$tS\rk3Ve;6O`3h=k@;i?b_N9\(=]*msafnid?jPH0k.glgp<jeH":(D[uO3fk7p0Dssj;%K!s.RWdS+fC28SIegn\eX\;j
%jk7W+jfA=b;!5@7X,HRbgFLdk^Y#f>7p>WlY2jShlZ"qgIb<O_A$m=?5"Y,eSP2P\k"j;e4+2Hq0eVBKm;Hl635<*$^pNsc2pO&E
%c?H^0B=ErGhlb&>q;m'LHZsQ(Vu9Ouh\fQ7fX>TEHK8$ONVT($,=MLm06[YQpcr=Kot@e`8'=t82m;tZ5CcnK?iB]`mf)\Dmfd@M
%-9PcOmTo+Q7_eciWt2Xb_P`&P^H0FI^\YF?QR@N::m-%$m(9BAk%>JHO#4KIe+rZ0_ng>,%Tr8XJAr%WhL,&MI_XY*AoAN1]4W9G
%:RpI<#Ifah@^J7haPUk4#Ue"a>eS'E[psL:^E`(4o'10?G3>4'<`ccngO=VB044'QT>,eq7.U?M(\`/jk1Cd8X2fE^NLt9AT?$p/
%rOr(i+6]H.FY`NgIrbDTkrnm)g(C1Tk'ql%pA,d.6EGk3O*=0<RGR9&3VNn'1;1W?hs5EWf7UsOXQ'2u^Pbb_e\*L5puZnkLN`E:
%a1V)o\'3V,eU-H7T!2pi?0Q]redp_!GC-M:mc2cCfB;kqioIM.,uiahg5!_FH*fYr-6HoJrVDLFSem_hT>gKh7n7\hm\/aNa2\Xm
%YA[1]WNC2]@FY-f/aoiso[VN9;Y%`-DiXJXV5BILOnPs>4Z&@(2#d*s\)6'1+.TUiIK+2s&(8JLqqL`20$c^(q0e?^^'l%N_(jL2
%lJ(oga(Vsrk1c6cGAkd0+)1&#DVi&6+):f?il8L[V30Xs`34rn9@Jkq^SH2%6]H"jT3U2kV9^3PJ[PF,kh,W22uc&qjs/-h(%.(T
%Jb.s?2Tq#bl]^e0g@0k&k'-d[Rm3I2_Im&h_q.HhrB;6mk6#SgW:%t"%OZahgBY!T[W\JjhT#hjO%pIqi7o1;A*n/oiZoR\/%+<s
%g!/o:\"Atp:]&aeT,smFpKA[&`=j.3PD^eF^IKmP8)(d=]D9qC4#;@Qlbgr=d.hkJ:M>2qjrYfApD<]"G&JkJVu6>::&akWmc=&[
%p!'sIQOhsJle<(`0d@sQO.aS]M31U+KhH3.bcou?qNpN3S+e=p7"Pq,rU*6FbSgZp4&Sm=Zs/<?Y4k%4V?sW=mp,b^U%;0oTdegS
%54J)DDbc#oq!-+b%hd2UbH&8DpGWWM]Q#U&3=d9i2%#c08Ncg9aumn-mhs>60hKN$eEbr6+*TAU9Yn@:Le't\bBl^^O7D]9jR-O5
%H[hY-]YC)GP%EcQD<CD;>MQhQ&1QsC`cC\,'=a)\)Or0L+)Q2ulKhupNV7&'LNo5r]"WF^Y!MRU7^"F_+5Bb0FE`1R:Vm#aEOmGM
%m]f6U@#slOS#bi[k3Z.8rong7dI#\TgY0f*WS)u>bR`t&f&YpQ3lT!)nT+Zc)4$<'BWR&@Q]Eu78<Di;D;H@(!snGkPh+UH5")c\
%SR``QXSG4=Q]]Jgf!(4_<"n.1-I5cFY9"<HeDg1q*Dh[GDkEo6^=2V747*a[mH(ARM1]!&?!^jNDrcDOfqS]'#lG:+Ie&8XY>09@
%]ROXqr7RXgci<^\=9&310E9c[G!G&K.A_!>A$t8_RYWgf]fa&WkT\d\?o1!XD[<sn^j.i,+.I50/Sa\2X8)8`0DgY\pG_!t?bOX>
%LT0<Xn(L"(O4l(tI\35Sg:TMkHUaS;><JdD2*:Ze+:Fg6h;1:&"4q0=hB1[VZQJmJ(gB/<^=YYsa(2VQk?X;7=-oB\pR$*_6cd.L
%I/2dOCLKCkaCkPAgTtBkcNcn=dJ**Jc@1.\p#esYE-gE:OZu5D529:0=.d1=qV`SAESU6I;gtD"(KZr)YJ.c^HF#h`q&dp9#LB=Z
%Y*R?D9Xm:N]1:=6qX=`$psJn]Z7;AJDo7Q!?etYEo1'LQO*:Hn;%;Z_?%;mA`pqHJ?U)VLTC*9d#d8QcBC!GlOR&rmCCH])f,]So
%5%:K1.j"-,B-pco4M127Xa`Kl)8h/be:-j5d`6"j\4>[+*OAOKMcDoNd.5A\Mt9ZKHchpC^UeeEK?@i1D=>cb4l94u&*n*D?,dCX
%X$8Z:+C/YimnN`$4T$h?4N/385saY:E;2RQm>kZ/qpU%^B)dVmmlS5?,@pbVi"eg>lmZ#s.,C#i!^j'PB@e20E.6k@3,5o!O4_uI
%,`WsIJGabC0;.8KH`bcn_sLdibLadLb(InEj=gUNX-<J&-2c,X*,TJ/O.HSf[#`'R*oib4r6.MMH&(3>H#iP(B5S5gop>*dpu9MB
%`Z`RgA+n-olg(&32g"lYA+_uJ89hj(c-9@TktAeSqEJD'6'K&I$Hm\(f->2%LWSh>rN0@bZZhN-iBEC+p>_>u]L0<'5ducNFcTQd
%Gc!r75'tq<4IXt236)7u_kX>MP@$Ojlb1pDe&O#4f",UY@JG6@aIb\+T>&qPpQ(]/mTo-S%sIN!Y-cO7Hunq0o(D`HCj0F^hgN8s
%KuIqR)o^TVJ,XnH\[t$%!R*O8gd,_*TmhXR_N8qR\,8!:WaD96iD(a^,DZbEJ)>ReHNX:molbOrS8`+GFmgS^e*oZ<4$144SR6]X
%h%?(TgRWb;)rT.F[(EqZTND$H\_R!n]8JK6pEP5lB@kaiK$M&JhnJrY$%I-o6GBkF@/f9_St4)0S+Y=@LC'O/mbV:LM3Q\WO%X$d
%q-VsJ?U&!dhWTZM#,[5U[/UFKl`7Y(bL`W^4lNV(D=pI_`C[M[iD5j3TVE$#o#HEC%UNL\GJpk9"1k`5Ht14O0Afi$O0X/j8MI!L
%`I#QT,Z&j5E8$mppgr10ZE&7PJO&\%h<-G@rj,DMHC')cqts?lZ*"!maT6ndm"MF]hYJ1,mA>btB-@2XWT[%J)j6)Dh>G;Xs86O0
%pY1f`rRAdLs*Q/9gAQ[&r,91Q<<)PBgV;[Z,H!ROV`NFOOr"4uP"t;4kM7'ZQ@@8Kh@,cIauX\2]\5@=gJj(/.Kdd?F.IigP>('"
%/*iSV8R:]?a[VZL]'f,GgPhJ8OQE8cg\nL^-T)"*XDVA.R+?ABk1N3KZ@5DgQ^2GTou/'@Uib>:ocu>*WlmtKF&p?<:XW3YWm,^_
%FrS1J-T*23oN"bb[WMI_RX'%MbpR)jl=]FS9==51gX;@4fih+#[llmrM=9S=9:gD\`RZfBVJ^*2agD1T:J1%5X&MmWbg+Ej!IZn<
%P<PAUD#]kp;TELZ%5C[>WGAh0p2cXg<NE-8Z%8e6ABB[G[c"]BYN7$RIQ;TkPI9.o2D&[8:Su&p$rV,6"^.2&GXqYuU>_H&[InXk
%Cme$rR2Drr/<-2Y'W?(HZ_,lQ0&$<QZd!*fj5jhhRs8DXaUk,EL&Jlm`4P,pBseUGbC#HcLGdadg'Yb6h@37]G&F\s?Ls$@mn1?;
%3@SOI.BN3<c*j)GW"$[LD9m(0p2fN-K?=,?Zm@j2dar#c2-F;@D?D0MOf&=Gg(8FDL1gc>-['^`Vh/U$5YTl)?nI*N7L$ZR1>B?i
%I]3FR6`=k!QVH7YDr0Sd?SX1ig"N=&),;Pp?*'1U^cF,CJ@,]GQYQPhk[`>Q9SGBgh-C-8^.fr>)PG`>E`Ju^dV0StXaE;)'AM6J
%>Io7)DFRBEBj0(9Md6_&FZ,T;>4e7r)j$O;4?#OJCdfs(V60l1].=.?S1^d1Y;5Wr6Z9ln_RG[tYt6LTT=2nJfM0TC:a,Y30/ef)
%<5e;(A?lTW>FC4_BO:%<p2AqKXeHK>$'hqN/X)a)_5rWi."GhuBK+3p\FV\AOd)"KiRr;/LWQChS[0sg:'9^?D$&A'2,q"O9ej8&
%R2F"/?:neeBshg%:`.8$JAk7pC,^3^rDQY(V<#cjfaVAWS88Yb:jjgISQK*)(u)diW+<O%T<B6,>oGVL/HBT/MqncYJ39r.J@2S@
%9'+""PE?9#Vf&Oh"KX*q2h]NLb(^p['/Hr;M<PZI`:hY,Sat(oC$g<&#[=F4e$aKUA2%cY%j01,`mF,JN7KSR[PaLW!<</_^hjq+
%(B^`dX`rZHqa@d:Att+*XpO^)_mb^$jQ)FL5jn%=(]pg&OPR(2IG\`#W`9o3D_hAtqeVa0gXT1ZDUB8-"20YFc,m\<"Of!eb/QdO
%nnbdK::'GaYll;;\uoES`0JS$Ell354/3u_gX0W.QGsP=m^1A%qmMX0b,t;ohmbO5))Fd!5Bifo!N_-6Kb60=H/5WgJQ`72fL_S,
%c:Cg($to.J(Y/Y\A]P2$mF`p+[$4@+I@>"&JBZBK3lhjs:L"-/*ED-odgR\3X!0a4r<t&Wo]8te/E;&2cukB5/W60/[XZd.?+%A<
%3>eVnq[+Hc)qOD.f[e^>fTK:&JM"i):a):HLoB:3!/?QR!/La#\A7+r`JD-)>!nHuU/s(4;>>F-X`KoG"(;>>I7a&cdPEJ6gEo;@
%@XP$Be%F=Y(784K0f@]#`jBS<b0)NnbZ=n^+M.V2nN%Y#G](p.5soKe"tI7&ch9@OV#e`_1lOFJ7\n$NfNcnlfA>Yq/;=L#'GV6m
%I94<pA!0<ZHAUbEFTmLN@!KmZg$ourE4/qcp7Q&&+9GFKX>B^])!eM&Zg$,TkQU"N3SOH$rD2-N,CNb'J#h5:%;)CHWpLJ*1GR=U
%dq>j,^;WWM13t^a@Oh":-CUr0+0GcTae60"J^154FYnEK`4]9R+`;irg+Tr@L4JtL+tboIDj+;i0%qLF\e0I4Ru3&o"c7'(n(Yn7
%C,7H,o;oNU-F29?N3(^HNHJe\H"laK)fc\DZD2+2UVdo7;KVkBf8VaW&caMI$!/gRAShKj3nlMJ3kbr/KWG;n:-(]<dSaK*7OP,#
%!1mDHWYl[^R7@$t2U+g#8XqMVcGnB#hV0Cu:`!?$&Vn#b<</SfoeNepFu9TWNNDOV+Mio.NP$f(Qc:#\XQX3L[.8L3:Kq]#1M!ff
%d`%I\YS]SY!'EDi0;AleQNh8o-B7A9VA7,_!5a4&6X*cBCRUW4CG)R>0IDjc)0"$$O&(j`_g]4u:+;-hf#jeJ=eoeg3J38/"r:D<
%=X"#602q4+Yr9%17Ed"J@N?h5o.fB9apL?lPPt-[aKB`%X,.]@A/akQ<nk^E":6gf,?YQX18Ri56W1[\#'8Sa#Xk5G=/]p!FsWGW
%o/5r;"^!/(&ItAuX:UI%cl7mn/'U1<C$<>$d%Eu';ffT*=IXUK9]U,Hnh+'q\`S:l^_mk2->5Ap^h2ZJ^1!p/,<Imff\Jel@[L="
%eDkC)R@7FfW!mNu-5&Z2H-m&L@X#^\U(Nu2M02Df"D2:$Z`^-DeRkWHUcfGr!AFgp)5f>ZOpu"._HVMGA$Z9IC^-9TkQRj1bO0,#
%U&m.-Za2ODJDSI'U@)i!&0(E_7VI5&\:nc8[l(I-!0d$U/8."[BD]FZNc,EI6n^/,+0mD#CnL',UUIUOoTmV/@7M]4p%*!I-MeR1
%[5DrlRh*`IG2H$0=SP`[6UC-4NjTk7M%kP5ca+?(Ahuu1#<HmJnCf;?\5T9Ig:0U)B2\sW0QpCG>r<,%O9$`"!>C**VAtbMNO#X9
%9G:/4A7TAT&5]Na7KoL35^:Z(70>A2do$"fj?+Yr-rQo^5V>e%1HK(ua68j?N"r(S>WbQsLX9Ce%+o!_]itHM'^KC5-Lo5)R^aMr
%[Ga7=;MRHki5sMM/]$"[FZV1M"VofK9X[;X1S>%PSaRcV\Sc2:hJ$..]tlD<k_R[kS!kFOTtfJ[Fe#;e!Ad(1>(&ip"p-XaY]aOF
%!)*H5`R^u%?$pT_QiMg;LX/9RbN`rA=J!>a2k=[6QJErc9i0GV`0?I&j0WPM%8kusL[[GSD9HB6bmr+7gAjc,2h3VR;ZI8g2Nj'a
%+a:M?Ld)5`"'(ci`Y$ue@CO-T#D*nk)?"<u@3J,&G21;0&;5KT*CZ_IFjGMN!%pnEFVS`1CoGPlN#L$5(#-R+RY)bYlEN'W^rC*i
%-8PS*T,?b#NA50be/8OMd&cTV,psoDg5a5[ck+Iqh&p05i1;4l`0_qY5YU;/WV5[:U>!uYAV)YaV^@0m$"Hq)n1mD2n>6gV%=l\U
%<GgRFS3#At<7Y6W;SYsQ25s?GUL-M[X"jrp?B>3BP02b:jVPi<r^Dpq^OR1RTqBRHTa8`pVPY;F_VQbXdBp,\a<>8SXg(e]Fj#:^
%LpY[^CsggDV*ZlAD6[BfdBP=AQ8NgQM'Se*LZtda/*RiV7[Ic4a]+n_q\`.M(BD_o=F,MM\gFM#*BW%U"Yj>kFd,"amE2_`/N+Q-
%D^;K:7q.ppC"GuflP[VSM&,$$I8T\lkW^FQ-0>\#>pb=4WTf5$C^-/$:Jk%EP0#8jiE+^-`$r:uF.So'_8@Ff!*?6.5Sbu8RPe6h
%%)\O/e`;)Yl^(:(!&H!XZ-0*7WX5bDQD$t*S7],4\QC,9/.Ua#@3E,#X;j`m/q&f>:p/(DSDf2&Hcb,aX_[Vl+=j6]0PM+eeie.l
%DH6jQa2.NfAr9q:h-1cK1-C,JBoS-BbqnFHnLKo%fi;YA(q7$.RZVbNe(&Rhb](RhIAR[pHU=(g*Lr\;@$X0jd@$HcjSbPBZS!E6
%4%\nj5k^[&4/<3D&6cBsH?@gX1?k`l8^Fggq5s#4lJIqE=_6Jmnn&_6@V?Js^2"NQp2lk1=KtdbjhU6r'TqEi6GJ-Ei<L^[05c3h
%frpUb`b8n^NhY/mC>>AuPqc`]\=2E+'d9[^(Vb]'4Wp5Q3a>]_F<ImdE:)I.NSYeXM$Ci"8&kdU[A$?f]^\EpLCJsRBPD@lQ,4\8
%%VmXpSKXg`;ljJrBkJ-+L8m,TZsXo)"+"0mCfJWQa96<'mA+VX/_Q-:G8&=,OerjQdusu'-))VDK:p-O1O&rGe>`3JlS?]]LfE<.
%!F`R4K9:g<J4h3@EETnC)C0fD"/ktiK<''/D5kW_1'GeAa0r/pFC>We>N_pQeukt\,\^\G_ealB%7EAbF[QlY!UL(MZ])n@SVeO:
%JE#%.:/?n$/aP4mRtMc$&1jgc=d-!=H4e^c=lnTXS6%3qe_.'0`X6"I&Hlla72qT$&VCB&Q`V*_q(b"bcIjZ+>$88Q-()5/9_7A(
%/)"hP`0>c?QjA`QD+Y)p(pI4SN>6"Eo2:0S[\>e3fklZ"Ya;A%p04aG@pg`V^dt<cI+Yir,Fju/h].hc$[,<r*@V*34IZ`\`9jc5
%iMg&ke_;&aBD9CGbf5<[5c!WF&QMcM>^WP7c$=]Aj+#F5nBV)SN%RTVGX:.t]#&cQBY)#74BUE!RK77@==t8m^:Im";)+.@K!euI
%E6"'SB/e@ki$GgOjSd;2(DrjSAoRnX&BTmrBID;<bVn0#"(oPq_@@@Z8$`3eW^A=t5P-c)TiTDZL(8B<E1WOh`N@*""/_VK?ml:?
%#E5\d&DYEO!#Rg!9M9TNMYP$7NIk^+fA&-W8`4L%)'BFko+]RP,/KGMX>Tm7b!ts-moEc*4pI)`5[/pn%:h?i;DFn?j*PR_QPiTR
%l9<8u1/48]h?FD['m&0kiZ:?&7T$'o@K<^lj/<j7KcMb<3OddE2,>io!1XuB+sX5K8C7HZd1&u76a9U!2r!P23<"g>.U$i1T]4`*
%]%P4?$s\@A]G3nNCeGFCcFj:IH]*m!.(r273)p>YDfTE/8TGA90$OC$CZmS9:3M`RJ.7nQ-\eT.X)",EFt^ibN?b.[a5LO=X3E_$
%NU(,>86U/tMK2J%,YY[YWm/"=*GsL6fcCZB`OuKAi3ts,jr#;)<K/?,ak`Pu1Md0*JAO_t7_bE88PURB@d/.E9uXXs:62\).,mc"
%q6Omgo%f(L2'W3uW)k3Wc/f+:1[?ujf`gGQoN:gV$5)CdZKu2iJl1aCc.#Ln5s$f,2`s,d$E$+^EQP,1Vi&_SAg1GUI*iHDZZlLJ
%\!^!)/C6:KSX%_B?YWNdD`F+`!'")95d4JfEIc..#"33R=kCn7U5mJf/$"Vh^,L'ZRWO>!jBja+!XQN635lY.>mqQ*.C14nd>VF<
%q8Km$j(U,]E)(QB*ZS!1iA3%1,J+@aOA_GqSt_1;*h.B^9LV0<=Dq5Vi@l%3*43F(4#$"2K2,`Rficl?XMtqX@lIE'cBZIlG0^L,
%A(b/eT`o5X##RlXEHJ@YB&28n7mhDX],18th;SL_#b7B2VAYF4G-tHgU"-\+&:>/dFOJr72i/WRr<*opLa!jsae^2')JE[dG`4BV
%W$;?S->Zr*)2+Jlf=VKO[5e=DNe+KjO_TO^i2fNVba>jp0ap<Z9M*mOAAc90AYQ\=c0V<Q7m'r_%KpS)%;2eGEpHG^N>j3r3eUaA
%oG+jcaRb[9g`Z@6gMSg3&,-?]2,nb<j,W^b>AiIScJ4HBYdiE&</50$0:>c[<]!Ni`FHu([p'kI1p5O;#t!peK\'acJ(l7M1>uju
%EX1P$_ZS$ZBBLT"O/ZSfkD5#NIGIm`Nj5eYpL-CTkn2#f6=(G1L?!s/%99O/E95/@?jAZN$1TEaoSpaBZ<XUoiuOTM.@csckXtNR
%K^Z.a,t$?+>D$71\9T2JlC!B!Bbk69IT,iW#/#nC(4KojL>Z^GLgE?:0;='k(eM/3FfZW9+c:gB%`G/gLTD@:*3E%4$@Z"1rgTbU
%<B$8]VK#2]B3(-D3CDEOV9C^33n/"t3G4I5bnu7GCk/Un7TuAI'`BLp`l^.MW6Vmp'I'7X6kBum0&s32X\Wg9""<1<o/+<KX4bq+
%(ZS4oE6q:aj<Uk;\83Wsl)S`0QhU+X@X=buE%Pi:`?iP0YsC?184Jlr[EdS?"Qp@\=#jl(HUb&;^Z*("d%^adI$(i]9P,6:0GD%e
%>Qbq5.K3B&PuWVjB."8dg4;pWSaj23HiU`n46U@:2'Fr:P[X+%jk>POd&hit)q0Q+D8]3*YS]H<2%6f\h4p&A'1fH6r.3qZ*I&l=
%g^..6_9R-=a46pk..GBW,c?V_Y&:r8p/\7H5Sf<F72?b;/E6kd7kQRBH:PW_8Mm6Q^]gP-l@+;E;upOoP=$VLX!?3mg$+GM6CShO
%pE[nF>p(d\CrJXRp7[LiRrHgY1pYWl>]-r/U`k8T/EtA!(p]s;,;.$Uadq7%)n)uFQ:K!G4jNKZ+J'kS(J@jl"XG>u(UM<t%\^R-
%X=!"o0e;^JKdXm/X8AHc0n[$XlTBOdMfp8SZ4F0!)_8`CD'WXPG$akE!"CMakEU'0hfCecfQ3G1/C"\KachX_2@6d'-h$?Qgft33
%gPEg117dDj>ZkG#c>AD.F13)EmC==W!.<iRKj^SC5Wn*s9c^ObEJ=Tjp=Z8\=abilE!K:H>g.j.9FaYQL+!\`=6C#fF)#\6T]XUp
%WC.[s!5jg5D?sM8-G9(\1MftV*]M/8E'\HK/?q!OR&QRU]$A0=Gj8@9PjU.`+JP!OQq`-H-j:G4jU0310mW8YLN<8#@M23%6d@PQ
%8&,HA8B!OX%tiqo6rdQ:SFkK?FYs^7=A9s?ZtP,f<mjF/Hif3(`0\!2Xd]\gP1-u\8c8c7`B]njj@r%o:N`a68f9mh)RJluPmarB
%+umLe.Qk"XMiQbA`'4Cm.:chT][_]3KsT[abhMp$aAg-Ijkb]6bNKI@_"4TGdD>t&geI50;jZ$A?Ip?!i9IB!?+eVH4DJ?u]p^.l
%5k+tDBM==A`m<9n,^6Z<@k2(RQ/&cn5c-jqYRnDlaX(i/9H:_M=bJ4hlI:GIXkOc+mZJT=5r/_N8dI_O9uSJEY>0W2i"Rc(qqO<^
%R%OX^mT`f4c9kDq:TG-0]::TO.C-dWFAP^2qF12J/pQa1g8cO$UX;rdIKs%"l_!D7MPV^O6Gf]%I!-!#BY^&2BlR\M-,`O!!\VoO
%;hq:X"Wh^IX4tgK);/trbQLB.HjM:TG?Ck29OJ/u,"MlT[2d&O]:fas&o&DJ'U%,f7Tp"#Kb22gA4>@V/i=B3@>-P=#CC?_=`j;:
%M9752I9Sh\&;]]#XL[XrYkkgiO0(/(V@,AA/h.u`EB14C,I_Ms#nL.(E>B:+#iI1hm/U;EPUD9FZKi:dW3bn33YEOs)i]m\.l:n2
%!CFD_lR?Zam9Qh.2&'[/9*_a<74"W[?tI2,+5r=^h1[hB;d>dq^&scXD<k<c9Ud_`p2*So-5@\cB0U09d,K3QM7IZWj.=*8guJ/I
%?VYnL\rtelTF8h%X!;$`RM?ED4k;TJgC6_.,NA6pJD2gTM'HDNnPT"@H0c"+#b\8E5ggAF9K)VN,kmQuo&t![C;jTbctMfo+A"g4
%37WVt@$F79%@@Ke,1<Zl+bRV$R]Kk!!J[?<93?ph&CZN4P24>]ME#$cAckHh=[@p=70Gj:ATXHJ/7$o9]N(>d&7l/,Wu-F9\"\^=
%6pF*Q\Wnd-T92GCA0lCb&G_kCLec\0AJ3#j-pJO[i?FAD;+>UL<1@P4h)TVZ*g$NNV"u^35Te5F`OSbM$*sLSA$0\c!pGampp\1!
%$#NgV^2/%R"cu5-A)sZ+ekkAA84>O*ibD>4(&$'N-3GJ?A6!HG6MpPJ`tMuT)692T%N'QZ,gsSEa\&*?pY1Xd_9rD3K.qGp1@3R@
%fY%>#JS]Y$TnhU@gOJ=G"60%:$m"gC4h#@X&*%-'D*t$ETZ>q=r,3%c/9,9EZ[kfs`Q_t'k+!'=C=@-m]d!R!<hCUME.M!h#pZM1
%#*!-'rEccM?E_r9U-JAl&Caa)1CVbk"B26/#5fGQLPipg75<j$<4np;?%kt3l**LuOT:BIFA:8<_![:5qjL5)ni"\F%Y>!("&.*H
%(b/t&l:3mp$P$:A9iu:]]CN7si`.a*htnjQ'UP!3Qt^e!'+sYDgX(]$QOs$OG".U4'b%llThPegTr]V/N()aAP9tL8+LubCL5-3Z
%+R%ZPnui/;^-J2K%+T_7Jr%jl$^S*W>$GY6g7.#cSN)b$6!0*7'bIoW#`5`T?W>f](QnC\'e)]WO#1G!bR/]@j%&H0?(i"O/ZoZu
%.a)OsVhcB0TnTeuOaduFPb!2!4HdtrZL+SJA(?.n.P):HRZY$F]0eV'a%J\&I>)2[,V+YgKj7M<eu=ssK6g(]qB3'HX)F1,5Uci)
%J5*:"+<s;#3.j*+^-8G#=XGC_d6RtVl(ThKTi3Mm0O><eL/!kkQj_!4gadOZ,Or?kN+O;PPOPS4pem/tB4-Vr-Ve^q1FDNg;6>La
%,t1$AfCX:`62_T!SchCkTkcj>7R@DO00qoFB+Kbui06Pj4'nQA5pK--$0\>q=gDDZLTPReJ6YI[&Wg^q98#V[<&NJ+YiukR^5&tg
%.O^:_B7a,\(6MCei7UOB5/pOQd!uh'UtCUdhNB'E]`K)r&m8YQ2'SNK[m`e,O:(BB4OQdZ]6!OFV^>n_a$'kc;M:T2W;onVN,J.M
%Tu+B&\3-Q[ouR::e85O+)[M8!#,(9^/^25'W,.RN:^'=_/bS&8aAf:F:(:g%JQ'k.1U@HuM[T/BQ;+P*Q=ol&XqfST.21sEj6Waa
%M@7U[,[q^L&'Bok:b:*_AL#ns)T3U=?a<'/OYlq:+X*\m3LPC&mA@a:RKmr%[((66Fi&bsgoa+&`B0a_b1K)Z6;g>Z_I;.Z2I[=n
%k&mkh^>J#7YF`/#Be&2\87l$%VYhiO!2mF[!j-fK%A<dn2#6]Om!S8SQqPC%QK2eLpa^f=L!WCR?.jg]RPLd,SX-iH:nCaBXV8e\
%7.En'@722+41)PXF-**s]38eqPh'0b^-ou:@b:/9LkiFs0uPu9*mjt$%cFEs9GRaS;PYt&buPAK=24)_R%38<(SYkDn9S/h$$ZT<
%O:c#(M/L=L>f'XcF&ba&CIpsJ8ceIDPru[BAUI9.,e6G18QV.46W-Do-13P5mbS]uMiP)'!-D"2%soGi@@oDVn]7Q,N58?>']THZ
%2n<ss:q@f+961@t>iGGb"!K":$JT=967$?4SIeL%:C;^@dMJgCnj?(L>m?4TV*-%L/"0D$<A&^<CF(\HV^O8*"*)D;E"Bo'RTSF2
%V$!-OJs9+*7ETU.&Pe)ZH"gJQV_W:jCZecsGu_*q8="q/9:3aqSjU-UMap"+;To9Ml&4@4&,/'sM8$.\!3^*H'_6LBf(:.TIZDd[
%'HnFL.`J*WjS?-7LZ1*VAQhat*DJ%4.4#<YEFU=/=C/Ic&gJc5,I"`u`&)._UqSlKc7g"V8f`q[b/G\MENue0ka7%[ld.!1K5L[m
%Q4SWe?EA<F1&r?rEp.!HM)U!]a=N\n!-[#u8P^bk8o[0iUaWJ#M'1DH.7cHJY.WKM=Og#(FAd`;K[0u8m*_Nh+SQ3nQ-N,9"4n>[
%SVG!&GoGBI+Hg`>j$Y@WlG"s/L7b9nkO:D35s*#nOOi@CLKP%fG7Ms2N#<?D"?DK]Ip#(s&sDUD(3c>B&iN6_hls[c_O7r[geM#.
%s.Xsq3-=n*_>fDU!>X:Hga8!?HZ@Z'g^i\)<HrOl<Kc6%4@\sANZZ*FZM(F5JY\<!fF$3p)Q$2ie)F;&e<:gtRsX+O@Gg8s6'ar8
%;HA>_a>ElO"Xt#B^Cjg6A[h+u7h<b^mNU+>&4JBMOZDKGjQpNh:8):[PBIolQaaOBI)c,.JFF&?hhpQ)$ZoW#78=/TRTiVM\'jd6
%k=Q=oUtCf+J!Lf-PK]9LBDJjFE4LZ%%Qc]*$tMu%0e8=5m&9%:0#";/lO]1D3K1%QVKb)`\4jD:Le%NPQ8Q4<Fn3EtV.+TQ9Mp`N
%)>55s&;r)D0m5S53Gbt1k%28*D@k[6H(8:LEZkhXjIT?"bM?b\N<:/_n:Z"JkFZ9/p#m#kCo?:dem>C]Cl=N*S/Wn>JrW8ZiO]?N
%abDn%^+LFir&r]6jQ*ApNO)5+GILfs4[,;#YlnL\bc[L]Q;MhDQg>2[BJ/RO,ADrn?AVf%=kDmZUkQu`BGb1bG1PLOpXdAYWet-u
%)D4qpl`$U0<\3XPV-$RUg67fYcU8aO(A\H=>IhMfh/[e.3WUSh5S_UmdI:RmpUjh/,ff=E&W;)N1Nd_\omVGpZbd<B_5u"U7B)<-
%1H=4B0QW^g5!.3;^-aD;!iW*r70P-NOp:o?<IK!g'0)QtGcKmT#jR?q4GDo<*Q<)?"G9L49dM80+]M1!"a;_R_DS7"psi[2D3J,5
%M+u2mopDa^<n>7C;_1]65;99CgnMK441hC!!+J".5NX)&^fCX#i?QrOJL'G!7+*ibeub%;K^m=k&mr5GPj5$t1*pc.F&$Tf<]H@K
%5s:I>W`hq(=ee_E4>[A&WHnUt+-n?PD7]%c$L0uOdeKZKNHFQ,1YO??'W\5(X9cnjNb&2PJW"nh--Sn<=S/MU4TAC<;2i1].,IZA
%Va^J3F!S#@P!kEUPQnr`#Z*.!30Hk5>'2Z[6=s/0(UPXI"h7;%;&$Tf/LE/&hFn7B5Sg2M0IN:1'NHjakLOKS$sR8[RTB0Ob*'Ak
%1f?erV^_qm8A=k9Qf+nA,4Q8!Mb[^&<fiu5R$6]ElO&;70>"H/]1C.QA-/>b:Bj57>5;Ro*ZZJ^oQ[6"YhWLC<DKP:P29-5-NH`E
%a2tYrRgV]Oa__DS$'m9"]4VR=,;O$KNp=mC#T&JfF)h1'PZdr794W"n3O"e8048g%Z60h\4Q^=>mVTOcW^Zt[\]14QO!Jl*g?Q7=
%.F$lWZQ`1dp(U.1f\?6SX*Dc2!\0b[@frr"_6n@Sarb(fU";j`b3iY2dYM*%k`d.27ECsfY^2];FmBBGQ5^Oc#2N"f#cMg50tM0q
%-E!Wd:#Ymh-s+*I.J(LlC8I^`Eg,>X4G$@?l;s(i8Bb+<WQ6ojZtg^uUoe*=MonB7Lu]Dm-oT](Lh-%ki!0&pE_,=lU?E9rfKC*K
%3YJlB+L90`'7dQK<[aMag@C5FGNJ^nj^NCr,g-_<518^bIAA].i1+$,hD2SbYu+/I$*UL/aNuI+O>e=\-Q#6$m\0bbZa;=RX*=]T
%?dAgbnUqa%gjl`#c4<:)I(+hp9!/]N6Q\BGB%j;u\6@5D2R5LO1%k;qjYtaO\f!.3_c[nr<,Pd]D/FHE:Qa&Q`FlZ"3G%Pp)cV)%
%76")D6UIsB&Z1K'2oqqn<$fI-92$se\l=7sk\SalTf(FLmC^nU\tY\B:'pZYG?)(Om#u:+L??=4.LHhQBu9OR,a'aqA+[]!=CT4`
%TG0d[J:kMBHLVp,%qSY1E.VS,l]W+fP/Q)t@4a7SA#A5L7f/S._;"+km=&re6S7mpJJm3W)m"8/ZCfC57Ec`n_ch8RZpYpZ@o7^0
%-DnnGLTN^K%XT=0/"R'Gcq&"/@H?LpX5g-a,&_7>_:ZqdZn_d%86(t:[LAjTn`iMi;;.kqZfDZD[M6]XB(r%/'U#0=Y?9/_\u_FQ
%0`<j>jsrag>Efm//S'F.\ZKq5J2Oe?&p(kp98\<0)!>(i/]c),k:dh*:mbGS%e2O!H&[&6ft]th8+bB_^gjL)6O*?Aqc9e$WZD*2
%lFT*W'hEp_U1T-7g#acQ6D7opO%;2E8PnVF)/Ce>r<S(E?!=BPJ[DuqWK=OW"j0p]MN9<MEY-CGMm2P4S$jC>RV?b+>ZmsiD]H[N
%S%2f/4X@5i^mgfD:*^?aj@Fl(*/C8^#XD;;![/M?Q_6g)r)K5.O/m7[@15j\Sn4EilP+s;1h*-=Lm5-%4]]Bt")3jSbN&\0E]Y?1
%.k^1^\?D\eaU^Q$gW8"71sa"s&7jSP:[hW_Tp2QDpt[^OS'9]1oul>#+j5Z#lHAN/`=AmSd="sH1`6&d'a3/OlG^YJ8oq`b&.^6>
%eMAjg;l)L;(H'HT_,0F1+>1]n2&'If*P/%Z.[1hi,8'<`*9#\4O<c+m"3?Uj/j'bn.$9PYEDa^@"K@IiOJ7%TKkS>B0iG5BiAQSe
%/1ta`$qcpW`WB.(oQ+3%2S+10'OGs:.hV@[Ng#R47[AVT,9R>"N.+E"@AGoX*g^:qP)RiE*`3;)P>NX8X->Z;+e;6Ff-Q1cgE9&k
%=O:0H,[speZS>%RPb8'niV"]U-#s<9Q-pTeLFBbq/q&E!@d@bMrT6sFjDRbd[sK\K3_#C=K5"!,<4gc+XcLol4&T=Dbl;*:.V]]\
%rh;L,c\Z3#4VAhN&ja<SaM<Dl(8cmXdaST)!TIO9QkRQH,F5pE_(=a<3!0RlYX__^P*+V]%eU?cQB2g9`!GA#lua.!6ctm(;WLmZ
%0b!BJZ^"%b%5MHoCq+g8k=?Vd>h?!>T;0UPO:o\r,+#US#W#gUcEOpe0;Q%RiV\s(P&R1p\0/$X9oZZ+Z(9.RX[mXUPR&1V2iq0G
%gtc:h(em$7O.Aq\f#$MlZ1p+<2e$oWIWa_tbgMud2tP6D8ED\?,?4M+<a*,5ZO=:+Q3&Lt`)SqmQJ;``+4Xn^l>6dP.ll^eG+]Jm
%+mt.d!V'PZ"<\HaA=EDX5a><Kic(+5;Gn,_!;7"cWfik&Y_7[.96!NKK_P^a*\!lF),^2FM8?"[aH@9E1gO6^L@VX]K2L0N8@ihH
%Jl._He>#-lqGfIZA6dT!nrctYddSNX:*H09.AE!`&scC8ZB\IF4'@]1MGEYeK^LZB."\P,OaY'!<6.t6*K&#Q("jf^$o:L]8[Y?2
%U.AmtX^V@Wo'B*m=dR5^!7H"8#gt6[6q4c?93pd5f0*2)P3Ug+;*(8n*"@XU\L#HTP'O&#"],eb5SVHP`18'M%#"Uk!aF8$XQJF$
%j>Ee.on\bWDbnN;+pA`JnlD8S;$O*qR>@Zhkdh@OUV+C@L"0-I'Bs-tj7Xlni7XG6s/=>tU7#5-dFRmTM4F/uN;$2R7&c#SEc"MW
%"^0s5#"1K9"TChA8Ek*1I`X1IUXG+NElG2:SeiCRJguP9Wj5bO@!Rd,$REbf;[r[:iso5";:F'<7e0kYe-ESjnSAB'<_.fD,/[ne
%6:DqmLfAqAnjBD3C5GPEni:-ca\&[q6_qG7<<^haDI"`Y?u&g%;hoo&aW\PY,QCN:BPGRc,n@m9D]I"Y0c0u!'7_R^KKhm$P<RVc
%p=4)LQY.bGE!.VF,sla+@I&ZRTJUjgG\Nri#uYE^Ng"<FO:m\@96^1t5TJk;?Q?[9M!@Q^&#Hi6?D:AAdhgKcS4iG#CLV>!5u4g^
%UQ0Z7ZCRcK!:sr\-u%%H(>Xg<PBM_N9"Q(7=)#'7jCAL,T#An%8;9J=bH`lJ)9fh`)&#iFbf\N[-/;eYi`d>DmQng>JNm&sECaC,
%1(TkUm'@t2GG=#H[*fsm'afLtE`#Qf7<,N:$K1NM\j>cC?H#ZiAY/Pl,,]5aLDl$KUSat@[n3uR_[qlW-Kh3o*<H-*79T5hj]_hO
%ESd`,/<M-:M\q6TrK*8Hd_JtL>$Zn,$'\5d+%]JueS>uEM]i1p.Ws[9O7EG]D'c5%44K'+:k]uk8YGLO)sV`K6&rMdb/?esd-s#J
%'_R"MaqQti>_4Fr7()G2Z)8383r63EeHR5TPa\SiKB`cAUdUSNe.GtAq(u\`@@5iEW0t*^V%$sX"X<W#Iaj:K8i_SJ<"&duS[t/B
%Qr-k7aQoN\(W/Y`I@jJ)U.8GiA>'=X>jMMiZ,3L"qV7fTE>,0`9<1/g,oqfZ<LjU:3jC6Yc5!.$`%#a\dYS,1$OEa%+qH-n3=3<K
%U^7TDTo%`*/\se=8oS<ZV>=C!"*p:MOECmM-0Ya6a`9_HHqXuka(D4'<3+WJU?IDQ:VRVIBHp+MS?j]tF>$Jl6nsR!;<5e@5f2JM
%oMi_s,G8dj&7>[X:ed/AO`0fgBaVrc)TC)=<Cj*lmAo@W2E;oJ;aseb.:T`6i-1(lq>_gHGc@e"URB9FbjI+6i2^pt.V$un5`\V^
%-EU(XkWD@TWS)2#p_,SRko6r2<Ls=:7XUDic!%fDPg`@gFY6n58u+,j@jD&S]Ti!<V\[)UMOsF.l2sZcBdCih;EI<J?T5AEWmTkc
%eLb7]W8f])lidO^<:OT=e_q(6<V=%!%[h)HM:ue,4ee2j0r3km!\L0D<UnS(.f")XqF,1=`2ZX'8dnE+I#7b)LSsR&`&&SmaTtHQ
%aPH]kJ6er&Ph=Et"eapX$7L2DRKB+om_+GpATX,N8R3gBAI>0;7hfHb;q>A0NIkT^kbs(Z8a_$)J(kC;7uIE[:/h"'1T_bq@919/
%eWiD_[Ji<-R@S2$b=X2el5+/Q.Q946,^FBBKh>5l0**Rf(GeVb%_(=XGpEg6N]L+p[4pGVaJ1rYm!pLe"AGQi@JF!!dp=NIk-G=;
%^8c3WWPf%"LO\m7JSq)&(m+D#!lfKp2/+q1(HB.-dXB23MHcg6`->l[ok:@i>-MZMm6r%XS@cNsi?dPuL-muG@=J<`O?`kXF%de]
%HB#/5RoDt'fq3R]o&6:Mj,I'.aL.m#-&O0+%uHokV`g9c;oPLl=BK$Qj)YeA8S('8HO$:>;3^-_f.o2td+YJ\[mn4)$;)W04VC@7
%AgF/?lk#5&U3>@oHAo1sVGbGUf<@cjIO3NLQO\gLPZ4`Xpdcu)W&4\cI1X"K&2_JXK:Dt(9#9#rOjstfSu]0!B7k_i\7NdZeRKTo
%L^&$$mDCY(8)B("KXq:gp7V5[`O!q"H)P.nXNTZN"[1_+&%:i'V7=Jo,<a$D."<0O]de"[Yg`b*N@m4oR?ql3bGa(k?7>DB*SKWB
%(D6C4`>7,aKf.lK'[g!NhskPV&^+7*_F*&+&L:<Y%@+MkL6LdX5.E/oacF(#'V%UC8NgaK*271;.SVl^\&,tM=!uMbX=@/o[=d2t
%0QNhu_Ks3/P7q,ME``B?QoNSQitOJ)XBRQr"-DPr_J^ZuLj]q%7=!<"n%HXWb((`AU,W3F]e1h_-]/HYHtDu[78a7Lf263$*i?LS
%<GpjZ&:"=,Zl].Anm$%t\.hi%iJ*"CEHP7M$'mRpT[Y9F#H@,r%BoI\6pa&CU5mo@GZL1UHlTJlT(/11<]p5hN&ZN4^<55gpbFFm
%d]%[4;CMZ+\&5Ta)0?3'<8O$SN?W=4e6#dn'S.2(5*2&r"jq@$Vh*=r5Y@8EfdIWAMfb#QCPnP&_e=<+,$@eaERRJ>?,D@U7qG>M
%b?0!g#T,E53Eq4Y&Ne*NLN88G?Ue.s1-!3SU<D`Lj-$2KocnBBD/.r<6`s'r4Ru%dYhi[!;7mJ'g80HsDUMTNR.Be*;57>&(].;,
%/.UYe<SL]%;^FhRYLBAM88uh-=Zt=]>[,,@3/lh]\9dZc^$DEJKL)noGROc-7;mfdOY;,-_/<)l6,UC(k29g_2%n2/FOBWgKa;<3
%.]X3[-onV6;N'umD&.XGpBSgd.YsBWK%_Q/*o-lAY7^'n-Bh=Z8e9jYZlDT7-PMB<oBr<,g8au]G)kGMTMHI'_(m.h<[?<,&LpF(
%Z8REA6;n2:kdBYI$XIUL.=IV24E6'?^T&VK78/"!F+bnE6'hXDP<j!TQSd3S04UAQ9AV)2fDtUqYFhq048O2)VE4><$:\PnQ=V;V
%DUopP6kMs$?l<[CK3.Yq6t-fLQ.Ti)4K?-Il9&!:jB:1(E*mPnTj-*r20^&4RS*/&@ME$9>Tcft;=CQ[Q\#.=;I\E6&]o\[!Crjc
%Quk_KTe((\!-8ln;#rL7Jp]jUk;>(l7HH0t<FhlAdd5tISp95:;0foHo\2KCRZ0jZq)Gm+F-m`-&VhN_"LesD7A510ICqH_j^SF^
%!-'<KPVn'TG^X0;TJ.$[0D?diK1=H-R,c^HB&HVm1)5r,FhCk=AV=Q+4PkG4$SrimTR%6mlYJ$&3Ypoa9o1@U?60oue4G@nD.f#(
%eI>ENNeAUX?7<sWRZ;]@M;eRhb;T))iiQ%F[J6J*ORR;S2(MBp`[bN7'Zl/Z'4q\A`&ZDI\o\'@bTWM"a+;WeER@qKINCeY6fq^m
%pS+rCg3@N,3jL.n)Zg^R&h4O_:e-bcSFs7ZC:XXVaP!>aHpgEcX.iF!%9>3,7CfI<e)ZpJSr/>)X!"!)7KK`rEUB%E6<j]^-5D##
%1R,.j.M31N1po)JCI1ru5sV$c;&R?JNch:T4WH"Oo18oVU=XE.ARB`rEB37?\C>+j60tB9"h><:ArGu"p`HCk9"YerUX0iE*S8CH
%;*B==R39Z#.f3(7h1u6/S1'Z&nWf>.lKOD1"begG%\:."Ql"ls'r91T$s"87(O2O8Q[jtKHk^jMRMfTG75m[!IYr/dJgfg`5!&p.
%`%@j*EibfeP:HMB%q(F'7J`\TlZ+'PR8HiVadpDN><YrWM?<aP6l.N0Kq!G-/,/=0>[X.&hEu8"4mmEBI8YJ-fc`^ul=!BjW5(Kg
%RY%N';t&$e\C1VsG3Pn1<S3%]]IC-Jj2aiqdWSWDU],!]pW8Ac.\^=:k_Dq7S[&">#E,Sbk10E&6gTt1SYUR3MFHlp5<rrV=KI:2
%#c'*sWp>)=BVnreP!F<O;%U)O$le_?dZT@KbQEZiBIL#]47har$\bf,8Q^:9#%RP7am8acSD`JYWV.qoLse1R`:Y?b.5m-:ZpA8&
%]TF.m^nD0Mj=*K_"%;EAN]+ej`qrhp%4X_Oo4X]Ui>F*`K)FRRYL6Ge8Krqi/5f8EopH-EBjSVK.#KHITe1(S>=7\5-S@AEPt,Q,
%YUPm&KB>k^'Q4qhA6:rAf]3ndAjqA&&8AFra9me7`+ou_$)79V!gG-a9;1hT+T<c]f#*d/+mb.o+$"_qA(QfQW=pG2gtQB9EJ-TG
%P'DeULl-AEWP!F)Ve1pg*u?O3P#.XrDPA]:GUsQ%6MgdUl3F'3hho@&fJYm'#o+HqhUJgN5smt0p2'M?oZBt$4NACsa"NH2lA4U)
%7\PFJM4'++<=jc[JU!i-%YkT9WD'@GOW6AhNAo&AP#\nt(/;;OO'n.i/>eO8W;$m&!P?b[S;mXnQ*t,3p.JNcr?q9=0%pT@0RAD(
%l<Q3aaekN\&PeN6n"\jbn2MCff5>;^!1"TWai6f1M+=*c@nEgO!L&r]6l[9SVIfh":7K_0:pf3J@BYoueF]94@UaSIOFb89VbiiK
%g^IS0Qe=lG@oY!5LnR'SB8tD!a+8aJ+%](R?1gM:,%4eU(Boqn<M;3d&.hYa#ucMR$6i_RQnAW;/J<u:-MLVOEUOrB<Fr_16B9WA
%ac7A2QK(,+L!u8D3d,ua9<[E=;VnAM-aGWff,blA6E)fo&rJb0Ru3BEkO<NO<retN'pXt."MC^-M&u>B?b.'W:dIjVQYBP3@.p61
%)&`3P!eTL;k&FQ6.O^L9UpXKlWg4sY8R#mY'V7Y2S%Z$15RB2K'f`b'`N.Sbqh94D>6u2o8?U?YFr.'NE,;FU:!R>#$K])0LT>1H
%`:nrJM5DSNG6g`R22q*X+HnbL_9#HXG(7n,*G9l1l)<Y%e_]sbjR>'bQXn'="q@[H"j+4:?(C&</@\g:n2UMh(ULEE4;=Meia>[:
%:V;M5<(CZn.\`rF$,e(/'[9mX@m#(4LDmeL#Dc!u"-IaULr>i5Dil^RAJ\6Q;0Lk=7%k$+4F$t)NQTcQ$N$8^QYUhC$_sr+intn0
%rpo*RNN8]:\:WFMbY*gd;0m.jW8a[M'dR'J4p[ed]]-Ffi!,q:%IT`s&g5=(ihh`^%W/iZc(3Ff'grYP38H9jH:L:foQ3Bi`tu?3
%*q5K!gAA_78>P3A92/_a>gTRK*$'d_HQq;HaL!(q8]\"V.R'^h`U,)G8ce9\4rGJ@,[fV0l[a;2(p[dX&)U;V8!XHUXVB*6e=]-<
%g3&[?7IKL0\o#>Ai1cWXT@-2j_?epWC`UG@D?[:L.:b<h>ah`!Mi2\:\=hF40h?_1nOVgiO6,H.N)JM:Mk^-,2.bAY!EKOBQDb`B
%"tP>HB(@,22sMKh;i),75WiR!q0na++#3K63Kn,a,7I6+0h8c<+J,oq0sA(g"&PD(.QpFZC[94SeD`ku.=oPn=qn[.)qmeFgr3W5
%Cjh>n`Y>5E@F9nZ\&C_p)^Z"oG9aPJ8E>LI7ksI(&%qs7/efaL^ccXR4>#u[OAeWDp7Tjej-P<FX9;(N+J4B4Y$/fWUG6bPL'pc(
%W(V,dC;p7qd;?Pn.$H5V8^=X&&BP)M7LKZ2]crt-[Krhp\m].TU3"Ai9a\3&8VeM+V=o3,o*SqUHSGak'HtKNH4U0E,[;L(%7[&3
%gQF)"1NiU!_/uV0<XR:XOb"9=*`=<(%OpDm&sH)lbStbt22+m-Hj]bWq@WG-3`(s/9o82SF\Sku[VIuSl83A29U1SOnMM4nBkY/i
%lp7_2(Ro<cW6Po!?JB9G\2sLpHD7J1Y`X)uMEfN.ET8d:8;?sQQs+nlfr<^=Ab$P4$g@eg6Jt+.IS_%hV!LgIDV6]E&t)SoW<>;>
%`I4(,M=Fgi0KkpMmK.*:G^=`Af`N=b8'6/^C_*%LEkp:OMAZ44&-X4)2f5r[/?:8'*QI`[NZ%qE9YneM_d]]T:,7Ah5h?QFp$?\J
%Wc!RsLF9:%h>G6#nR9fr!VA2Q;8Qap(XN<gc6"c;!PHsbAPu_9R3WF\QcPnrUAbk:]2\g'N)!NY/5?n8@R[NILSaQTr5k`*JV_!<
%'4*:8+A1>j;RS70GUK#O+\]+*gk\U:"&oLYTq3l>%aM;U-`0m1Ih$5.7[Zt:&0IBP1^nCi;Q+_K6fh1n*YkNNT',D-@nTI083'd*
%HuQRlpM'2ROTiZq!lRfp6Dk^Bp;Xr8i@sPa>dKV?'H+>(kU]T=Ij40dUBD6'Nr;rN&p9.2fDqbg!Jtjsc"!CC:dY,sDn!dgN;5CC
%63.]pIQ+G^e#0,ZUIPBk-Z/sLD3UG$@F,`J86?m4%raB-d/[>+;RbY/FO9:lTh!;;#ZY_s4U'iMP!BdQe=Ijc69o:\FHY3<#lFr`
%k8O4]H]3<<pMVX=is-c8Y9/g68Pf=jU/0TJ%'\k))K[W]hj%66r+uR^c%(VhA3G[6A#;s2Iju)%&e=t93G^I09/Z#a?6Sm[fLpT'
%kA0c-g1::""B-Vm=cdF"I_*CBhnm?7%DU&5*mQ&SX_@"A?VT(@QsWl_O#`2[dk"/ijQW:"KgQl:@WB!GT,?DSE^]F[!MpbePN-OV
%JTcVfAH3#nR^PK\Y.Ti7!VuM!3oQKBnLmK9"/70NJFod"hA)fq`_:%=FEM(-$W<L+:W&aEF1IEOcuW_t!gFPN;</IbM3e:KWTO^V
%&?T3A"=WGd:6Fn=SkCJ,"</I:G82MXIWqZf#2CYdO%PW/.L01FX35t'M+"RkQ*+jZ+>+$&<$<4^$/Fi%fK)9nU?AIRmnLe,(U':n
%(O]^XCHP2+7E5\`PsD1(d9PS%,PFV!I=Pf!*W+`]],X4(<3JfR.EEG/RQX/2[+S2NZ[ro0+.d4,*Md%<)7]L:QgV%0qc"r3bqAs0
%N@YNp*Z<>%Q8PP>$<X@t4UBajT-eb-Y,0tXnAhFt"-!Wl!;/e_LTM,)oi!?^'#b'%M38rgP,rfk34kYJO3Mcp0Ht&5?@:]G96[;:
%5B!kt`t>dS6k/m@NBeK#_'Umtc#V^A,fWg'Sk9:(2^^$[Ltn*emh?DN@<f^H6Ll,G#-/!+6MuNn@6m0>d0-3=5Tl5&E&>iP#m!d\
%B2SKH+sc]V?[<E(kqZ2DI:UX$[.SKQ0p[;R$P+Ars!_G(!1+/apWVY+-VrA@KgqmEmm.Xf&&b$_]l#-e]0Bu;atYu9PHc/lL=]Fu
%?N<k)^`O2mp@K!jg&S!Q'@!+'%R`U%CpL^ob%)$/8cn)=NLC',g,74KOc`COWZ^XL&WUl%*idSf9ZmKn5EQZ_GlZjg0thG\4+Qn+
%Z!!5.J;C4;]mj5giX9)$]UH#$#!uDgl:rQ]PG;1TQnE!/pW@HjK\-2/8!BjjK$#8O=`3;3ont8S3Uq\uW!K%Dj@DoWFt^ae*SNN8
%Fb*-0Y)11Ve6C&1jGa6sMdI%5#"Rl>#tZOKSrX.H%0O25\ftt,1i#%gF6TK<opS#N%YtO2lBj_QNnZ$Ae9M:(]7h$<6n&PD\=@,N
%3iIMXhZe(D`3#ugZg.K@.W.\7S.RK\e`D40Sdr"nD-nD8:m=JAA?YNNA=b#D=<5#Sd;l]0T4YUk@Ate].N&fTKsm8/m[3$^^T(Mg
%J94#]lIDCd<CsM1RSctUlQLq+btIM%GEj9sG@Z_+,!bd*.s#H6qrfLC.XJJ5MV_oV>9Y[BCT-5=YdC=uXpIADGL[14fE3=oqllt\
%Mb?aM$O2/?/YWHXd<^]P=ZY+k+J+=c"FAZ3];g0l#?Rh-SP2;r!baHuPZ%9E@;=Q7hqqY>N1H&$eb]XNg%M:=0)$iPe]T<3T%kb?
%+R]%XB5R7\cj32-Sfd2!8SV8?&i&]s0I9WhLpZen$qR*o`R(=DPr/1"rl>GUcK-]Zno`ADl#Wn,6\^8iTd7iZ\Otof7JR3eh-C.O
%Z;@_G<tkNpI&oh7YTT$HBI"lc%c-[k4/9X"#8k3P)['#kc/e!5r;2U!WJ@^tkJV)h)?R:opR%h8h*M["Pip,f`S`'HJ.b]o*!?mg
%>85uF,/h2/!j#e#OjL"dZTBG<lC#QE@:b<:`./?gZKJ5W!CWqs*/#BM!B<YW-B]E-OD$!FlZH33k2^==]r>N7,+ekso[V(LFg2k2
%XohPtMin26=<f2b4_%<_UE^k(InCB)og%TY"B$IF(;*Z63P`E]glD5600/PYi\ggD.11BB,<W%5nr3I$MkbZ2@`9%Jg%Du^Jjc"c
%K5T:^gr1MajHgKIdRsn-"V=g9'\*tR99#es(g&T4:1$E,,hNTj)ZUcUM;qMXNp*sT*q1P8WGX]0![(,5&eTZ[&gaJc)sTA_d$bTs
%TVm4]K>G[R3@OWGnef<-ed)S'_3dnK*!<lCBHo6lb0LVV<*E7]AE+f-F&HOXG-VBA&`lD\.bY[Wm@-V#=q*YMHSg9pjHZOB;TGhn
%WB/V]8G+4;2-q_^KhBf<;Dr';ea)ee'H(cIg#D"el\/gWTVJ.OCl(qNdWTX0Oq8j(.'9)1'<rhrT+lb[%)\k4KsWCdi=X!P)/XE]
%/`\e.F"#C:e/&^>dc9!0m4^pt[?2@t_!n5[j&hP$NqYZ'E`[>i6MJtmDc,5R;WKQWKQdh.:>)&R1<\."G1[LdL7`s\Bjc(HSu2jP
%QT>H_:_7a>&Z"j[hG`NWQBe/TN'r'd`mRcTqP=P:-3XlhKL4(L.TaKpfl'4/P?nppW"#.Z=HV$kU^aP$<?:+F$X$Alp*/+[BDc4W
%.A"3%SUY.8BqD+'ia^&,l"hJ8fWA]f6J2Mj<?HRNEqYlNP[,E'ripX5"4T%\qD8EsD-4%'K-Q+VE\n=1jKqCi^9Du6@$gA,2s+KK
%<EsnDk\U;Ta<[/pgT\'\)tdt\**"MpQI`:PC)j=eBar7!oTR3[fY0`c-6U&q;QPk,p0=N`Z,/4e.CDb0*Y"]'F,^S2W<>_QZK5O8
%!OKX=O%)b@1mhm.liBMWL7"jD.m.)]\KOgipnUlf<Wj1/<>P]lJp_+-'Fp+U,`J.kI@;G9A-"eIK#5(WZmX5*<JS]Ic!-?6)'"cN
%eAf\!A=ngb0UZPC@[$I03DNU]%Qc*k8L@JQC+HQ'nuOWiN!Kc%`P;_`J?(F9kqliP(s6t1P%#8`Tq$`oaWhD9#`ShY'^4$k<#gh.
%S:_.4V@Ir:[J3<=l.,P(#SNun"[QKjW.;c1"44J%p#MA\S'&C,Us`;)H'H]`WD8*f7nU(W"8I0UD`QchDo3Q`>'9)8l%M\mW&L'0
%kSO??M6]bE]IiXrGH1XA>[*rH6K6+UC!FO_Z7>AL-&<DTVOA?tV^\g7d"iuqL.U_T:(\IHD@-4@k,+0Kfb1Kc@#U6F7<r=!.$).m
%V;HgJ9$9plHnsJ`Kgjq]g89b(@lU$F8.G[aYoY/2E$+<mD+8k>KP9qs*LG`M5rrQm8h=Y%#E;-bdTulh9?;u^-1pA?L/MVdThMc!
%>%at*6X1WPA0FQ&C4D8(ard_aR!nQB)**T6WL?(_PY!a"i]V*F5i`!im/n9k.Ius1q,O7(`Ss?&DLkCb->?b+M'VhB-!^;FkhI1S
%s(p4k2fYOen"pk$7/,PWIAh8I2mG>:#:$-kk(tUi['hmP:fRAF^6;M_0&.eF,=QWkUkqDn-;b&*JU#rn+uk7c(F?+lpL)Cu-SK`[
%*L57"KbA/b:`fkqlKWRPO/H;C#n!>-58RVI8PR1Ba[X1$,,atB`+>K&q*t=%KIre@-O!g?(sh;J4]WWTUuEmK;F?`rMPM_I2#H$@
%#A+5R>f@,`)d8JC=2Sd4M\;RTfqYi1Vm(2/jV<IU[hf/#Z=QBsn1BkPZas^SBpHVkb.<hS]F8=5aX`-tE+t`rf8$/rlCpkQ%ClNa
%#[NC,FWVL:V(4uYFt/L,UK;c,f]G*keaEp.NSiotaHMj3JHhP&Ki&u!6aF%-+:8qmfh7$/@EV9M6U[,EOOeBCakj/T8%fV,2LDpu
%N%)LoXY(q]hC.b#cP$LLARNZuZh2K`W4^Sj*bMVB%P":Uc4XfKqpF&@EKdWOb2rhjG?$)D]on7m:BA8XTQ?ZZ\Z@hL'_br)cAfL'
%WQM"$B?Zr>X.7W30cAidQDGj*DaC@gc-o$+-p+T^K+;,FOgV!RrWo/"a`W$6GX*5[V8b$P1c`ku&=[I`MaiLV(m%TPOp[i(i&TM!
%#`^0&NDCONnms!$Z:0t5^cdo4=E>iRQb/]@S6oM5K\sAgTg\l6OHahseNItF`JG(j;O8N;VoGBk-uGMF:L)A9,:O_Hc*6JtG[N\6
%ZDO-*X-]%O,-p&ol]W!eA_h0YM?4PPa%V--:]`-YeQGBICL(HA5Zo\V(+9]1o&jhp/:Z05P6_.tlWl+Q=V&H(b[%"9\d1/_8D3c=
%IErSj];dfm:@_EH-S0SD$de/mG"qBkJQ4BO!.M7XhJBLM#)-]Ws#@Alj5EZd,#F+6OTc)q)Fe@GPSKY7HI<SQDD"I;I."(:2/!P"
%L3^/<b8KGEMfdM;DF#*fUmbS1)$m:^*4A5COtgCbH:f-4P[,ON0rhD18_I7Vb.5ON.C`QOSsTR._O-jU#J+9_`=!k61T5<G\<VOi
%EJ"g/YY8V$&4qc>H#lIY@S>!hZ`8ok-R)/3s!@sN!WdJ&bpfMF!G0u"H2pnm;c5LSa3JnEGp&"3F0YpQ,/^)ZR`QR<&i9O$=nEtb
%H#=a'$Vu^+>$e\<D^a!_Wi[pT\L89?ktCTT^s@8+Vau,+?KOg"]>&[1&tSIPa@g,`@.cK@S]R2/jU4Z+QEX]TNGp$280(!:8COCU
%ZsJ@-M*aibm=M<H.-O6H?b66t"U\.qO-Vc9/"GYOm_ZY*npn6]9H;i^eJo40],l(?+W-+h&SJ6j*]6PE_.D^sP;$+U^4pEmH9C,l
%7pr.\*X[RA'p"K>5cPaZJuHiL;\XlC[O<RpmX+XQNE?+tlj7c*_a+%?^$q1$P?r/qB9eQT]pWEnY%gUur-IFXNrXTYMBY:kENPe$
%^1b,*c\R,h.*>cb9Y;h]:pLE>f-?qKW0bRfEb'')64e28ouGQo)'MDRq4[q.A;:`lWU'6Z1j0.+Sd8Q?muPisTi'okOG!1i/];h"
%@+?k+CD#9!,R?e$Y?b&d`Esb9m>e+Znf[dr`o;2?^_]k;fibhD3=+H29r&1@=h9,[B=E^I/-rL$LhtM&8Cui7#X8Ks37dM[,mlYq
%h$#)+1C2F3m!]lhKa=b]mA,0'cX?p="?_JfOP/$+NcQ"-r":BenmZ/#Og`e'8acp_%qu7R@"`bF%@*Kg9?'c=j)1]AjcNVn2)3iO
%0[VWi=HK1/BNqDU14SD1;.Z+.+IGa]`ETm$JQ.9DXUs%'WEuAJ]#da1ACo;nR_N!k'[EsOka,gKK[RA%b["sNarpfm,1_k99cWCX
%HjGPl_6uTC)^Xq8UCX6+5&4%%KSd4)9t_M3TjHER""^,_&E5JP'dDWRLcB88L!l5!V$W68V*7LMUjTusFpYik#%Thc(0[iVZF^,O
%`J>!/7-7'_C0,.Jg.YgjX+35CSEbFg*8Gr\lJ:GW@FMI/7R*g"##%`WR:2U[dYa>7c!EH9g'"C:jZlgr#c/o/MF^TU_5/U1:5,)#
%^.n.c[5q'CYQ,D%eVM_jdufGd;f!r70J5$)UkC=d^fNaY.39-I@TG@"NZcm.+A#@'cW^g`4KqCK>)EX3;7;.(oe6onTOeC$,%OG#
%H=X\hPECNSC+$I&qGJ&LmH-`(ruFUACCZF]$s+:W^p,`8lP`0>qp?(.3-J7-TZ4-6q.%I+.P=(Cq^b#+@[@'=GW^6P>H2!S-kOi[
%SSLVT2TaR7%h]DV'+-B+Y%itF%:aC$JRr%70pDZ*T>23[AOVH^Q[_Q:K>^kMIoZea!)IYKR]i&]O0$=9&D)d=Ui',KfKl0fC8YGV
%CE=4Dm3;ZJPmDml6.N0D8BG:M]s0ktYq%[ub>+Or>mVVZ&d7>H*Zbn3X]C-\ZDX!:88m0&W`+?SV6a,caSRC"AQ_.,?lOcLj0ie"
%061(6m-"0Src<-n<DsW3gEB704ZJKPS=3+qbnM*($l5j/R2-AMU&qR'.Z$$a=i:srU_,:/)cR8b*>M$t\s#(K=F2@3`^Q"&A(&>Z
%,.E1P3QZt%b#"ii[ot>F/#Q.mc[L]eP"9Lh4N/-TJ5Bqd]7G9>&%X"LO::e/Z^YA*Fhbk&CZMuTP[a8^J;9"gHOEuL$#BkBp_ilI
%]t,9]aK%(?\"T"G[1HnAYSQLg!(Q!C]!tLS<"*ar@nM9"n_u,W_#qO"MW86+W'9(\ij9=8;$/(qWBS-!cs8'7f;lM5Ii,aW2BKS,
%F?n8b2Uf0NL)?hWUE!32OH\'JANqT\9u3_AQ<82Rh.7*kR3O3,PNe%E;@S5p49,eT<J7Bllm<7"^ab(YL3,U!VCE\heYE[$&LJcH
%[n)(e=%?Geie=o!j8^DLN(,'&8s@870X=i%A:MnpBMLq>Y^rP^(-.6>OBd1aY<8d_H\<nV\[80QXRbk<2DdRDO)M86j,He_hU!B#
%K4J!_1:LgRRC5u:'$ih-R;R=2#2q7T&qDeD[llU6$rG=9k#_jX?>Fc@?0SJ9IkX`m1MDS9ElVdIg:l%g6S:IBU'cQ\>jp/6FZl$X
%$D;.DbF%blBl[\E5&XkJ?t3f8!4I*ZRgR*W*:?]b!3oT?6Yr@ZW\VpN]U6.G<g=gPPX'>XA5NJZQJN0J3&lU^-0HOn\fN>`]M].d
%:_\:NNFk\;mQOFuZ!M^)WR?dZ0jPn?\btJ&TeqYf#G,p;mbs;b55*3#d0PV5i]Us"17*Bm&n5pBi7?Ia]EFmXK$D5/+>BD6(=dkD
%.pul>jsC$X/XK27*WrGP`RIR8e/TfM4X*<i9C]NWVOFY[c?050;\`=m0R!H**Fq:WhPb4Rd5/&!236&AkN$?s_i@*92&tj7DPYC^
%*:B")n%CDE*=1jPI4_%m,ahk/?]-Zf9)%I:[,rE9oneRT<:&3(.8QHU<D&GsPu9p(dM<+NU3',!4SYe5fED8]d_Wj"f;=1d1.;fo
%0[,CS1(s?4$NX7&bipASI0"U+F+h"QELocXCKrGSce8N#9?_;]O%9^9$Q8bH\8LgtT)drU^k,VH+sI**kcg7rFb(<h?-OE07bn'J
%qQ/j/@tN6@h_;BFd8\3ieS+5SHCs1'Z7;V;0(/B;-9HC1HBH]^&Gfg\i&1RsAQB#G*]'>Gq7H@Xfm8i-8TJCaG$[RT%sJ2DcpKOk
%Q$f5'h#FaO%l;]d?c4K_da[&O'obJ3S+*M%g-o7%JK^XMC^oQ3pem&n'f0a,:-:/QNKA,oYR]>o3-%_C)e1jc;Lm?@\2oll6qS;2
%]NtE.;^YahnGjI!OJHO?o-\Zu;s(14B5f.pWSgd^fe86pJt.pl2p0YfWCZcXI$?E_8AV(Rl<mk)Jr7U#L7t`GGMA/`rJu*'m#^GN
%O+ddXRm^k@Z.bh2o^E15p@2\B^M-LOn;[R9<=g4hpO=aO@Gdh1>:JYgHWW8f6fnfl/jgn6/@B([MM6C5qLHZ[>^o.T:H3!,9`2.2
%TGaQKV\B;D_WC_oasE@2fItlU0pGB9'c(8(^^._:a>9-_Q35aM)Vm]4'M]>ie`P<(;AF*EpVH+@)bS^";3Z\g\?Qa(HlY<fIpY0u
%?9pl9FFNd/BJ'TCVf%e%^7A$)cEfj^Uq`*i0eg&2gK]aL231d[j4&ub@3.C8GqZI/ol?7I5J>F_ML<op'tYRfVHaij4Kg@7^?0r/
%&_0<KYuW9X47%RES)GDE-n;:!r>4]>PAV7jOKf$d5[=G5No:%So8A>BH?(iE-">\:c-=.05Hh*N]ZaoY+VXpW4[3Rj`Mg]!pphk>
%.@a.j('4m][3P(b)no6G5f(@aYr]qcC=4JKbW<j'`7/O&8b;nD($@EsPR^SNlG*.Ckg"^n*PR@s$RUI^qR7R]8flH]o1rE'Q=Rh@
%!/bUG7brPtE;/aB28>2^]TB_k&/;a@jQD21[FIaHrMn^s&$I!l4p=cTP&-OSip9<#FUk(pRZ!8ehff-O"frGV=7#T%KO4C'4fHcC
%j+Ci95n75O$["LO.^%:Kmt5!c`cZP&8Y?[d>[,U^N'1"q%_qBL#tXsY'jjP6nG/A0I*?NY?^b%n0h_WeW2`<QXSc@g6rk'O5QT;^
%DSSg(#mYZnT?,&K8@ZG#Xo-"X`[7@+#\Dd*knK=fe.1hbQK0U\eK++P?rTP!I]PBI7U(9bZRu>tf::g@+&EL]^-q>T*O]pDI(!?'
%#9">U<2LAoS!7#$ZK5"tc!sh(K6i8s6uPt&3?;!t:k1=QT'o3ODFKmg#VW]r$7K%U*UIaqDh'(dj"oZ-8h$r?p=3:b\/RQKFh"Gk
%+hY=>mu-8:#Ob]-S;q<.EH*``/gUKo$:^p]UJuc;JN2.6dXdBFjY8n+c*JeZ\XSarG!?Qh,MUXUX%d$IjAu,Ca&%+88nIN!`Y6$5
%4^ERF-,NVBM?oBLYDSJW@gWqn(Ce=Z(Ae!J5O0=r-oKU8\)N>NrWf!%]tN=2)/!lRR)`jTK10t7,o8+NOa#/,TL.2"K;@J.]O=47
%?hu>-0N@7&Qr0]f7PW,M`SnM2=B=ImT^&slJ9%)u=*9CG,Jq+6RV2K4];Se4[,6dl>lFZJ'/sR2c."`Y_\qiQ'Rg;+4&/RL@H6GK
%#'P[UcBj07W]98_Im0Ys[Z>nAfNlgJc_CTZ9]mm*4S3QH&hC@9.tuM:DU`^G0\9HaA7Mh2`ZXTH3B-D5Qd:!D<Tpb>:H@BS,L=*E
%Iq\"9IW=6gZ<pdh@UsU/ia!2=A)gNR=WqO@&)VE<>>j(J+f6*UqQ`Vq^0$5K[*c:\j//F75ilP]ELL;CYcmApl\I)p5<te&_nAAk
%;I.Z`T-(H?P``9s7,j?2m#9P+>d=!L][/8dd<D+8kas9ni!#e7kO]S=,<8(+DtF3tGc]OtIKq"..WD]re[>&O:/K^KPas724+s3[
%l6#PFmI4;P']VG(e0c!f@I=c#cjWA52S%W.n&SNkSSr,s9`oK%Iqi7D*(%gJ^h4H60kqEfA7Hq.35^+S$E:h>H6FMKIU2POF(/]/
%@7Uq0a(8#K.6`fbi8>?C;luXdP*q1!"NC8N>ZGcC'N:cWWjj8;>uW$fZ1&=>5[B1iThrHMC1f+QlQJT9YQUae7*Se9&4L5^(ldaB
%VttPl[!/Dll?AN/?ZI#6B^2OpoHjAH9@9*9ONFtbdkgBbaC30HK^)Ac6$&'3@?=q]@!A@I3uptZ.'=*-N:4-BB9]'Ei&/j@QCAW@
%U"(^rR'>ec&YZa-=+8nlL%?,neJ*"A&ala[)',8?ooUUB_r6Wa]O6\;WR7N,?ORna\pd_6F^1/eJj)6ii-mA\T8kVQ/&_FcP`Fm\
%MAhDGQt1F$esWOuka%6jMU]&0`m9@hPr)[43;Vhu#*;Fa65UXlZI/`dQBh[P.#sE!qC6HP(#e`J^Z`D(./PUMOUCC+VoC8,1L<4:
%[1jdV;T'\Q$GKYtH;'Q;o-/tF6Y3@/X6],L,ALS"%\FfSULe:^ooR^@_GnT`T7oYh6\YTJE.GH9R$(N"%cT=pc,q?L!D`,()QYLu
%PqHnChrX`8+N%;e=DgQD:YfJ<V?dgX>hFJS<03P2hG^P+I_$R40LZ.kIV?@/%L'6?%j7Ce?\F@Lk#Xem>4hW5@1Cm^5n?pO%RD_t
%prLrar+Vr3>:OD?\@Aq8XA9G<RRD6_H<o9NXY%uN_QJdj7ZdS\`ld<4p/P>[[sqaDj#GJm<XqUqoM5I#0dqkg2u#+fb_>D='p6RK
%06aj%NEfA07I\&j"@3eUN9.024Zg,"1VdR)BrRu4#fZ-;Ik(aOCn,5b86&0gmC[M%!ObM!Z,I<lBP1f(YZsF$@)mFqN+,]N13M:5
%BCXA<b)o!)j0G\CAm5"^$)+:LK/`lTC@i^\XICiFT`1kkL'I6Z<>ImpW4nn^W[,L#k-RW7AHbLN(X&lSGLKfW6lI*snMq%YJ7sKk
%E<kKbO*,1o!lZ;DEoOTem@;dLqAD%>mf*2,HYCe7:A#Wk$iS#\G\16Y2NM;:i]#);7E\Q?CC8XKM>u4#ghnI%?pT`T:!?pkTqtdY
%TjDM^5,/LZf5tLa%L/]8^[g7KgFS44>F;uaERNX>6><r+[?d$=n!7X/#rEL0D%=q#>,4gh;mdaP@m,!4_8*GY2gHTg#M$f2\m>n^
%M,49^6Uk'R@'jI3\Lu+J@[*W-bB@]"j@$TQ\EFgch030K;QK?g<W._TW29H]77)gpRAW(OGLQ]c1$5b]`*39(;dV)Ogq1n4j83?7
%='GDHl/`5NoF.ot,>oj*2W#fMJ$'u$FZrG:K'=60:O@G'd_)k7O-lKTs!!F*l<W<B^nqpsSFq0=5->9YiYPYH'rqQ/Ef]REe-LcT
%5M_d-mA";:@e0!_D?)N0Y/;TPXg]Jg)T:D/S`tlF??qVsKE(uOr1F#XJ,W7Bci8+piCmSF!hGbYq&`l/>QRj7iu-,dB[Mc:m_0e4
%^'lMF!hH!!fdHR.Y>7<!jXNU=&R5"d?Q2.g17_q-3DNd("NRe;nMgEl^^"Ao?;#_HT"i!B#>b*cg2u%`7Ht><hhaa%j&Vq@#P*p@
%2XJ/5Q&V(@.:=W5'@eH7o?#K5G_o(^NfW*S-1rZ+#>G9Y1Bm+f'$G;!i>lt_/j<g(q'J7,AX%u$^ig*M<4&%.`/g!n[3@r'ilk`n
%\5](;FXJcdj2u/<\F'^Dg94#8&?_-R;Df<AZd=mS45Q.[1o$]oAs"nTM;T#)LU1$-7@<j2j+jV2+Sbn1kuXho@\bLEJ)'SB,Lp23
%&-@;Mm5@.69c8U<35RLdXSJ>`V.M]I*;sJ!%iVrp9g:p&VFmK]G"2+i`^A(An-Q)(]W3t^"'>Rbk;Y3-o72Ei]d"jCh8lW6fB7[-
%SB'L$kL.]6-CAH'R$$SQoE9Y6O=$P/1B,64Lt[?m,3mH+++KOC%-5SfJ*&Kj8:T]ERbFO!*Lg]mVN4c$L(HMVeohRT8.P.]Xnc>Z
%WmFD5a.VH>V,Kfpn4bs.U1UPaW'o5tg!Zg^6fR:E55goJE?,$aY.r"W_ZDjp;0D.g,b:]*2R^*RD7s;Zqm2t8LZJ=L3'CrQ'$uOa
%[;UVhk4A%G'7^(8OnX"9;:Er]a#4,h_Po7C"o%%"Kf(c`!XYq-r:pPHrq9Oe]&3,3[a*Ym8c<<d9&>E&:a8SCImFN97+PEZ?_U5k
%e8K2]=Y1Yg:S^m'eoe3=`r7G6.Z`)D=2bH+,Y<QNI#D\hbV6egG+cc+@Zng;[(;F\A#@TVEeCsKn<iXhA_YAbZV&!S44o'Lhkf53
%J%:5`%$Q_[G.Xh9J*H/o1Sfo4^P^BLUn1KVnmDV`?\9oM+kuN<\GSBF%;UDIm]%=XRoU&pi&%SOml&$P6$@QC5`"A-1A*aT6@A\>
%0$@nCYuimuq99WrqsJ4K?o+b8g`)>WfrFd%@]Jg(;tb[d:3Bfk%1s?P`jgJV)mII34)eK]%+GcA$R5s"Xl:M3Y;$U0B+52V=Gmpu
%!D`iOF*1I.;(7m7)$)bT(P*n?/k&BHrG&ol+43_%n"E;0eFPfo;Gk0YO29mnfuSu&Q@VkB/G,Etc$-g*B1lEnMJtu$A`qFD%it<8
%.*A7Nos&Uao,`HHoB:\K^Rr9b8Pdls23J0CKS=la<6\DHjZ9ETa:J?14B3WT-DRpg)g1WYl`DH]Vk6+!^n?NF@Tijq@>m!Q'uXc^
%Kk.^^U`d0H]Sa*&Imql6IdBC^*;MjuDS5-"p!Jte<h1/)MV*<V__$/ng>48fbWp8l)EFsCTH^s,`n:,'Takr6&)G;q&`\Nfa"[l2
%C2*A`;NB_>`Ei=!_0&0/?:@?MFU2`7P:g:Uk:J9-f8'UVG5h;!m)D2)/P=fm4)%a<rr"c7b7n+m^D/jFQXWBUI\lmC"8mqQ.689>
%_5%3/&b-2"#U&1VK&uljXm8hN<m[`VCFM3.Lu3o,'4HN[h*I9(oOTrG'"gn`T>"S9B:TL-NiaD]o="Q@6I4$Ir#LlYkm6OU@j73O
%%<#B&V@O^Lb#s!FqRg.78i/a,+qE+Yr$J;3-Z!:69ujZ6Hgk<8$\1@UQhGhJA+YR^[,IssSQSkX8NGQrm1G]Wm_fu[C&Rb_2;5UK
%#=$0HA([&rQD6T2a/c>$qqM[dSCGr=QCTN)c1e8ZiBnf1n%5?ZXH1'(-uQuQAASJf,orhfkc>;0Q;WRZ.njGW+ti`).h8V.5/W(!
%@mm.B*(pc6qi1'"K[Bf,BX-$T(Op'm0c44iOE:k/"!Lu$]Sp/DH2'-D7$/M*NDa=l!lAX*:7_L0Z5>6'HqlX>UP=ZFKlQufOHZdj
%hL')=BhGqkM39_rRU$9sW2CT4r)6_0Ogi`q74*^cUU#B0:[38To>(/o4%"90BMGSYPFl`"2c>hUNF(ik?XJSpl.Z&(S0,i&q&uac
%n+9JQD%)T&?G#;S>i=-12DA=PQLW1LjSC/hlO6\\%jZRuh-ir37l0-$BrXc0R=amRpi@TAoCm3X`cK?7r$h[r$Nk=dJ-<,Y0/0A[
%TW&4IjmU;Z*d3En^MBr-1\>p;n(>8\GmP#mG(%YO22s)_f[T8_aB13eG'6%VP&0tDa4J+)8>L4u<`+d^p,bTHLC;!"(pjO&'8D8o
%<]fm4YFhCu.phPA]0'eg;VfjKdBAn)K-E/.-qEU-ar=D$a,.jNWJ')W<Gga.LSa6Ms,K2k%<,SUMHN4Sr$mFUlc-S;O\TfO.V3dP
%e@8XWGDkVT93&YiO"[lhC`?Cmi6-HWh'/_QEQA4#n7dG(pc#O&/Mm0XPY_#+1>9f.'EONgI#For=J55uBeFd2MnqPkHI'LFi9Rio
%99Sg-Y4o1l^U-Ya)Q>*RY.ETpHQhf``+'7)<#X&On/=$=i<L6D/7B770RF4GTk+gK(N5ViI11r%"#H&+?3^_j2D!BGRem51ViJhi
%3_k1")apjDidq[XFFM$sida1$O7*.6%d""0=OkRJp>,kr?C=H):V@QR`B%=<Zuui4b(I9T!bGDTG=kg7GodA"dD5kUil8HT)=nkc
%$iMDP+j3#o`4hD)MKQ"+BP")Vl'o^4PCtE!*!L%%%@lO)'AIJF7GJ8sgdE1?<bs?SZ$t^`8JsZq7FYXu6@PG9r@Z[cVR=a:q()cI
%`!P.tjIsJ#D](V/2T8F*q6E='DUP9=Q`),ti8FtK'q5lO3c$%Yl1a:UIgjYK.D+PaY/o\):`EO269GP.m:5FN%Qe@"DA9?s\%&7Z
%[Y?q=-Jm4u/6'IpPYD6_p/O_bCX#t0:KPsW!!V%B\l"?&(aQ"67T1jo8cPrkE.?ZNAjl1WKc*(GQKXs%*pHl)HBA4JkV/Tn&ZfP1
%)S%6-5cOSjWBARL]%b8d]>!ZMOjJ[aHBHZJ,+pu`=gpJ>A_\I[krqZLb7]p(l86\f::P2%DHbS7cMp5JE^Wf#Y\8O4TE@3o/QZR,
%-RI6grRB%<E*;j?36qU+n*[4K<a6.>nXqHF_!nHN@jJ&9<NRlP!sW7nA^+.&RmO6#iWsJlrSB+\[<'6V5)CJ<%j496gTM]-+?K2E
%obW`BW?'E)HilJ'.H0A\b&/D[O8QQ%PW%L9[9GP<+"KLC[)GP%=sZp&ChpsR#$/k,?.2r],"UiGK()_H_Q7`69;uRf+T"tr>'=pd
%h%^?U,+s=$?+6$\9FF8p=+O*sIhC&.\eX-W.^J2&;%.f'lh@%Epc*+(F-2W:]89;#=\W28$O!*F]li0B>76_*a0,OX(i#K<WRZ.>
%PjIo)e>(V;Selc[Knb(TgLR3^neS>aTJNUQ/#]Ei=qZ0VM7e\&;[b\N)O-VPM@CmrSq>hGKFce4P]((L4\=^+8KWDap?E8gel]q0
%''N;gApW9"3F7fg]%L2Zj%q0cq0bgmJTH]Fa-8F2eXa0m\q?#A2XK_d^*R_522iCDs!dmKK34JX+c%E>ft%/kiE%*.2:9YqE_E;i
%)s7>hp9Wdt:>jhtHgp!jq0["^SYYuo)Kbfsq%sFg^95YU]tIWXJ=NE7r-jO:UB12US3g3gHWYJ+5(L<]:n-1gcgbQTa,ZNSp"oi_
%X2r7%K;>=`IU'H&(eCKW6#0U8%!r]@lZJB!O-bGK<BKnq(W3kW'Whm@DuIW\:3UTIS0_!-jQgB=<U'fI85lY@f1_XmR=a:V'No.V
%2>N/M+l-NKPPr0+?AVFrX"7<q!E&.Cm-YH33khW)]9lfU4JQsWBD\rt'.\*()f\!t1EE@g69A>V'V)ToIk4MhgM('./H^V&WdOp9
%5gXdB6eGRHr0#1e*e.+B7`7L5pGqG(M2^KD/83mlOqiML+sp5O2*HueUm(,52%Md)4foNfM!u[u:#P.0]0'gP.a<[rM%DsE.u:h>
%6(_*UfOh<0-_R+$9ft_.6T;A28H0Yc5<#]V-f0TX@uSS:BbmT*V,?;Rh;^\Gj,m*$=TMXC5E$!?m62d+MspBG=%R$kH`JJWW9cn-
%L^T,ZNHQVY/j^9E.fo5-&)fs"VL</6:PP4s+=R0O$YYmLohmS5%nkPC,5q?b7oYQmS0;a$SaU"+ISr,g=;3p/lFnsWLIBM=99hD'
%\#n9Ac(k)$Rl*dZ@srD]Jtfr9EE267hg0`:b6mmb]99B;QIZR-3L[\:Hgt0J=]LRlbC%nZ]0P(?bdQ,RDKt;L.ET3mT[9%WVc*3Q
%mNb$f-"f6d#3oeVi8ee@##4Bm_9dp7o3K2iN5r7EnV"(RY:7$C"\894EO+'KFpUFDAl4:sB!^$'9u.k^YH*`?]iQ;o:Ko^k-&B4M
%^>5eUG_Sh%QI6N'Hq,W]q,>1rAn4nm7!iGM;E%t@FE9BHfc`G(/D7"p2ER6MM:/#W>o@"(\N%"Ya#bI&!_"SafM3$B;Y(2U?IBqE
%`TD<sq-_";\!QH@"sR`]l$!B_Rb+Jho*g:2a1kmhSBb.Mg-WOpQ+Qt"0'p*@&ci?GU\QZg7'5]@N:PYjgmj2)/R+E@oR3'j]<qej
%qZW3@mt._L&#o&#5_H.(.99fb@^/8(&Th_nJca6gl>*3?W:\*s@h@a0YX][B^DpcTWRN%8#lbYB"V"!K59kDeneJkg:K0`0@J[Np
%5)MD=Vtj7c"H.j(KBh%1^G;.?B^56H=6MZe=Zn'sQJ,eM"%FWS:[QRp#RjO1;XDbU'TKdli:fe[<.+W,<"ZmDL19MAn5F"0&YTjl
%OkB)^-unTESn&-2r1H2cp:N)`,8qcq`5*'cj&-VC"2T[K*@:eY3-=Eb1+C/^-D-Hr.V?7_Hj-B2"%60$5a*sI)RkV!=?+cul>W^)
%5+]ed=9kGVr0iq!a3`lRR".;Tk#rB@jiO/$d3;Q[G=<$3Ih81g=gAlEqX%e,A'N#rP$F+[\fsr3%XSsPamJl6>E:QH0LAMTs4H]c
%/sR#;32fJu6;V1rjt=tc%0=U"8/CV-:(qrn5(M<ShI:lQH_I!\-,9o$<iP^JG0Z*%*Qp^-O8e9W2>b\3`R=Llr*Y$V31A.aJY&$S
%MPr$.h`9Oh5WXB`VL,+DGVe%7QbqA'(Ih5+YR]pr39Pdm*j<Y-W#RmAa3X]t;_?J-b_&d<"TV+JQRGpLJ*'9-@ZYoOPD6OjK=%AB
%n>j@n!hPot!:D&Ng$-U&b@MZu[/[*Ib@g)d#XA%mhY2`\/T2?`>-\tcBt>$<?X>JAK*Dpp0I9,T&Rf]Hdq,N/1&[no-qopKHaKN3
%?J4H=SQnKq*M-5Uop-:[kF3p*<<aRi>MkVI:X64$QSR(/f:cFG::X#Sm3Bd2E9,Vk"MXsi>V6D._5>^@Ku=;3:>SH^5LcB)o<%&&
%oXm"=at?s\jUWWqA+lZAPbpm2_cK*c&(dtO.FFjeLT&<mVqR0M*La%-MUW<';>e9'#_rqOa=*-SW5aN2$q:g(#[K-eMlJ$ei`)*N
%6!*SD;04<99<^*XogIr:R-@(:AOU\n`c0utKs+$^1j'B%(YPU5,/g189:'1?1p9oB+e?Z@jftfnmTdW9hK^bW(HTTb'Qa.!BFNaH
%Yn65s,03D.L,&!\F[B&s;%W,f8Yo>PD+Uab6efJ[;;a?^Utc'p8&#,aDFjntlS$d6-!ZTSU.20?hQK%u8u_`Ek#F\K8VSJT>mSlV
%LfXYC)a?AVLqN!J=VF<B8pVj'=sUaY;*ru1Ol+W0]78.]d2J3s=="8CU`qi*k]clF,V&eY6r?\55<b*bY>UN1MP^4->@s4[L58Y7
%?C+[R',+G!$amm!"Eu5q+!u8SAaIIS1&u=HG;KM#QI1^Q]-e1D$WD7d3]UnG-&-!$NCQJ\%>NFtCR"LEJ9!)ZY&%:ThT6GnqI>eW
%O]BgZJ2P25MEq4<0p@r9^(t>GKc9F<S[FnBZkOruMCS08f;l!-T.seBn8aR13PAcknu*>!%m/c@nKh4QP[&U4HT(,3lHm7)3)jF*
%]UT>[GFcQ9b6tR!&tINT*Y.&_g9FK+WDTcBd7X.':DI.t2D(`I=pu!c8":gNltO"#%W.V1^tBDA.M:r'W]!I7Q%-m_FnX$uXFDd/
%jOAG&1A/"9*[Jpb(!Sb;fGufsPtO.u%8YK3,hDY#OnS$1l]LtZ&mcM]M'>g3*p,9&F/b>mLj7P8F7s\D73/rV;>a1-1n/ae=+.2l
%o[GOZcI7S0**[^dAPmGGIIFl:=1(a7CKP7)R4[)aW6uo<7_M.D?M1YW,iC72l.P^-4Mc54gR%$;-^&2_IUq#Qof8a)eq.IFQm0:X
%V0O-lMKLq0G_(+nk?O_"JL@871EpH)5%YgG##ZAa3$Oo;nD]koV7Immh^,Ns3^s@N<r<:J,&io9&#koV+Z]a=QVlLrPKYWp.FAD=
%<e"!*Q*L%mA#RJVCt4,*@hDBQRS]VIpFE&G#,Gtckqq"c5GcgWKFnYk=!iS8e;93:HsodC:4B:OAX/^$e<U.aoB;,A`^@'8%[SBT
%#_+Cpjg(g9':t"qJVF::Kk+3["U'",Y$AC*V%;\<Eu!$FY=JsiAo")sb(Gcmq_>IXT^_YWb6]e^ngcQ+>Y(lh,C=!SJj]22iO['-
%EU4dq?@3eI_R*#O3Ffd<ENV50HePda)mqP.(e;>6!"D@l-A<Q\S;7nIlU>Wt\Pi39W4eu5WsDF\+,b;&cbY$53>C:''R72>-F;9-
%Q0PO`.cLlRN)MIYR948!fMokPpcDO+_SfcCX+9`qJlDQM0A?[C-pY%DOm3Q`*nANK9(&T*m6t&Kn*+o>AQaA2K$`&J.s,f;2HhA_
%drd62Q:8,LLaOZ1m0K#DSn#oQa\`3YdaYREkX.jUXBSHs#_PDA<oM:iE$\1N766%EJ>A4KMCWkg>ZcdWCR1Ae.q>D>fU(.%/FR]'
%lRC'hAKqgGm]!oBZ<rl7l#TSQ3?[U=.K-NS#bLC[aClJA%mJrsfHj*r5%*-P\$V1:fE4@67?1Kr7P/XL!&<cJK>s`[J*KND_qbhX
%FdaBTfeNm7e`&+HU&$rd&LGbYB^3IJ<mkI'$qg-qop(]r6oFW03?P'rrjX&F#_Y^Z-mu3Mif!U#]taDW1]nmT+aC!`UBt1_Q&B:3
%VCI^VL"3'F.hqn%CPTag?DkS[eq3K:p:/!0F4Eiq*!dqV.:J\!\WX1+Y9-.2daQ]6$AW*j2nCBkrKLmf16SVlAq6hNT6X(pMq14#
%T&*5ueMG']$B!n"XTJi=<XO'SE';heC.q.VFS0LA^pJQB:!MAprJ;YcOJ4sGdO.O_71_oI02AtoOhE;[QMgaMrjDBhaHmKY?V0)>
%Heb&+f9hGc+tdU<VR`J$RBP%YCV76JY!(4WRb`jmm-Frp>Hdd-g6#FZl;V77W?BOd9e4cVd)WPZ5WCIk2)@hVHJ38:)@0f)>,42O
%Y3dI=(geq(Zn$0O/Zp<*JiM-F^YRjn>VB*;i2oflcFRq7iKm$)65s#[[r*jhj)f=(='_>Vk8Zj[Jji*eUk?q;nkfdArOH/rjFkQ:
%)&`X]3Id-'NB`:E^ZW.!P0c<CLET&W'"h.6O6%&tJ<4&f)SEEniZ4^"J5EUs1DDC"N<,=Am>$Q,dV%>`]q@Q6OJf/RaCSPQ3dCK3
%;KL.X;VVgVj@rq,eqkdeJ>20ZPOaoVCRel+D\VGiaf:poA-$s0DZ=Bm.QYG\#oqA5*,8-X,tM`_$Pf7^5&Ll!Jb$"O;.ioIPk07.
%%_X'BQR3pd6rpraV)/'jHF2`R%bj-[/hQ!Eq3hf.AmU%*BRJ#l'5^>#m`lm12Fu[[hc/0IH.lC(rm;``paiCp:1/n>#q[VVkUl(+
%E3-.&qD`%%a8sYl,0#0W&:[X3A@s$?fO@+45nH*nmab1,%jU]OGgST+_!9Mo-?V[pndXk54uc]*:)Qnfr(Y!<BLo%@deq.qU,@u^
%"`=U(8Y>FCK$[*nNNpg%9UYr[dCSr6+FrYNU?">[JMaLtTr$E3Bja)u.BS0.CEV6&hKU5F"0j6oU98<#(T:5IklP)mXAuE(nd)O!
%_3XGU4Fmmn6]NI<prFu8)S'AYj@Jlp#nOTg&esW<"uiLan<'dUp4A)eYs^1nIc+pTXNh_Q%8^k\l_T7=@NBK>p2(NON9@<lFg('J
%&@m.beBhk07U)SZZ2?4VAi98'>LB,V>.3R4?hVI/?JEM@!>U4>Wd@7I3Hjn8[D&VA$b4LV,IEA+Am.Qk'.D"8MZ!INrCNX^diC@u
%aC!k)ej(b-H;KP%1`Y06M%pCH@E/,"pSV-u_o5a\@J0Cb!5W^D0T*>C?io`E(%Cr9(,D\\b2\EU"mUZh0s<Uk;WfmnFs#>2;&1lO
%rG!5$c\)8B^:-O,bG@3=/#Cf&Mu_o;0eS%V2_4rBkpIficj-.i&K<ZmU0K^c(/V1+1Z6%u6ggOeHQ161Z.gtDZlQM._MP=[(9#Ik
%m"TO'IL9:?eAa.*iPdTl+ZHE2_AEL-)sK#/6Xs<FO+baK&eC9S-4i!kk]!"Mp,ocVrgpc'>mk9MWsqLZ<`K8FNIIi3/W>Bs*BdcB
%#&@Y07SJjd>e[ru<(1E/BScOA<"J<@f,Y3u$MQgl!DoX[R?);/TA0-A=n>u`RBO[?#j=b+b;#4Zo<AnHj\M[6M#t'_6$j;6S:k^F
%U<UJlQT9V&asKFi&]!gG/DSg@OkbRqQ/No=D0[OM4]p_pL&>H]$agH)++;(=J3(aVrAh2478\F"/$,*8E'e_rJ#B_17!!Hp7_2(d
%lak?@^fc2Cp[J9t-pU8##9#/#Zod]VO5l4fH]Q^*9c<4N5seqf(aB!lg:Uf6*/bLf$,XqA6,\7c=iR$SJH57P]tL[/*!=H#-!\/g
%3Poftbug)l?X\Alint+q09F`cSrW/tEq-GtJg0CKm[mS]"54fF#RDu/![;W_R@$6/RItj_%s;YDI0XG?%Fg`rM[D8D$&L)FH=ImF
%D"_Mo=fk<5RHaXKh$K-6ePgGX(e%1M@$oA2f<cL-r9WtUhb7/o[,DN9f+,,ic&s!<Olr/i#hi9;eG=)koPkCg#M"Z/fXQ$14sR&b
%gRM#%'g\uM+@iX..a?D,Kle<IqqXI#1=I$*g[YC7Q\!QVPso=U<Yb#('!-l(-'6)m8iZJ#gY&28XWBXUH_^'`fH\pnr=!R@pf;R5
%I^2kQ-Rj]%@[F\[=Ab'T)<H+sm4@=u;6MhE9nu).r&3J;i7sqpfR./YUE=R'!%&<WQuAr;^2aNmR)0Z>OXrq2LCbY'cGN2!hBSkg
%NNq]SV5=i#VFjK$#?>P&#)EfMR(r-#1bbR,'M1Q`U?Pc2>[mZQ*,P6\:^?bMLr(Q[ff8O&"LS6?59`gV4@%53]>4"QX^LJ/J3G#D
%:bohKgKl,sG;Vg!CBL+'QoJpie5sHP/HFC+LIY%"mU[m]HIQ>Yph-G_W!KR!"%Th:BL3._aRnDYV^q`_H8&nn(0/SWfe:BBbph:*
%,OW/$M"^C4?![%tI4dKBBG@!J>htHd\iG`3`6*J`ZW`JGW]@u2V*DsFm2BOT1bNFZ,8k;L&rGcFl^R_cHsB`*n%LK`PTVcBfF8HZ
%A5SD+L,T0'jUR*#9VZRZqMu6#>t%'j..Di[6`is)BG%6<HU#r'5u1&(IR$WeSX3DF_nrJ>8X2i`:s_N*Yldk/I\q#TdT`q87JfJ(
%g;d+mXTgDI`t;h#of$W9705pY]E]1WF!4bd9VaZ%MN2\1FIpZoH2P\pf0Pg'j+7@h#cm"KBEeu.m"+ehQpAOOG^/$/g1fHkhgp3O
%2tn$dQ<,UBZ$G_bJo0;:JtSUIMDbp^(g)>3]?5mGK>**L6H8&H3E)Fsn?E.Vj`c8N%i899oYB<#Oa$H'Y?.U;bkb,o@,d"_51O00
%#HC!G3X&jMAfuHeWA$YNS4:#-=c&Ooc+YS(`=en:L[chf<MYETe9`fH@XTd3C3,>_a[UNF%hlseSRXd@nIiiXRP:L[X,'^GRJIuc
%0`St!3`1@in%Q>8(4Kne^E8.H;+R;B6iup6Kk.oI&C;[BOqo>JCbrFPh42Qr/IAMCN,MiEf;P@H!rjTP+T/aP<2X8%J@1hO)OBs2
%]rd^O"pD=H.8;C6:>/M97M,I=%or#>qedrcd%uDG,;UE$+gTSe027*-B?X4:+1lR?T<IO'A5QlBAUJ(MbtI9\KB3P)DRi(>7A*QG
%pFdO\"P9$k]7us#i]<ips7o2EPiQ2$Y$&VHk6?s#Jns`hc87'4CdoC`=nL/LY2WBpO&7R]&e2P5#[A6Q=<i;$*K0N4NFk2PX]F$)
%&Tq,u,Ih\>$PaY?!ZA"keS*>+[&\/O%K,R,:R`H_EZs1:]u!>o\l7=lAb[ob)^<hCHtmrq;<07^a)pW56!e'_ck8+*=(@'IIpV`2
%)Q!f;%r?iD3Q?B#:OSYt:(+E^Y&30c^L<^<2JK$TYRt4XZo!t?CT@-M>J_Xli20cpglVX6bu>ntnDoESOb$J5@Rjg+lTnfs;O*np
%s1G'-@.&S,".1[fejl._.X<8n./%2F$6jV39Z-[3[9RD<a]`te/#[Gj#LiK:>#YVN8h[dFS@#Q<"9NO\7CAqB^H6#6*B"sBr6XOh
%RNJK5$<H$eKE0Xc_U.r9GkJ+C"ZP\D/^Msr;UhUJb)ZIGbk,t%>M?Q#B<*Vo+pOAUW`K,gIY_l\/qgAnma0c;/C#kEn[8cIWRuBl
%-GS%#duru8gU&:8Z-B=P[k%qs&\sh#<g[u,&):$\Zd?$XOABk5hJrc\^:ak!kGn;@An4`-[jd8H<40]036]3n^:Fjil`++L\&!mU
%Zi[(?\'9G[l_M56GlO@XKM+.:BUhLq#E>2H*U=qcp3VF`oO>7Q=r&VL?Rer<#cc/i1])FISb5C##HKl6/;WePOBCcEp0cT;K;kAe
%j[T:]/>&-A9]M(NI"nFi7":\8Jl7o9Lo;oViZoAs0`(3nIdpH?PSM;B*_ZEMh(j)?7#2d[@>TA=\9I8HDWBicKXIb]lJ&L'+h%eY
%WHHZgk=eP+auja[ZqVr-(#H#qIE`6!R]R?.$(?CG,<FeBqacY0DP5@K8D+LAp,e(7WRd$T9#un]8DP95'!h'_giHU&<k=(L"=N'X
%I"cj=maS<#UO)q"UFXS+/)Y`5fkI>j9]<"sY3$K#_&+?q+l<D."GIpL="BFk.Vf=[VI,T9WdJ=$Y@%8O^Tp$2Ub7m]98OAaCijc>
%/Z0p:ehNTTV6!uX(u^>L4E6A359gI_.3g6#.ss:9ITb2ZLC0q3d(Y3HqH_UA>c8nIVsr<ahpfH9&dBaFE/c&-$)rUBltt?2Z)cEG
%e7bAFO'=ls'3e055Cb]WYK1e2mJM^?N8U=GdfX+"V^n2<!(N.+!=Hbp,\Ctf&k/2*KSG5b@$a[ehrlD+h(dU1OG^8=)S?YZ>u*9C
%d^!/W2J9mI"GSqH?q_0rZ"@19f'c/9o]3^25qT%S?ghobL,VhdM;M>*r-p7_m(D6orqVFJS'7!a[$rZTKkbLlSYG','IQmsdb;77
%Pe-d,!47:rCo7)h0ReZor;AAL=9Vg#dRWX&=Ig"][f$3)j9>]9*8g4^j,]H8I][/*GQ8=lPHGCkd@tAZ7Tb_bi"Ig_NB'&/YZ+V#
%"ac#h_EP/)T>epZF9t*C.C,5QO/dRYVZPqEa$mZh@]a=)2+ieMEhSA`p%9%sGC$D_rKVZk/F$4^@\:`[c$U68!A+RZ-nB>d$L;s:
%W\^J9ND;%j7e;\=M%+q#,kCSiFfEE):cI726$!-B)mSqQ=93j31TqF_$HN,8;`/?R/SY+@dkrm82O46I?I:EQqrnj_Cn:Wj5-Igg
%#&:QN6%5$)ip+6RbiL;cM).9'o0(8Y!Z2>k;Oi)o(gu^oC<(+L8>Y?2dq!lY]]-f47L?M?B`ON:.S":9QAu[]nsV)<==HcQ74d!#
%l`iR'lfW#q=S1p9#(h.\/`iLCo3GVgo_B-L#;1]E+8&Y%_t?fj'=0$V?BfO;"#W9&RbQiT\f!V\[Fhij5e8$%:dt9bB<XeTM]G[;
%m>`=@P#Qd7HS1c1,IZl\2JLPEL-&9tIMuBmJVb0+=V_RQ"mTAg/KmsX$WXC';MfrB:1'<S46SO$/&7:=8<*g`G_X/[+fn0P\Yh6B
%o)YMK#(WrsQBB[g(B42(qeMK-(1\7P8!@U1E%p21h@j05#>^M0qo9`SE.X?!s4:''2ed0](%28QHE)hSMGRpiR`OGe[oI#q]]4ED
%0@n=L^eEf\g/hnMifj:*fka6gX]`msQG_mM5lME"-dI8hkZ&G4:LLAE7\]-g,([gu6pi!"!YNP=OW]R)h);UN+_=2g=AkYm(<tdD
%^3C/_2`@6(j;t^8=&Z5'.f6qP4*m3nH7tZbmVZe;B?R7Qq9fc#c@Ym#bl2K\/*JFP"X@]jO=KgKHGjsTVH"/h@,(Fp2V.]$kA-!5
%41kGp]><p#p?ap]ei)HE;3Pl2)"gm1XS!ojo\U+re#0,uXU+1&Sb?*)]^*kFF"LDu?\*XXfp!"@VbDV(pj:&a`Gb;l$MG@_[PetM
%Po%aQXOhqr#rUk16=Xj*r,'tiXPhUneKaRrS1eflY@pm0PatP9`TQ=r:o0.s)OK>l-60?W/OSo"7K_@)`*P"![45e=m\ij(HeK@-
%rjl+]i_sa0Ib!psp.WW;?f+!hn)@ImR#\(NGtdmU[Wsj=Ncd-Gb`2;W9EnM8>"EIq&`I]sbN_]_4k%i2j^Z"t[D'n$btN"Zioc94
%hiC]DS6(@srB5Fo4uekuVP]`W"_I/dUa..!%<tRkI4t-$kW*^Xhug4!(b/LdgjamdB@))b&.990#T[W7'NjB>f^!la43atog!/<d
%hi2AtA<^Nr@b8uDR^"4B_I7^//BhNk[o6lrFIXQ#T1=O+^RZ0)k6O]r-lH_7)qIU4NdL.k(:WT4_l$"<CrZLFnrh9mJK*I>O(e2,
%YNP4-X1Bau3Ij74F73CoJ2l':#t`V%1R'_NT20m.lqWaKo,'LK$];3Haa;+,.K]O!#R1dbQe`!rb>-7d4\1(/IW?>)4\MJ8rlq%M
%#Zq]&J?:W%'(AK<1iAo*=Z=>KGqopk8.jg88Z8]/C61*[R>:uV7SZ#iZu?2H.BSYFJGtqE9=8>FmccMjLYHgfE,WJ9d?&F'\1"Rh
%`_4THe?n)sZe[p5.nc9$8.e!+o9sg>!]_RJ2GMFOO<iMF.ot`Pl%Fj6YSqD$RK3TQOJKI)`HG(o@p\f'+8:UsaX+<Nf=G`p/HHmQ
%=!dOXnmmN]%M2JgSs0+<]Ki:ioN9=LIc:nkj&f@GGmcC]a((VLr=0,eN?U72'M13doUpto8/DD(7db5lB*($(R9'lD>na--95,n%
%UQN47ZKXQj.7WMM;A_+;@D_td6@?XXb;2j^%"TH_L/TY2!sG0i]uKR+YN1^T#:_GhK:fsSYLO`+2dDBr_.8p)3mHLSbA'N"HibeX
%(Ols$n2jl'l60fQ1T!FD;X"Y6*-qt,BXW0kVtK1P(A*[m@%a5HUm_7rR/QqoJb-HSj?B>+-5VOSW7C5Va*o,c1rBmIJnF4$Fcb;]
%LJFBbi#G3IS$Q4QM5-N4oR$F^_Dm3&eGM".1U\R;i-Cn]YaH[m<;[O90qpd97)^i)q`S8#]+F_3UYU'o75I90`-hW;&mM&gchF>X
%q7H#Q1G9[uY[q.QcmkC#`*#Hi-e)\,TY6aAbnP<>F8kKl/osr=nrHij*9e\45$CWJi)IGa3RV17%Lor-[DX8uT%``rM0jH!I0q1'
%L5Bj0lVe@Y^>?1[r/.Io^=@@`W?@'l(duN]<Ei@sX`Mt[he[EJj&AE5Y4JU+Scg++TH'6#aj,qP$n]X_>RRHs_%Fp]/uB`mP2]fj
%XWsi'YIn8ee@)47^A4X?kT/2<&VbC9M)uS1410OObg'MKJ'dIg)q=4"o&_o^Fr6A;Tqo6sXE^Tj;@92f]WrF#^8E%]HO)63O.Lu#
%"Xp]*e('Rr$6$1tO:cUMo6)]"Mncd(VDctW=7K.M`CDWO\UTZhp7*Aj/AO]S4_i);lV<S=3mklX1K?jXk;7,iaf-Z`5(=)AeG8RS
%1K&>j"Ln?"^V3>%$7(gmI@TFfEB>O$FZ<>o<Vc4(?brXHosUd(@_FF+ChdV%30nmEK,OWDI(_AHKMe.(0o^,%VJ1aWGHdd?20DY\
%C-em6#q/Si\cD`A&fi0hOu"UR(sbVafEEs"%mm2E&1CE#S(,3F[fD.qpj1A7dlO7b.q4o18]qEX0SPPqrfOTR1/1[P/4ltm#iNe"
%EC`u8WhM[U?`PZ4M6[@acl,hD_Q2?H<PCkdKW`=7i7q(_0RUo,1VBPQ!Wa4A.6!GYmao5N4g\ofKC$f->,b`A`PcBaQjEDtC$@Fk
%?1jFI@%8\@Rp_]!F4:5_d`jhHXJp]M!4%<XeZb@`D2o$a?2pZ=ck-orfAUfuiI<I=H"RJ$W3bfJ0@NfnAi*N_CQn&2E=[gHA5mkp
%p<AXN_%Y=#W(qHgArG$8Q@[kEWRVSR"]mi61kgG7qF2fC1(EB%b,nbl444unXD%F]&UO/[8Is((;$H^uj*2m`/qWMZ_sNt9>&KVs
%$2J,N>FfdY4F9iN+ltrs<93VCG[`YAYATmO5,KRLN0P)Ga29i9=46[F:!R"o`[(3IQ$"JV,$--k'eB+$3U\!b#d&7\0Qmb)^b`Oe
%!6>1SJk11C-VC"7^V,18X7;NS_ufqS'2EmW]iHm>qui-g'D*A-YI];$q7Ani^\/$7$ZS*&&=//>-o:A)H'<W<fNT"'iO-fGDH='#
%=qS9VDQSV_+st'0dp1YICBTY4VZrg&S8J6<fJWB*EF&t4at@piB0&YCi\o4^6U=cW+W[^U`W7u`A8,Pg-"E-)eQ@$4HeZbJ&\!^!
%@laRoi^5!dbImXV\Xm$S$^@rhO[:b?(/uDKSgH"-'dQV,!;LPHD85JsZ6N^#pf7n@?DCGq!NA>o\PRlWPRN5]?n1GT*_G;PqN?[R
%e1;&[O#.V][?qD8kZF62lpNepJmF94*FWNFGa<We'.X`QEO>tkjkp5G+,k)k0EaW@2O)iC6Ck_,^+S?#J^C/BVp5D5'\WF#_[_o-
%Urm'\?B+Z/^fkZcTGi.YhiaErM,qfQA20'Ud*YI:3nIThVCs21)3%=rL%V[COn;<!mKDD&@%5$6Qj!TAB=,m:NjS-_8,Hrubs`d_
%]cS,[l(9UHY&tkBe8f"XJPIBr@H-LTXGWB_<^nl0I7!UT,3t'JMm2rS6D-J`VVAeMHY@E.>gi`cFL?.5,_HG-T(3"NMIt*H^D4gC
%qJo>tH$o\5oJ6nD`8n(*pW%6pG=IDY;^5>EdNiQSdYbmO8Fk.=osj>,VY5u1HaH87GMT*3&"@Jq:N02f`$tbjPXl9-6a<qK^0@?J
%Us'd2gaEFPGH)je-kRr^]cc>JO>-pZg+6\bR,\=^AJ-J0OQW(d@f89#M=8foO6o&<i7B>oKIg(Pld_5B:@,A#!,KQ<@61+g8^MH?
%d0A'$mH@Z#Oqmp]q^2$kDa.hqOnAt\7/=)nA"RM=$'J[S4tai>;Vj5\^/u1tU6"1.c,OG7U>\DW"9I?OHq0b^TEVF/Y")BCV*Zi^
%guuc*m.&<h-"Bb$_@?1t#U<jZ`.F`[oN=2oU8"HW1Jp+,IG_d'Y@f'^Y=d1`._E;K1k"QSg7e0_9<e.FF($lWRL=J&m^o=n^3sth
%X&q.YnA&o4*"(rb*"YQOR;+BAGO:5%4`@6)-r7+:+9c`WcY7/ZCV3#o/H77o<V9#lcC'p/Q0<de&/(g=O%FY+3^lkm7(D3d#Lr!U
%-hPjDXfhghodcb/-qr'+[1+_sEK9"d3"]5iQF%L3`)!d#`\qT[k:(no8GGul/F!MbgNh<MDR/`ga-XLJKgbkle(3&^;$ED&\"<F:
%M:-R-N"4Es8:80E$"uteaIAO]r[C9Un9[9bD0Ub\-F7*i>19YY+rV+B"Z)/_eIiB._:,Z!7WJ`-Xh/PqH?rZDK]#n16]ubqH$u:T
%>tXoBCSMoZATQ?`SE_g";2oIK$*+?!2=tr#OnoCp+NouY$oj&\RU!eZDY^.X2g+/VEuj!Jid?9.hHt$X8*g!m@;8YI=r1>l,:q3M
%2b!mAp5DB?;T?V[Id^q;5TS&%#+6?\[R.3Z1,o2VUu-^8drJII7$okh(sms57)B5tf.rLpq7.#Yq*oU^205cL)GeDo<R&-a3r$6J
%4TeQihcZbmX*nIml(%a'"3pQ89NESl:i,>V(K$9`%'O.eGdPWPppX_0Gh1?VNV_&XL+%^;e\iX$1$f\g^N'^GO*d:hOj7g;%W+pd
%JFSuG'$=)haV:OS6p<#M^cd+ea,#B7m+KrZG>]Q"HbJh?@BJgO)/9MI9TV2?ZNa>Q0Q3XiW"g>I)3\Gt<Q41Q+115ANKO^uht?rs
%1KW<+k(hH)f@eQ9/2#skTes%*):-'!@HhHul`ZmTD,+ZuF&M>%4dJ-R$gd=tm4ln5[gNdGNVmTFV]f+Rs)c-[d'2_Gi_Yfs6m`?/
%8>-[j4@R=BEf3R9FTo*\8:OqA5WT:G*ikIajID?r!#KO*[O__d?"7@$Pifli4\^)i4ee<7oj]t4cb*pT=SB?6fn`O^jC3'MSQBOc
%JmtS6:8S3>\(d(QS8IX)Qr$1_\$cN>)n?N\9^W/(jsMq/&-8UsgK5071I%__Nh5FoPmN.bUsN)<?H]WoQ@0b7K<c/>N3``/^ge3/
%km#-&j_=auhS@HEq??,W$:dsAh\[1-j4NS7[r+9"<AmnNdk?m264BCEW<gg+#T8lJMj6?)<s+4TF$k1e8qX,^[TqH0@+?o3LYr@_
%+gcB&;Z4=29`fTi!uKhj%nrO*h9&kOmUN^s3/,b*SC%I,]!<"\!YQSDl9/6qDTp1Cr9G-][OB%+`aH%b=VL-aLidP2CS6K$pI#=m
%qqH[4CZ*Q1R.'9cg<(UhmWSqRL(8SaI[-aJ<n``o=tSp+UF2Duh'$<PZPqX9l-Y=,l%#)C2#A(#7%%qs*;Ai>f1;gZI66M2_"QBh
%(!7tH>gll5GF.]G'$E$BC<`Nc\"2h9;C#4'<heI`$J+hU`V6"shV3B#cU'o"[8iB^DB`3G>ZLZh-3D_ho_a+!!I'']Fu@-C&Y#gG
%jkef?M(5!(]t31^lj,n'm1^sG[qMW`oS,<Sk;pp6.p_oLr$qhDPAW0C0C"\>/$QpYg($FbV=CO5R#bD+HJ"=,_R%I4X6+tt6>/Sc
%.siS)P:3S\]usdb7G<#W[0NJj>Z_`>,E-Zfk8(PGU_Q1Z/+X%&b`$0N]!U2*5Q*'Geq;gXVmO`nh?$q`ckr^I_LNO^#dDLhgoinA
%b:F?t!>S"P'R'TNh=SPq7b9+H--A.)-tfkTYOlTm!7jL3R??%5aR+r+k;bI[VkU5SHr07ZH7<8&XgQGGYf<?^-1p-eU9K+He8XGH
%B4lF:R_,/m%UY@sklZ?cRGOQSRNE=PNlu7=,GtQ=?:_^%gZWr.c$0$)>6"2\p#"LjV8\B@eon_4?L0m_j"\bVEatST0uG:-UPOWV
%KGS"7)%lT,r$@1WU)Bi!Q.B'TaHPrX$GV>13dRF<YcI:;DcPNeMNCk?]<2dn,U)>u#>0-:90n6=4qS)%%>KlimC&a/M<gmfd)\2p
%Cds:q*N9MP7c+W.V<jBjLMj:>,egrVZ`2??;e6?sl6S^2A'r_E;VqIHn!LL)QOuY7nEJC1BJP!)@Sp_*NF@N*jHXFU;E'gkcDhK$
%V'N7Ue&bib1fm>,UnqbBWKZl5G&44TER2JeqZ\-8=M<6<R[nOWUqkJ?\NVW$E6u5d/[b.qnQBe^5W._g6=b_IoZ'f*q:k[;c8%bR
%iB6YBXYDH9DFf831D7!<j$^cTr@>cdA<s)&9IW%BVl4$;O[7A536XYT"OHe(G.[$6N;Z_b?Ll^<p8M:Fp,TGA`V%Pma2";t`M:Al
%:b?46RGn*KCc3sJ.-h&m;k"Og\M_%'&srt,oW!_Ua#53>/.X^b;V?`)o;67PAIgc]p\SUrY.ecko/9Buih?.-ht6W^1!ch+o0?F^
%omgNQ_ODZJ%_9R7*tfNG1g>sDpUY"Nk*'fU,M[ED%4Gl5A[a&tM(=bF=P+0Fp"XB!\m@G+8_h,^TH)\tC]opS]s,.l(Hn.4b`;OC
%NAt=@%Jub^#MRM]7UJW]g+,;L*_jS&*(9K$8Si?0T1BJR8o2:G]hfqTpu;_oT!rfMYmZ,6q$?,`#r%5_YH3YL3n1+Em`<;S@P4@+
%$;Lbc2#n>Af7?P+^BdAAkf_3])EE[KQrQkgb3#mJ.h_I0/1:Q++j6lAC:.%B#Xco)!!IYk35Z"eY3Lb<l*ZL7N)>T6AMY6$cpQ!g
%_BmNl;:=(bE'a_/JBhH5,qrdn,c2;CYD;H;4\?)n/NBr<U)ZTM0.hMe+@<sOLrBWBgm08r`u?3D^elpd`3naYm1#RG>96!5&/.`H
%0/g^BFkh2>,I^eBhRo!"Q4sC^g_QmGQ)Z8F8g&uK\f-0O^8`-9N+sMl'p:g+NuZH9@,nY&!Q=S9Gc&g7DmEOC9]$;S#EeG:"mt1M
%\f1N_T5!Z%!d7V>SLp$o$8(&)DXI1>l0CB.BSVs=+KrZr?:M+K2klt]FjU[ucl7fq]&c(CD\&Qu3P0&$f,+>LOen)9J^iN#VLM$\
%Fi&lGD+6E'A^3Nl<<Vu+2"cFkCJ*sXp?H_BLhIk&PB0W;?^%_/.,*Zi(ge!u,mD[8<RB#aR#g=$AnJRP&/*F6)fHJmV>/.7P:nr^
%&Hu1G[CX=A<iDY*/R.*T6b,=3k3oj!X_A]dl^V0'qRmVSkI[cPp6VJUpTu3<WQ]'_fBSFEgK"HW4s,D3M"m[,G7$R&&.N^_Z%o-I
%SRah:*D.%]W@jcapTM-1=K\/fR>GGnHM=9qp/AK6%$/aRS`A!.0j:%"bMR56&^f.&mnoXX*jk;I&h-.[+QJ9WW\3NkmmSTt.I.$X
%Om^d+,"F0FXTfO*i@8Q-I1_Q5!u5OjOV80MJg>aYNO6N0#(K+"7N)U0N6K?jB%K>KBu-3@Up\A*eZ"nkFtfN&j%QK_,,#q7:Zs*A
%hs+-u;1eKZoi6j!4_t+QN=3_?QuQ/c'I5(DSEakFAZSTm"2hnN1=1tb(@%lNlnVk#2RXQ4%ls^S?.S<<lTLLV$.cJO$--Q>di^Fn
%gt$.(FJa?k?=6*4]&^]>"YTbd>s.)Sl6/R`C[O4?kdhuX)V+e>&QT$GGA;b9-_=,0><tCg-?q&#T<G7YQRah*\9HJPP99+HfK^Gs
%pTHYNHWfkj1u>]iF\u'IX&))\o42>sj[FB:,'dtOC4!;!aIG#i$;<^c,hg?#&N$:HhS.e)@PZ.U6Ut3\c^@r<@sWO;0tG+reu%Ci
%\82'%:3BBL.HR>e/^G!MM8!?#aFeRtE]SK"c&4@s-<(>%MVH%kr%lui!j/O?$J,!(!!H21Yal%WK#+@,Jgd.sA%Vs]$32+2jDoL<
%l:<Rpg*,Zo<e+?9V-`@C3^Lg::jhRclf&-!.'<EX#64U<@87Hh6H=6sY8J+Y_q:4\[Vm?-r:+J&?&fDN@e`brSj5\d["Q&FospMp
%Fnuei,_Os0HAuh;/\b4:*&-e?:l;fYJ5`R#Cs5D(%oA?XEZ(8_B*YH-fV3:/?g)#M&j?!OSN[kDCd]9b+Xr84,ZaWj;[]rIj*6+)
%j:70Eg"%'@+N%p6$sE=I1/b8V:7#G]S=)#i6Kej=PUq6!4a-,#N7AR;#9CI"[G!"_#RsUj+]:t[Q=2QuD-nkTPP,RmU(3^c(P*KA
%TA"kbWcLY<XJ[,!BjG@i,&f=Vq$8j+^XGEebg5/N;?iLlK_q,b\3pf$-Vjh<[4kiNJnplp5a+`D7??taNk=rU#'c*m3hbn%10#3+
%7MqfBXfnb%.k8A-JK*"rMnbpqWol.d7XkpFA[tOZo&0YsURPl*4\nlE18k6hYHdGei5\Hs[((&Y-!mfr?d)Is!%"-k,.Jh]%t:Ud
%I\&YA8rmiBj&=:.@F_0;'5h,C\"2;a)eRKUp-r8J6%E3($p'qU>7[H2Ol2%;O-Po(M-q.Q&J]@llMYP_Ze4:`@n_T]#M*tI@(ks6
%K.gYaqt'ddr,#8X<tSYQpFp4lr&.32CL[P0I"1ZE+K9^Ek8apsO-N6=`#(t.ckL$,oSE%n5#n)Kl5JuVTbV0d#$s2]50&&Z>FXI8
%E:OJ+@oUpk.9Yc3Ghje,GUc&#''?C9P'&jVqM<Y&Aq9QO5IO#H-&I:p#K;*I(GTEN0g&?sV.sES0s+=hKK[QW[=tg4ld>(Eo$"1H
%N.k`04C*>_43(;d(q0tgJ%U]3^V-:Ed-0&4"G8P[)cU!Yc%+!$Ot&[D-bU+'m%77\`#k&TEmi\pf>g`$cA'a=];.SU+,[]ng:Kcl
%NiX$EK#^rgg&t#NkqPXtaqH^2h>OSn%fDbSF[`0=Z!tlCNdi8ZQe;^T)q3%l4fPR)GHRWu;Wh\\F+9h\E2Ocr5",c8ohEY3O\FjT
%]ehRnKpXBAIUtAP++:ESku3E*S>]O>Jl*QdpT(Ek<=@oS'B^D0!sB%Oe0h.,4;A2M,49YBYj;hs=D>b=Z'61.5/ku=W_hc`Fr/He
%WYe-/\[Tqjq$GQZKX]L:b[LUP>UgDUe\^kMOhB^A"@4$t1kob%dQ2TEUoL2>qcm(L:IL\/-:/6j!_Mh1ht54t]P"h(8RbbY?1&)3
%=.mY68=V?T;?oT],rs41Y`YP%mUA;QK*%Q6X(^Y:c7smB5fRcdCPpbIO:t?t!r&_jHg$**lc,Fh3DsdHE`m->9=:Xb9DQ,[;ZUJ1
%LQ>"?B@]-_>V3=ekf*#IT6d5\!,@W(Oe'K+WM_:uJr8VGSpQlHO*<(%,1Z1epD:'r?Ce*Ygm;:Nfe$2[g@^MlR"h3r[.;$'>>%fp
%K*;DpW"#;LfCCPOFts::>,#SR=1h%t&SN5M;pKWB'n/TiRsVo,lUIPbT0LtV/c\IG33`DNp$h-_Mkh08-Ed]c$I`<\`W%"`=*Rgs
%Cha,hcuZc;hS6OmJ(&dE!3G";/t5n]S0K=i70(u?BI/`a+-F%(%cM@bEnq<5'KW0J+alMZ@N=Y*Gt!0XkW\V@5PXc0\*'C?WlC_V
%p(87k5AdKV/iu1ECC3'ZfBZAsTUf1FEL+VB=7UdI]+k#!"4:C7i!t3#Tk+;_V4C11XKmsPgWX-0;>Pe?1&"*?Ee]W&[Ig16?GgY#
%)d-LqWot!J$+oC8>)l-WcHL!/V)eA4J^a)2Y#AT8XJeer#e^c(9n3LD)oa;Ckb2m9Tr@(`8<;8F'ldZq:Wp]Kid\Vp9gGHI9T<$K
%8\%l;B_SR-0&@35VatQbXB],?rYQQO#T-RRJ-lu?Pdm_K'05(%FX1@G6R?oPgrlr6$fkBc;uCG=\&^mH!XJm$m12[fT0Y9h`U,"s
%.+R7RKd6#l[/UPZ&=nj)9LV`7=4lX]1bVtQ0cfUgpJYmCH0N)5X6WV_0UQ/J!B8A>NB:=p).k]-^f0<2m8H="^cQutrbem>:'^P+
%e7Kt8A<M"T\P*UfO1L[f_D'1UC2'*0MH%Y!.(/A7N"4>/K)m-X$ZWXATY0Ab<*SIW/_MIF.T\Q:*1tHg'0tEAXsdsAEX%jGa7&a!
%kDJp'[q.&4QStKa"jejbks#YU_IOeTs!m$^C#n1d0]5ng=i"DmM!tBR/qH>.)uh[ZlZlU[MIeIA>E+i#caFh%<ni"8Wria7V\EK-
%B:/P>H1npfgFFoMH$k_t!fo?@9pA:e`@6%W==T+lV+k)7/RU%A/[o31NS@$"$V%J6e'lTr`nn;9em=^4Hl1U@g06$E?MGF<Q^snc
%<cf,2<RRXKI+&mXp7`8n\oB'?Du72B.9Pik^!u%#%kdO@e/5n#:`g"P'/?Go#@oE_0DP+<;+1#bQO(#Kkbc`"j.*S%cqAc!.,qW7
%hb'-cN5oKM;1Ea,`qqhF.M3q.Bd(K-;KKN9h=VHT-q15XW$E.[ZqdX*kUB(M,K")5`eb]h`tFAV9VUkDU@2$U3bYS.(OC=C4/$f/
%<OkYV@%qh!i,#Tj6mk8;@?pqmen"jO2,5kK(PQJfJ52`K.*W<tQ.KKnW#nj5B)rpY=r+;/>4eZ%4j*R`eg[6SU,"*ppi;92.PtL-
%]2hB?]L>"On"ut72t%[[2HE@S1M5cc#/2il2#M#r&^b+\:4GCr+\ua8VK_]>(qg^!It*MsTmsrmA*K_<6(,@r:CF+s.`_sA6&rf*
%?ePE\kKYGb^[]iic>QmZXAeICB1aJ+Vm5+f$R'Y:4HD9LW,arT/gf_b?l0X1<8\Mh?.o.)-mu>6YT)eg$K\(>ajtm-=3QBsZbDaM
%9%*mcl-j6`>'k),gHV+2Q70\0'LXlUCE&$QOqigjrjd:Rr,"m;"hbd&*M#N=b5*L%fiD(3eBh,^)Gb%di"E36*ql+u7[n]Rg+/OF
%DdS:s3?"]^TIRm!]#&LQa`3X3,XtD^o9+EZE&!5ld<%IcWbrt!0^:(ig=tm!rBj!nMkE9Cl;#"sUL@[Pa0"8@kA1KoO!YJA[RWC6
%W<k/hO.I'K\E(X:dXB)R%-.ru?c1k`Vn9GC;c:ZG=2=t'$alU96]J9?9r!a;IU_8Zqar_>GQf87.hXEpd@lV:B/i7m=Ii[MIdCpQ
%';-iY.asF?"8`[uJD.$i1\mo3S4DZsI#b#.j!PM\%s2L9>:-g[:[1%8XDL/#_LbVF4pF!gIu^q/^C@uJJeXu/i.EJ^<sg-<JWBPf
%Ys]!s`6>MuMFA3A"[oKDlFcMmURpOVg8!uBZY,g6IXbRcnhE[oP22)?_L0:_:lm%n9FK2SX6*V"60NT!`Z!fn2hWt.=#7[f/)l6m
%I:FQL)g]0_>']fNo:oE#"7oF/3+"Kn=!\L.l>#jX>_o1&)M47;+O&'0WJTGen#"`LOpe<d=bp0p+hH:!F?'&:jk2@V*4+Nef0mtb
%^$AO<7hM48,"25d'"Ot&6N"M_(Ia\&,<U_$>*YVu'\El0`G&cjf8]R),)"*[V\PJ+L+pQ'+;jM:L)1-/=1ceOl00"&!Nn5\.]%s'
%Up/+GGnZ7DlhiAPXphDW4UZ2(;mD"q%R2-0W*F!LR:BUrIg(ou:rEQI-O->1*no*HOI]?k]gKFP-\>e:2(*-X&ggBaWHke9"YA?=
%'sS\tDSEm;TuVQYN-i"9-R.a/[%R!WBsI/)m]'04P5udejq>Y5q/bBGodF3^=_Z<bHYOa.;VMkT*f=1V/?n#ZT-gdO."jJbfKXWn
%q0Ok;U8U(*!*C23L"<2aC3q0uVaC5LRY@HFmb,_(RiP,H4o[?+/@ZQQJK@<-.>G";/[oqX>f@eZ%n>7DpL$>+9#(5>;P&6oqT,Jt
%WLPeU.+1]BK.l]2A\4Eo2N"ZTl@er9E&5RCBHaK'!nDE">W)8$%ls@;d`Eq..]\ID2e4planD&sKZh_Mh@188S`r\eB'!N/;PjAR
%2PG6LV@i3AIE_q!aSC/J<\]`4Z"C@4L<]>^2kjX7i#e#]mP8"s_"2BKNFsL,S!KX:-C8e/[3)a)Ga+[HdW"JN$;supNb*XH@tQ2S
%4F2poTO8`(K#K_UjrHk:YSH?i^-hU[AhV@S;Bk"J/I@\fkU5"_=18oMi.`BMM<grkS!e2T^s#lu+s)V0BO/qrQYI2YVt)IO!J:='
%=Zki+_O_sV7W,0"mJZu"Q\d"V,T56265rtB7REOO6ek*J;D8PKi#=(rg7lT>9nK#:>0SRR\?6m42TOs"i$X?U#UfDfV/\=%13pK3
%25einMR_Rq;Pn5t,>L&EceE^qO;7h'G,OK$Ji:3=pZfe=p8ce[F54+ENeQ!s-*n(3r3;A8,]qSAm&,X5CDnqhUo9=0-HB*Yns3pU
%=[c<8RNiW!<N?L?j(@Eo2:\/d]^r]M`GJT'F.c!-i1,T@W_4K)K&Qs6OOeR?CO=/3::bVLLLp.ZI*BT%^T4uIqR,'8g"iTK%9P,c
%'*=1KL'&Qkpl\_r0HTYS!WjV\(*L1:qSWpgJ<8p]#AVth^<bkF_/;*Y'Hs"jYCYP_ch)3uZ<eB<WfV*85Z75I0\ETt#+rK&l2DkE
%hRE5]B9m)+\\q,%QC`fR'g(*]NiM3,gNIDkhZlH8QgEb;jp(!qloWPbSesJeUVhC!j489NGIuHVV._;J&,K92<o8!gPJ"K.3We):
%O](R),&O4KIJZ^<LJA4qO:ZRJ<LWO&oQofYTL[1lhhtB68n7uU9M1[86I*X2bGrUMfIaf:5\d+&MnGBKb&W.&oO!1H(TSo6@Z$Hu
%`X+,SqRo`BPc8et22]U)\>WdrUQ_sc4,.cRQkB1_20DZ[7r(B%Rp`'@Q._p6Y?Ct,m'Lh55$-h>L%f\R[X/a7EgNYr&@O6<`-o4%
%)As27lMGR8U;o+O2F_/^6Jl(*)[23bcY#^DM8d]PI&'',fa>&]k9!<J`e5:Q`t1&L/8%I^r3H5H&rmqF)Xtqr'<"/)b56\V'5)Jq
%^'G2UO&J_n,agoVcQ1UX7?B]3T%NLNWA1GRXpC!aF(%`u3e3'QAGedI1`\1F3jGKTX&JR<Hq=3rUQp_Yk']'M>\_bAf7Y2,WII>t
%I91hsN``ltiH5][Gm3Pfl\q.`%g4!j`i#nB+rZ88h8_cL#lDO2Qm\]NDdqp1iOR]*Mf?#Z47^FOf'<$k@3G4d_m;+ODKMfQI8`L<
%(0'ZHVaMEo/chc&oif\3rCIG-KgOGF.BFE/=r0.KTpW/K[]a,HJf%oN!@4uDYDDcW%dqA17G[&W/qHhco0jd-El_\F)p!*fR[56j
%e8h)m`e$<JGAUR;#9kRRi7+Nl"X(Ru8Qt3MQ/,7:Pl]d<FJWFW.n[)K,tV-$XQ/EH.@n=\5f'IL\g!`[d[7*0ciYp=9qWK3P\MD6
%WdUq2!*'\jOnR0sHsKkP=71cDkD#QiV_%]F*>>^WXB=9<ftW,Gq"c?!IrMA"1&Ke@rc'L/(>W`ZD.++piH.5@[\?3BVLNY6dMC,u
%%Uqo+8>cgmQ7ph#d$`k4$Q$CAPFY.79$n.@*q)N0_t<69I*bk/#hkU1e!F.8pJ0cTLOT:s)R;[A'\ADd;q];[gu.mpK8>Wc6Fp`D
%Dj?YDU^%"U#G@YL`,-=^@1;;I;.<V-7I"_r$mZPr;_4seaD\=M&KbKVV0_>]+lcIhR)`^3b@k1D#jN+^MbrZ;4mG2>k+ECXn>E:R
%:m<V&"H_ELOt]=sOk,S40GcWj'*7S"pH3@9_h7bV[&17M\+/;tI1)4qP__#jA\N4j6]q"A`HjGY*KSU92?OI(Z>k^Nr?!9Vk:`Sg
%"hUV59o3!n<X$75fkf62I[9c,+:^q&eJ&Q8P]h<=(08RkI]fI_LO2IK`Q$)AGau&AcC83_iNPEtXp/(SnVZ.OMf)aVdAol"YJ9-A
%in<F)5h2bZT<Aup1"oWb=P-G7.0_,94t4S1S@V:G*Qgkm=c0$2::IA1otlF;qjrAKH872@HPGkS4V@d(;"\6ae-Nd/4[kX#mt_JM
%%C>8.h4GD<hVTbu[B`K^:*#[f>C:orSX(.ndIGguq*"-KJLtuBSmF"l+!VlcH'SU0]rk4UTcL+FV*OfieTJ"&ddlAc78Z<9l\DGc
%WogTn-l]Sih:dP#OOg^*9D%q,?qHuPMC"%pJ9`>ELo[LE)G9h46uTP+hC!2k7_:rR'H;'@V4'o36j]eRhoe,14Y9M3.),i4giu9-
%'<0%dn2M(m$u8;VVg9LB?XXn6:K;T3^sLDVMlpH7+EHo4`J;Rc@\22u`i\ARXIXh8^.PA6-Yuh9l'di#`b@hPdd<'BH&ipZ7[KNo
%BNS3CUt2Y+VR13=M!tm9P'udOMd83?/F:>=mHQVa_G]d?kk\flIM#KMdHSDs`6/t53EN#b&NucM)3\9,7e<"G8n;"%A#TL.,WUpR
%0m+i9"<Y/0hkdiUaBZWbBt0b;[63]#O7N:dn5mP).?0Bs>m<l"fuDWNXT,s>.G`t.Lc5<-&)s"KK\g1"MP![4[J!fR\iOWI7Fu.i
%Uc#d*5,&<s/]uSMT&M(3WW^2S4!/0sd)hs+4H9!JKF2JF1E>r*eS%OrKJN*fd.XngVl;V>gIYQ`4H.\Pk*^?Q^H*bXr7uEQ^<:C!
%P/Ofo$u^FS<2>;-;XSnabrupl,BRkj$cAF:5hXro<78)@=hmh'&/FIK$L-;\[PQQ#G-dgUD/nGuGGS*bZh6sanBs/Z0br61&Ia:g
%bQLO7%33`M>!99CJ5/9,Ufb/X!\aiA@Ph$)l5i#'e+1Y85ZQnK3pLm:JQa@#beVN'S5fWehdcP*MC<\q!WJ\N1]HIYFEl=R1tZ@U
%HHTZqWi-"DIk9OnWPn".0s3'`$8sNF9)<8!@&&U1R-,;\$SOagNH-o5an2*'(@?9DT&m)CfqLqS*-d'7Clt?W=Dp^\c8WGFSU+e1
%Kr(1HV,Q0D<UFpg0j46i3-IM\Knopk%s`DKdAuD2BdnAF2rJYYPk^\I0Uqiab70Z=Lj4#;HJD,dEG_9<]b!Z=hPt@!28T`YT_)*V
%N5/9"*";MZWnhIL!:'Op;&qVG\Ah$1FJ/&HgWSFD2%&ac.r?0,N[57m>''77p:CE^FPYE@*F,CHWF><95OsRgO*['8Fb_IpkJNa,
%j"/1e=u@B8mK7!20:jGm]"SY!a+(>(U9P,[q>,aDHOBcMD-ePrKndL9X!:u"qJ'*%>q5?)P0A+:ik94/mQgi@N_R^O`E*?91tK&C
%<ujmL9"@7VHaQ6i$fJgI9C%0ld/d-'X,`2aOE38>&ATWEh54)I=NV2N&>To?"SXDj8]'c6[P)uQ[8D),2TM-,)@*6rf8o<H$b*X:
%[pW)t9l=hX1C_R!_&=eRQb<7\;(?8a4Dd122\VUJUq12Tm*Y*7@Z^qNa2^$VRLhg?JP4m<*DK8?8IpsZg1@q^B2Q'MZ@\2oWm%<C
%,$BQpDSp2TB:<e`GmN\uZk3sK*2k*Nf&Vph*J2rtC31E)ak.]'_d117Vp;qR58O0jWi)aiN_RC]@Lm24Tb>8rU>c;5I$i#A`RaP,
%2A@K<RAd$k$=MEK@p3WdAr-32`q$!mNG@$9*t<K]Vm7ILqq,3`U1e^'G\?YTU_pukm.E+Ke=Y-nlNH&G(FQ2)Hrcjrm57o`[V*Vj
%EOm*FqheYP[Y""oBH*tIVt>GF*M53Xg038joun9-E++`mQWfL9%d4MA\5]8"Ni"*C+ZE#AO7W-LWqesp;j#QU>JObf.bDLW?-oO)
%ILh-a0"N;0n`!SL:F@8R:k>:eI1[F(?$T>:XF_;TonW#l1CNBQQsm3%\T$?trc4Ju")5A0RMob$DTrSQUX*J_El"&bTn:&Dgr$(d
%$E+5%EKdC67dTu0pGEE_$]&LrBmeZIpN)mN/c+^E^=,D([T$6-S;E^(FOtYj?joa0jpkj6r&7#:`?q"(qKm6W;e2+hQ8hPedTZR]
%C'j#l0^;g=^*m0"[USZV1RL4P7!/!rCEBb=2QUI^+'WQ+!h.0VBdE5g]RMP5/!t@/G.2qUY>Kt%QR2_]h?I=r],t0RjUl!s'Xp>W
%kPJ_V_/Vm"I+%.ln6"K=>qPdueIE?0)*(QG'VbUY>Ja6]f#ick(.QY$Vj/<OcllOgMEsCbC+UsGA2S=^_cu,ime4#J[Ddcm<!5,V
%\DSF1dH#UG2uAee63i/)Fc7>?$U46WU_K#PigGYIQD*--I1rALfc\;;,U[=Urjhk(r,"s<PpO,sC+fsb9`B%*@#2'?4o\IuL5h$)
%8HiLH_8d1_m.M2%@-5#g<E[SF[pW\Jp/71)2JmVBh?qZ9NCdiM'W7J:o2f^DB0eBj5kKXUqj@$+0PD4cR]_cRij-j26u(SS@>`k3
%^;.6S4pB19GSiUEc.]@#$kN*f/7+SD^Cpk]PDbLr&<)I)lI/t-G1ma+mP0,^6%n#Q/eY)eCJkGqa8S;rZ?&4;rOb0YHQ,Xh%s5Ci
%L,RD$<T&S9X8Ym]UgB0e24X,,/)<AZaa.]++EC-+!dor@cNh[-^EV4A'RC=MYGtWXr%X/,kAd1oW;r;(hP#8Gbl@j,O/V6M],NM;
%HiTL0Mhn)R?5VUg8dr%QC=ZR$>$O[=_gk,u%bPat[K;tl,!k;#D9[qS+s`QC7aDWjSe%B(,!m[#TJ9\iO30OH-TjOfXhH#Ei!cb-
%EB'R;Q>kXg#P9pZ5su+NDZB?<7`3-Sa&r&uG13Auad<-t77B1?/!Bncnp;VPPS`7d0GH*n;+!'R2M(r7g?cT0I,XnnHRE3-"U-Y;
%oqg=]UIo]-Oj?f4&kU><WaH1&C3r%kgbl)SV4(JH2>Y%he7MiH*bs.i$M04%54:2=naTb.EoFI]7lT;.hphi?oa)^88!gopW5P`:
%SKH;/E_3hg1>B<VBk#NVa-O-_O0lZ.1-%chqnS-lK;Jg20]mkql0'!#FTWZO8^Ta=4uS`KmQ_G9UI!fe05BY>8lL^OmPU#^n&IK6
%P:-@u20@j3>_V<a+h!DXYs=GaW5)M9n"/Tg4g3??U1T$!C\Kh*dpdg.)JAudE1ZG\a6FCDHAaYZ9\,\_3X7R)j!4\J@ET%n7N@U,
%]c-<u?4h+W!okUp*N%/tb#8L%6c:B9b#=A!jq@@G.l'=ub2:%_VI`0d<AQ+oJr.qcf4RPuZmAX92I,26E]:AYY_NhZ5^-JGnZ@ko
%I&0?g14r(R?>PD(,$CaT:B%7RG@fh"lY!W.1eUV[?!Shj*9F3KL975dT]aiY!R_\KL`h0O_i@g&&4D4RpfNP4,mPD)m'-)+BVDOO
%:G(p.n7TQFk^8L#,1S1o/nQP>+(I,(dE34DGd.J=EtM>;C\^m/Gc?sAF11[A]d8ra?=6q-qec3=qGc9nV()@U71;de<KeD+eZ0&e
%;LqAu,6^/t.GL:t"O<#oKkBA<"dQo)iulL2Sa$gHKY04HqM:gFBtuN;]t.rt@B_YbUtD-Zn_DGO<Yu^AUj[,W68Mf2p!BqR6$cr7
%ci)-`MpkK:iYf,r8rb'TUgS:#VPSOI*H>AH-]kjC,.$W;PT_)uh<C1K,M/VK5X6om_&KqR'?_"K__;*aYCL?*FUetAIY.4<'mX,N
%Sp?+/$o:O8,b!Aq>R3cegqsA[,Zi#\rE@1K:Lo9%-nQL'>h[a/0em#Cb75;lRE@TJfAW.^do)nYTu'&H+"3Y6l)pYZ6)NKPVXJHR
%ZV>3>YbFbIGj)<6l\+C=/=.+S,*uI*a&C;sSl'nLmHs6VdmpTPZj=&NiB4$@bH*<1HEC/ck?XH)kNRPheJ[8:8kK@ME,3FT0%e5l
%=9FR$IE';p4a1Y\U2HaU;i=FX6Rqfmr]rmOLXb7p$>&NB3nKqj:!1gXO_XL5'be_][^5oeF5#-<&R/$p65`N:Yg951m;J>+]BclX
%^kS(27s?-+<L#S8jCI^I.@5A7WnqfV^fP=F*#Cph[[F1Dlo;q^*j5'"C50R-K.@+DhG(8HJ-+emaXSDo;=D5%$\ne"'rNi3&?@F7
%Po#$!&<UFpTuj*0G>`i%dKr`5^utPfXWR7D0<(hXZ:"=)NaNY1dn`rlJViFK1/!H%\Aljt6,^b>#j<djW>me0&a6\:7d1qm4@g"M
%o+tu4WtW$OFGl1cpG_OOKt.)q6%1ipDCPP5@Y\p',u1Jg.faHQpR9D%8AqM1/8Q08WCE$F`C-Nj25F5ub'P<)!0'3eEYVH\A>jB$
%Nk\2ZQ%AT*o4$h6OU!qC485NI;h8D2:t\se;=Emj[`t0\,JGa[jhMY,#s"QRj&O*3l=F<j4[['5%?8gJ&o%>"\T)d5o2Lit/rb0:
%T@(>km/Mrf^(J/`<S!QS18*)hk8?Au[l+ZbeV$<0n116.mCb'E@7/;c(X;a6K$6l5RAK;k^c^NbRXZ_&_:a@\1*<P:R1RePE!FP]
%'4;m4PLQ+2^G_-3I;JXS<0$uA?60J2cuH+B&3"%>:h($,hS^E7*LA]09S^&S/JG&WTW+WcS(XVW`(sTDpP[*jNiZ!^-KO?FO5V7(
%a*rZm34r)$*F)[U*(9!\VfWj"MR9+pLF>AD0r62QmLL$l>g'It.[7]H#dC\so4CbEI+7<NUIr)QoTm%As2a6g2L&]eihNnVOlL(.
%f*)3;Dt?BUk,Xm[a(RZ^3Y\hOe,3lA)/$b23c9`dn[_f'>6jV+de6>i3>Ykk#;6+CbMU(EWWb*P<N%ch/UgTKH_U),jV[EJBGul%
%Cq$f+3(."I"b:<RG#?]!;Qo$NPP./Q`aL0*[I9f8dt0_9#6k9(`K"WDMVt8&ee@$K?ob7!;_;2VKJq,RC2_=1DB(oS+pX(Z:>K@G
%gQ_q*ZJF2%K1^\aXUH%JF5*=.k_e*YX]#NNTV"g;%WDF@-J^@eLE1e72Q=cf!2l$"SfXiqeA)5)69J\Aroau<mtp6/rWFY$Z3;#X
%?-pCR8/sA##!C/T2nFpVjjK$Y3prlP>W0hiomEG<#)gD5m\u8gSZ]AkhYZm<;ad;A4*Xde->7?+A5lIK;=ddWc>"h+!\hrbB%4*9
%S0GJgWa+9S"Zt"k\+G%42?3hp9,2gD.KFg_^_N@E?;]/EjW(4+MJShJp)#*,MPhY"9X\ATT5(PQ[HlNiX,IF^QH,lS\r3Tr5;(mR
%*le`;+jb[6)%)^q+NmU-TW<CLXt)&ciBLW4kk*VWX_Qb%RfV`hn+M=f5uH'l(WEQ)\"'$)po67@)",CMGun0,#bn<?-)h-WC+'d3
%gpdnJM0.ut!`l8F%FqJPe$%j6\QZCUSlNJ,;!W!9=6RT+7TI]f/Z&62Q)mPY99Di[<]<li@QkQnA!+D[&L%#<TV3r)e1FZ.DXPW#
%C:^\Vh]\$'7Is]Bmg0SPHs45">O'B>Io.K<!:%T<rYBoYRO+$VUWB?JIKN!#J_a1bd:6eu`"bl@QnBXoP`WNr0T'OVAH1QUht(\8
%',(mUNs7)o^g3`3.0Ce:I(6jC"167][m;B9705n+=QmGMU`hLFb+17=-Fb/X1(h1s](#7\-5WCL@Tu^?;/iu*5-PSJ$ICc]n:o#>
%!e0u<f[=H-%ga:V,;/lOgU6&D[=0c6YM<<V]rgBqWFcAj.sF^:GpMbkGr)]GQdnm\<%[UB7[\-!NpV%dS^5&,SU;d`HtZ"riY,J"
%<*/3`!nEOELi_'S]hls-$4r)^lej_\$a0Z3-5i2J@D0%i.n%QX&_Q>opYa:1\aF5O,0&If,o(Kiq;h-R\+91C^hU(/3((FBm"fFS
%];Irk`0BR&0nVp3Hm.o3XfFq#ACr!>][^&9"7H3p*_s`<<C>+R_Q?_?$"0`tVYV49B(^'YEr,V(']6rdQcO0i)3rHthoKmB.%nl.
%00Rq#C'X"r23LSV!6MDn1ZtSmh4B;>U;O"i:e1+[go6j109$MHejt:^DOskMcQ1d^\-g*e(Ml`2DI8O)Ih">*bCpR:lJ;jHk#7bP
%*@a-#&7AoH]7HEYl3P"LkQ^5Ri&H"@2g7Hdri$Gig;=JW<TI`!#]1mL1^31O4<>@_71`:'O/*%2jdk0&(64Hs,cfgR'p!f8^#5iF
%PlG(W.0L-&W)bcESIp$cOE?*O6A&1MKM%+*MI)8LZ>PV6pNOX,d)pJ`"A3fA6)=EN_bX5X;aRD:@oZS6aUN+G:Xmuq"P'hpq"U=W
%<mmQJ5m8V6q\KEUULtd)q7Br]1#fEp9Bfs+M!#E9U.U@JWWPq)FkEK,_o+\A):]2;??bcCZs.U_mH98%a^%M#h_.m!nA@l]`Uco:
%N9YE+q-"BW&6TTr4XkVFnWJA;Dn6&b5%B:AA;?GI=U#27kB*W4l%BQP;S=3<KiF#hbN$X9TNad8:d&(9Hkmm"mpr[bq=0Rne2lUs
%[,b=L8I,dBRAYnTV?qqi<cb(npTMh^/.X(P2-T<,RDKskfuYc5s44<ZDkg1(dc1srS*cdC[R>&IP2^I<Y"(r^dP\""<i]Uhjer=G
%#jWi](/>nB8aDY<>D$!GD1hmq\4\t;Qg2C0:8TN,Q.".Q.nAo+I4Rgc#f-=g$N9NJ_f:6ZmEH=*SkX3-AO[,$fda"*6P!mUOec!R
%5^RQFYWGCE0+SoXc.%M7BPS!@nkUm-G9Q'Q2)+DY:0ii)'_HL#MLr@/,3@Unn6"O\Qop]=Qej`&n`1X"ehdqAW`DdVqW2UJCK-`:
%D5MbXqcBD8dNO1!HnXiNdq](JbaG0.;Lq&c/>Dj]IZnouN"cotrE^^0SB@_i7#X0Sg!>TVC2SYUk8<&&gdK.bmS?[#cejg.f,(,"
%Ycho6h!^k7q$SW:ECZMl!85,()_DXro5*=mFOE+)F,P39;#!pYVG,LK:Jhn:B%L2:^#1rAIO[DpM?T/0VLkVgBl4W>94"[!j4?C/
%,MqEs`q!4E3:f=;ac&;N&DbOR^=(m:p/JHnW1\g9$4Ea@Os`lC&/N:YY2I0b[#IMTgWTfnIBS,X!k_D^)7I&rKo[0/,'jZF7%QXP
%Hi1hopLP)'aPD)I^GFLThDSBAQa/0=`I@IlYdi*[@FOI^0:[OqH:/Bb1nq&\MQ6)(XEE\92+p%i8hFu&G^rYmcV!&f1'(k*LjeqE
%pZb)16;c=\,GBmGp1V1_m3nfmTHMaaGh-XXFTr@M-'Vui.3k4,[-k1k6W`4"4`Oo>!icGJ"spdWTi*SI&;)1V48:>d2-G8S0e-Pu
%Z+8#2b@_\]ekdDQ&N`,i<M@N/[JC5\p5*J#.E)lL5&"6T=.B&DggIQpD4+u1LJh@1%O;"3H=AD.W:cn'U*Y(pmNmPm:7joG<*mm3
%3O[M":S-I<%dkA_A0BA7:KrsODQY;Z<:1L^4O2Wjk=r#G$eDiY>\[pc.aPQTfB[_%P6,7W<Xc1!@Js\bLPh&CFQ&8Cbo;4m>cmR%
%Weeg5ptl)=<qT4;Y<g)on8@S![!%S\YD\UrT;RRM(/$,B$5O*R_S[g.r/=b:iEl+1*CNnP44ahG=D3bY<qd$XK;'93"4-'Hr-Gu,
%b/,sGWj7$#kY*)kYubm+8?4ZS?JRQ^+k"k?m0-.SDCd/oM0\IAA)TTPmB3_q%dbWc(*39T7&A8,l;(Kd&S_)6Bh?:)!.`G_<9n1N
%GAQ#ajU0MCrRc:1NCZ:u"tu1C'Jt@Fl]5IL5T;\!/:T$9]H-0#n;P8=.d@U('A0J!>0[.UOiOq00"HQd\4_[gF7:Wo*%PtZ7Aq!l
%:7q?NP]TYY.\BIcb/`NWEB6"bkCdHRYIK)K>22B5IPdGhR7a]r`AN)FrS2Z?W@O&\ZEi<!6W_]EXEO;qjbajS2dTs,J$e\6LCkf>
%1*_i!j>L"a1:Q[LfTji7(Rll#r$t)GRE.EAQ0fT*<4@W&>ngO$E*Q"r@7`]nH\%@$jVE1.IBpXBFn(S1C-lOra=&N(#<"St)91@r
%/&9#iOon9Bb$r!b4_/O,7!e[A$anq.r-rRSbGm-aG")90rI[/r(s6AWAk$;hD((%1^i%eA,E>4Gi*0blKoQ,hH]5KZpUS`>8aGfc
%PE0sia'<Zi-T%jE9gRpQ15dCqj6nFq<HH1RIuL(`kpu:>"m?;*iRm<r]B+8_JinD81''-Y37@5u/A3_h[W!dAVACDBC"+Xo1Q(5_
%Q;(YaGI4b7NJK:c#jrt:_6Xba.eR*=WXb7DkbnOP\K?-(DckPu*M:&p?]>Qh2]%=JhS+L0Og_fPiHKVZ0D\Zl"(>GM_-@8JTdQ[?
%LRLYmfX<A@6tIK(bRIs"NM"6=6(AhD+qHIHFgN,meLfT3hS3cC/XH/([fW/"XY_Qa3R3G)=h%=_FFR\.WFN#q'gGIa:IdCZId7)c
%I*48D9)e@\+pSk_4!"9G[V`I)hQh7j5&NXj>,>4"clChA)AfgDX[@uZFW1K2d`]M7F9S+nP&k9XH*et3@uT2sdXbIBGJ^"sKdR8j
%qWsr6\+PH0NTcigi8R(sUJS\@Y`1W;qIH<\-lQ.Y74WMl=`CaFs*YU]e+UmZ,8#&+:qP36`)1c8(hm2//<f2$/8N#\>ECLt<'\]s
%cLk0D%KeC,n]jAF,oapQ)#_o#F[nnRXTtq;WiJG(<i%+5cCUt/3)(AQj2NZjBtQirBM?<)#3k\\:Nt]mfP>=292qFA,'PcqX%67N
%'WQJ5&_;NBT6-Ao+dTn[U$#Z%ag&)4Y@ENMM&+'T,^3hB*(SP][V0."\>66?C)o*&_JPfUJYbZRO<\[JE7bKu3:O"=.e0sD0H9Hb
%+Qo_>?_f/RCeo-1#c^YDpo\C5'J8<6<=Y\YTte7J2`j'Yf[S\WU+o7Hml^sOn?JI&mQnk$[De6A@9U`'Fd-W#mhY94AiQPBa329/
%\3Ha)<II=3'nO*>N>)h$,W@Kg57(6WkFh7`(gT%RdKs(EV;Z*U"5OD;]jOi&2/O6KUNqeXo2XD'@-CHe11#@_SloR360$Kb78#br
%HXI4I'GiD<!C^X#:kc,Fklnr=<kg--($IGTqT=r.0c3rl>BM)KK"J4`jF?Og*EiRVf;cS5D7L:`hU*('.hkVd7`'L-Uq<^.oeGAi
%QO3LpMTt_$mq!)a[^NbqJYJH+U9s[374""6k8p@PdYm3>Q[69ZpR2aVd;JK!b#htCXD>ob!>`)sd1O;rL1C=Tr)k\O\XYOl4Y8k3
%FbG/-QktU/PhUWF\p_Csg3NPS_nLq1,?iY.<3XUBS:U$,@[e).iq9pU"fjYIqU_H_Bo4]$.n7V_os1dfN,i>r,ZjX#QMRgP?WYgs
%Vp"Oo#mO11o#LXh[bk"g;V#W%Fed=KWjoYj"0rDqSD)X@AAp/Y8=LM;3#3ig-1oqa6/]]'RFWiHV2A\qVNV%g[5\IF.bUr"aE@,l
%c0FVJd]'EOK/Qsf4]?&\YXDF+4Hnl`Q@,DeWHG8TJCk4KJI^9US%-];()9G,g_A8+:tb/m`o#)J_&U.MVoFui+R_NSissYMP),qO
%_/>+8-J;NQJSbM/9p3a&7)nVf[IM1h0nm!C^>;%TR\%r:A\<?:X(1eV\L3ao"a>;C)Z/=c8G>02QJLP^ih[?-T/=7#,U6b[&dY3G
%N)s=/gr*aH,`L/7JKr($'E)?/cIOc$eX_!OQ00MBFl'O:N9a*eZJKr3*jGT<*#B,7cEF4D<mK6t+!m^Z7:`]'B<Zu6E.6;olu=<r
%;n+KC3h=HhQ0_\;<&u[]qP'Ug&h>+*qD)oK;d.=^98)c?jXrI^:W?Q#p\Rii>,pJ0YaQJG>^7Dq"aSFrRr$eWjjha7A^Y>tj(T)/
%R3W+N@$,Jcbe-lH2%O=hk_u-A2)\c/.9l9r"B_'>'<J@&I7nb(Q=L4QmZ.%W;(EK?+a\0I5C8H<FdBVG\^K0kaT0!gLTP%Q;$(Ju
%CZEKgB"6E<\jJTeT3G9tXN5\bSkCoC?bm3<B6u,@K#Z%iSH;Ui,8Z8j`H?'hYgl!KD[5"1eRLEAE^d+&ahc=3+<J_Vf2C+"f#Ts"
%Vu_$p5q'7Klo[oO3PM7<:Q!OIFi2RC553ucZ-_`ciI:JX8PjUcPTuQD);TIgs#jqmlUF&Qb8iIe<2MWcc;JgHjQXK\ZkL)E7l97@
%Gdd#rqL'7cGuEH!1Rt)6gnTKnV=?\6CoSl=:W_-MRVoD!KX,YpX%U$;-s[j5/TQG_XfJ+$6ic@H.72]9Z'?l[DXJj&lQL$o%l:XZ
%!VQ,rdV)L84s#^@d2o=#6QHE[9-^b33;.'K)68.?o1sW498clNql`?4-uHKd.2!h48N<B@6V=an2<kT>"Col-2G<S_7u>@RPL(Df
%e&bZl"*="=W*-O`I]H9p3t;TYhX=J8@:!8k;C[Lcbd`t^P83B5^.D6.PI9u#FqL0b40?pVqJ_Tp>1Ks([!duQ9g?\c+TNZ,EC"?-
%EO!Q!C,N9,#CA8Y3:V.rIO:\GMY>23h_"SjP]mMVWp]I>8i9Mb[SN[BbJ&ep[usea?nV51/[EW"I]g]1FUQ]4X>2sMK18U3MmuK*
%OUU%RKM=A`MT0:b(sG"!W/@$6G$Kq@Y&6lN:KqjJjsAph:FGe*,j&8%aVY3JkrYe-nOWDPipGu#qm@OCnL`o^ShL!0n6!ZUTT&Ce
%LV$58H?LuG=nHWF<.%W:HT"p1Cl]MjC>JQkgm<HNlsTVglj)M@*S]W,)3aMX)9=^ZLQlIapX1gCpl,V#Y&0I)9Y`T3M#.s*E7lWL
%q9H-"eSU$=i$L"bfIdg;`Z>ID/CL$QG`D)AhOkPe3<KnnCfaIfOSsiZjl-!sc0518C"Fb'$T@(;JPF!)6^B$/fF)J7T#F[9mkr)X
%,-GgA?\Hr![T2LR6qA"=EpnTCb<bG?f_\LPmgl\QZ)Yllr-MF^qQ[4K>/r2-QqXH,'sAlE94?6/Y)S'6k^!%.`W\NNKSZ.[80+t*
%js'jcm.D)rRmsK;61XE0#cT6-=D9:(&"GZLZ7V8<pqAt6EcK#%8Tk>^a8B74)fK4:Oa<k&]m1i354C!bAe]e[Oit>bV)s]SRqWd6
%5%-lh^KjYXhcaU!qFlns-J2oig8lu3nr%u>%'5u#DFS7L"u_WY\FN^C(^.kDVB=?j#<:%n?Q9q^J8:WbgE.2NlNX]DSSqu5]+g9(
%rhT]bPlp[jCJ'd1:EVt*i(.'S>0!#*VG]El!=YG1/^>rk3XINek`o'E8^+G2bO??DZ\(+bVWE3?0/M%>B/.Ja8glU`[8>p`04@p?
%0ARFa#+jbsbl8^,?2tY4brX6?..'WI^1+T6q*%FaqTAja[lR9'Egek\4+3p;@l]pJ!8uHNro4r]@EjoUi>#S/Tf`5dUS.akRcu_F
%n[bYjUoS+N6*.SE6#4Tr<ubSSX$VsoTQXDpaI02Q.QuQgYLmATYKa4l@?ee@oe.($8.oWkiiURNNZ46/(T]IaZg;=;@QP"H(Suno
%*(Eb1D,1sl6r1&NBBiiq!@6Q'8uNBj`u9/W]e>4[o6p@>4dJUs$FZ+lm4/`/<o/\_Z.LC$P8)geGj#0Z9?&*N@-Kq52/'Dn#7Dti
%<db$oW)IW@cEB(l/.[b5)>t?iAO[<^J+YiEp/n&EE$Z-$1CIA$=U_KKVc%=_NLsjV#'O5*>C4tb_p'7q50_//F/.V^,JT4Nk@,JT
%YLpnIIh@dr;739q/7:)35F"/@G(TP6B(]^%rbe\O-M"&qA2D'*-hbTiAp[RpQp$%4'%E&!q\#YH^:lEmYt.sKgD.NtQqIOH[eDA#
%*_)^q/t;G2qN]!skKC(UY/)lmBQmp;O_jFc"A?P^eT-,`+tS=k3Z1@A5-FrA0;0PRFX?GrZg'*$CbEiX0e:)h<3CO!Xb#IB'^j3]
%_K>M]l/,k>YMDXB5%naWqW);?Ka6FB/5@an?lV/e;=tIZR?),QrNhV<VE8M-Q:@3R]<A-p2q2,J)".U:"2QAST"(`;.g+d\k!YPK
%Uh:MrNM$B1"B[%(7(HE%j]#TImi\OsWtTaC-o*&5HY"5Z[F!S6"-NMUYPhosUOh=i.rY6!PL:MQ\P$<"g?tiD&7BKh:O2b!'E<?1
%3pi,qqihAC(/+o.[aUjSp(^2$rd%F?6!/Z'>8:]iGc9<OM(I?R-@a(m.iktJ%F-P!S=NR3^";./nqQDf-M@5['iL,G42oL)j4VdD
%"Y7BRcF4\MlpIP=!gA/&VOoIG_!=]hn<+u3i<cWGCpq2d@2'hD'e8ER8a.`6$4:ms*pSG;a\[aO0DK0Pl+m4`2;WmIIGN^"n>q1(
%?8A\p-j_hYasG9t?mSU*)18&pV0_XA?)k!o*JKML[b/k:fKZfHc2t(Ac4qN'N6[mFm'#usf&&2Qo>]T;rV2dqHhY6_7%>65cA]0`
%q2$W#99R\oEUGZr3]E=<4l!`H:_?f/]Kub-LpF7Af'Yp`@'d+/DT"_MH$1g6cjmRZn6FfR%Bs-pL=ZVlqc4o@UkdmVT;8+HN9EFQ
%;@Fg!Zb)+%1EW.q>VcREeg?D)C$n_9[ahT,F^a]e5O2BC!]FJ"q>X.GnYhdi`67_bnG][(!\pJ:=d`5=#S<Ngk?`Z+$ss#gq/t!S
%ZN\]o"mD<f9C,>^qTX>[!Cgdem9G:5N>/q[p_=#Kb5se#nbMg$[h6L*$!>4I'aQ\k9'#em>G@!Hi$<*IUs6)]9OUU(bB>4T3q9GB
%i`mnp,c5['8WV&<n@$Q:<3WT4o"#X2]pEammF>IbT9Dp`6d8cIQc]C$i[EZn.JD>LE9)D8@YucIdRh(\BAuO=/_^OhkgO[SI,PG=
%]A>lfEsLdbi8F2\iAXf?@-Y)eB<KZjfCr'A';K$d0EE)Un-/HSjT]7Qn<M4g5/4'm-T*2Odr5.pg!\3e2kPP*HRr?Ko./`cDI44d
%PJu;o(*,mr`]#%P$t+q&Qp\"5dHA;SV+3F1k+XZ!6EQ3#CTm06rH?*J3F*-NIE<mqM+1X'Yg94rT!@MN5.ugp:8R^Nl;c6i0CEUZ
%\%iNaY9V5mV%&o@mo`.bUaNd"U/;l`SNJi#@Fsj*]%IR`GBQ<8gg#4[Bn>W(Crb<7gl:bSFK^?3J$Ejr3>T?'DDb+Z+Ln=."q$*;
%FK`RH'H0A('<mZm*W"Qk-@t)eH?"6-\.$AHs0UDLPG/q^OquI0B-?A7Eb6til&oQ^a,MsuDLc#b^D6/RqFaUE:FIt?`'Tu&a7KIo
%KT(poB/31h/9#[_\;-=65oF1[n)JlR#FSCtkVsrB$KhkNVmR3j1--JQX]pFB5DG;BnEQq,Ai-h9LWp+7&t-VWq-LWt?T.^M8"t*Q
%Oq#tDkuC$F:H@XOG,=ptHT^pc!m7&\DmrjH&&"qr(umC%EN:'\$b`OLMeTGef)hrj8i++BRnBJCY&ep1SB!m0<GZ^Y275+ihZ6Xc
%<RBMb.\U3Uj=S>#1C.5GQ?;WbG/*MBT#/B0Im@7<\U-V5cs&HUd'DPM%s@6K$UB>Qor?s^Mjemf3_m$E-M\%<d4j&cO?@Z2eiA=6
%.-al,)<[5/4+u_VPRT//G-&HEA(,6\S"Bm+U)9>j]YQFCfX:u/J1CuqI#*O319NFW*0SO[m`rm>O(8.,EI/9_+"\@&/:rWOKDKZo
%+ndCgRrTVhRc1^fhDOBG3:^Lf$lIT+^6aV-[SNq94?7CX<s8!fS?oLV0(o0l67V8"h-:@sd*&YiF"Cl0Ipk]F\8hBaQ:8D$Q[_e,
%GHEDI2t#CtFi8^j3%'8CThGiTDF</"K4L(Pc'C+;`b9C_`>n_Z*Hi3]GSkHJ;WK;+Dk8sqo:cP@59E,]6>*Sr[Q_$<**;?Xr&l:X
%69*W77ot4<ZEr#_]@:qX>e<at6)ZPN+Te:T4_EgOGem$:B$@C4Q*oZC1M&c3%>IFkbG6Zm7Bhg)7tUIeS*ZHdr\9=V`H+$_nZS_e
%O)Lir5(Q*,M-lcO@p6Z'?XiZW`Fq__oZE:SR?#>go[7D-OC*JE"?RP)Z*.C&k\L$2-"K)Nh'</_A]Dn3Fp3iC^)f!r2iI9CgZ.]1
%d1k^U.OF,jF2b&rj=iP@jg!HqRq:5q1D5/oV(XtS'5Oja0B"EBX1;(SirBYRnrmN<!0@3`"KR'n(9oX?<epWSC1gY%h6adTo,ZHb
%RXDkKW?Z$(U2Vl;d:AWDOE+U:1"-.td\k^f)up*a:bsnYcb\(40?2G@dqK(B4a'aBd];nUF@Vfk4l=LTm#@iK6/E)tZ1)e&6JcP)
%?s?`HmB3%BZ.F_bAQI_DoP)A1XdU[Vp;gj9r"Odp%Ts;1I3^4Qg3BE?Z.CO:\li@T@&2qL,^JdB[_'OZ52<mX=YN)3XDVdSQf[N>
%rpd*nrs@;sNo7J%Y!(O_QXmo(*AJJcNMT.m/fE5X=._*n;u;"1T>2(GbIg-obc>>u>6AS\,\8nM+*V3N>/q!)!oVn3e4f3-9]!1s
%rkRCUDj]R%DN>tW`WKSPN=#]l<AC[H"bPS\HO,q6pWS8.J8-#d4W_f7R&&\S).J3&WUa>.1+JYSgTckX7Tka7\CeBtLqFc@bO/Qp
%`iF`Uo+0UDH#V8bTOV]:o@C3&\*6cMYVWp;4<IuXWB7)^HnW9?Z.LVWr+u$Pi6*<)d,o$\"G<+k5(m[]>WTF:8QT>,kNa2]`qY)?
%F,[*UL'I;kGWOUt%.dCA1@JVr#hY-5<S=81dl@CC5f3)>4q;fWG)R(&@I\k\?Kq<5,Q^c]+pR>5mf:NF(!.V9eCh6spuRaYojuG:
%8!<GqbWn%1^aV%-CGktrDqEsX)=C+os'kORF1XI%Lp,&3ZJ-=Vpk[f[VN5YtYY&($U2&!/.nSqX1%(H^\2PDJZtD-WRS?k$hE>/"
%cI4:TV/[2Gds4NH1PEn,^Y(mBGQafu"6<907gWi4A^X'6*`]rugAGKY[Q:"?Z)6e%!29R.P(N'P5TU[g,SmT*(,&,ob>APT6(92[
%fN'*RYUPb\j=D1B+]fWYDid(E)6cE7_<8fD*+[F-j3Di)Q-e\$*(!aQ_IXkg?%<3kJ&sYTSROQ#=A3Ul;%9^2"SFbD84RJ8V(+/A
%0(TsS:=<Q\F27,'Xfe2K(f_[?jbkM8Jlh%-+X;VNLUW#akfg&XR4P]W&o)Ld*&CEB&>5(]fJt<SX]mjP3%2"6ji8QH^(p^\6WUL\
%EAh/`E)3:sDFn`!2dqZ'A`mSDel$k'b3/O=`AHp4ZkU<'WSN_"#d<'Q+-s5GB]Ha':r]Gtj[Z,qjh6.9s5Kl9LWOL3kOsR:5#\$j
%:aB:I?Eu'C=R7c[,&q&e,!p==if(q-(YNF0QS-LJS?.)/<Qc.]/'hTfJ=ahl)*nO9Z#ed*<QtM;H8BV[j.:LV;aYILPsj3UggW6E
%]I>?B*fL/\=hnYLr"W>lhej;RhqCRaHbAC!O4jlkf[JJ`7cgeBNQce@R<&^&@TM[QbI)**p<_SUnGjnEbQ0^R3T#KtY^?0-3?F-q
%PFd$F4FFHd#0r15Xe_(!+gltlg:F_bO7!E4MC>V6TOL7hqM(p(p<p_sM`.<smHIYjjq3t>&6-Sk6g@Y]-n/q8/sQkZb*oY"4%44g
%kQUAFqKT`69V.^`>DDPh=n@6J@Pm9*HDS:LMfW#`nBV`*DksS&^O'9aYeqmUS`O60%2M/U(>ZE2hC`n)"6c<d)0n:Z$Pnf:B"_[.
%[8:pZd]9S%:cd?jiWL5(X>Yus9ds-Rgb[%m%!#o=DCmcpg;^sA@BLM?1n=MQ`t#gMX1IIt%[>a*dOjQ@JO>43@PeJ2$pPOMpGs\I
%n.fr@LT=-h_!1G!KX=i)jEPqTF0?4QrTeps/T8]667KJPlT]HBb+Zb_\QAV#kR!XPXu>f`To$2M8l5'`h3Ap5Y+p@]5gB.&A56@2
%>j7WE]e4+]`t::[gIlk,<d_>Pi]e2(cYQI1)/o'SMj+?]YIn%-8Z+)XHlOfHf%_[?l.L[t&8MN9ZA,Sa#)@8KqLnaRAtM3VLC;he
%Z.aMp%k`3h/gf!9H+R1YB8qZFH*oN=-]0@tpZUKZ3-F97_c#]MA%`o'e#PPU*q8a>mdD@<PrV=@>I]b3;_3Z[rk1C4Ve1^R:NPVc
%nRqKNEMN(#BpMtc'qbi@-&cGtG[_&Ogm9i!=A2b*fgfnmO@%<D`:NbhG^k<eZ(,#=8U6^%.>Ng>hp,"^>2f&L3\@nZ-5YL9E1D!-
%7'+Lpa7)2t9A=S&2mY[iqi*9)9's[<bXuedi@*QDG?0FkCPSr<iQd3[\@?Ms_h>o82;?Rk%bm';+j?6/Y[Xq&ZQ:k;GA6eu;YI;H
%45458'D?HU<1CoQa0YUnh/uI>eSa,E!($q9$D#gF&)FN@<FE?c)@i`.>MR]6-s9);24^d"d1s$&Cb_]]n^$ROe@fW.H_Je!W_==*
%`&nVfVZZmAJk"OURIiqNMbut3\*j\N)XKU]a2hre9^5,,G99WQERLB=^j@Cdbu+0/hZRI$&c"+21*bFldpuHu#S8B*\Ue=RSKR"!
%W:a7BUl0a&r`QFCnQZF'jLDGKh\Io+#Vs-4=\U2E6icJJ[t:Dt5AGV9)@)uCRh@7QY)H$Y2eF^+Hri*)a\#+i]Uaa<ofdLsj:r[A
%d>`"3Xml4OZS_oDOf4EZ1Pp>0=n8Q\ORarCRX1a;/mu&lLa=d?,benM$RXJA,?[$$FsCL\/UWk30lcSTf95'\1iBaV.sugso^i,n
%<M/9'euUl(Pg[cncb<utm3?<b)?ADWNbOZd,YHa&OpI<!Qds$Z=eNh]?h`pL<]nUZCgO+Fd[1.kk7Wg:P>adDnRuj]EY^dU?etR6
%^NN.4^?)2?c;7B1Q2nC)WP6;?"),d#fY1\(&bW]Udc1ai!D(A=6<QZG_JVht4I$:tVkWk,n]M?0i<BsAi%m[V*:?=<8#(1oAND\2
%\k57!6a*ib1?fl=<;,oFga:>ik_=B0mQOa_*YibT$WQ[n-:D"X%XIZDb_!m0N_E"XOrUk`B:qV1_\MTo\[],*.a!lDK(&8khh>%_
%6ZI^o`J<;%1c9\D_VVVca=Q&NCfI_R`GdOMI$<nuWg!Iml3=`]@`^5s`Bm&X.u$_`(6?,\4gQsu]pQ<f$Z=mk!]<h3*nRUfI\;p1
%6=eED0V@HH#h-^(q/7)`9SH"Z=l$X"701n]o3&024jfS$F-_^Q(4->,T0OFpR!b/D]CdRLWMk]\\B1"h#d[?g9%[#^=DXCkC8MLf
%[>5a*B9^25Z26'R"$*tP@]h<@-,4EratOmRq7#_sZ,gu(&e\RVfS`PIlG2QD[7b2meD@NmEPu%eK#NSSa8-EA7$=3NCi]LCMq,-)
%Rp?mpg6nU`jY4IC:Qn"q,4?AoqYLNrM#/aShq(N`*"_k@-u,ct;Z0M2?Bj,*Kf.e_b@YJ;VU!1('3F$ZPPR#^VO&r0(>)O&PPd:l
%3Vs+tN:=c,9E!k_,<.?Q0$<j2oYnF5kI?.l:3;:CP]K1\,B4LoH0jhWQ<_jkp.*BBVm=n6N:ZU=JR=7'[VnDj\u3kdVTb=:W4O*\
%iSP,V*Sgb<"$Q4T[6Wq1I%G(DQ.a#4fs5ID[F]kTA,lLl?6GM\"c+QEp1nGe'a6gHi_s)k9ePCHb(j5up'D)0eQI9"$GLH/&4FXO
%>E.@"rM6I=Hae`,\LSs[H7CkbVb21*TOnpsU13"Ln?GK_Uts35\U4,'+a]m*m'XAND6F9tERJtWMTVm-*j:EFmhOuJ@jbI?lEJI=
%X#fWgF8"1J*&\R[s+jDYD`3%W)><AuJ&PA#WG!Gq\)_,<'Xh7$Pf4-&2k6/!.P_aH1R[sg7!]<REuL4n(VSNNefc>+0jnu4?qeOU
%mV16e>BNIn]E/B#Yui$DfWa#T0OEmrW5G"Afa<L'OhsK&9C9hmSL'uF+1u$K2RdN,%/;GPK_[D:#--17r"orKl$>D0(g]]EeLr.H
%-84fsM;[DhrFM6YG`hjL/'B>UqFWYA5SbHh0LCWHCJ?4hY>"cN?JU=V2"A]HM.,_8ShKO9A`cA3s%8U8#3fNeoaXnS^C[8*[rddD
%Pkmta=c8Xi3=%p>#NP.J5q;`:d*ph*==8;<deI?6K%HiBP!pGSn22FGa/?BS1lI8e@Aa?gi[V;^;ok738kcm#-<Ut).%@N&f$n4?
%6d"_*`aQWBj9o&k$S[4[$647!;,S%J!(0:Y@IQ6DA&Yp$>u/T3C8q*7fXCCZQuL5?=#ZD+J]$=fIq*o,*/n*ALI2B;k8HXGAMR(;
%'EG'Q"npfF.8S1oVOZf.I/W*5<W(.>^hsHnj%RQs$s[\sjG2:>f7);&$>d#C]\_t^lBHK-3uG:ma+KhjN5q0e+:]2;5R'XLg:^>R
%2:L1.#p^R?3'<&25jPpq/D_<K7#5HA""<OMn7Cp-ZgdTpd9ll[%#;XPp?3E(CB/H[ER5o^iT]*SQ/U=VqhL[?hu)g7hu2O&^]3`B
%^\c(ChgYU'J,dD^s7c+<^\cj1nDcb5oZ*U(jd2V=o=obRjnnNGpm7WPkN<q9qU;)9r7@S?qX]3Oroo2&rpoYfrqbebIfA:Zs7,:P
%`PS9\^lL_Zrh'2KqsXM+i"jB[~>
%AI9_PrivateDataEnd
